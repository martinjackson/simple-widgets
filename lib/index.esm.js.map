{
  "version": 3,
  "sources": ["../src/AlertModal.js", "../src/Modal.js", "../src/CheckBox.js", "../src/ChoiceText.js", "../src/Common.js", "../src/ConfirmModal.js", "../src/ContextMenu.js", "../src/DateFunct.js", "../src/DateInput.js", "../src/date2str.js", "../src/DoubleListBox.js", "../src/List.js", "../src/ErrorModal.js", "../src/Header.js", "../src/encrypt.js", "../src/HeaderModal.js", "../src/InputFile.js", "../src/Invalid.js", "../src/MenuBar.js", "../src/NavigateBar.js", "../src/Outline.js", "../src/Radio.js", "../src/SearchFunct.js", "../src/SearchSortTable.js", "../src/Theme.js", "../src/Slider.js", "../src/SpreadSheet.js", "../src/StatusBox.js", "../src/browserDetect.js", "../src/camel.js", "../src/dateUtils.js", "../src/generalStore.js", "../src/localStrToDate.js", "../src/makeChangeHandler.js", "../src/serviceWorker.js", "../src/time.js", "../src/forms/DefaultFormElements.js", "../src/forms/FormFields.js", "../src/forms/FieldGenerator.js", "../src/forms/List.js", "../src/forms/Input.js", "../src/forms/CheckBoxGroup.js", "../src/forms/Show.js", "../src/forms/Form.js", "../src/forms/useFetch.js"],
  "sourcesContent": ["import React from 'react';\n\nimport Modal from './Modal.js';\n\nconst defProps = {\n    show: true,\n    closeFunct: () => {},\n    message: 'No Alert message given',\n}\n\nconst AlertModal = inProps => {\n\n    const props = {...defProps, ...inProps};\n\n    if (('show' in inProps) === false) {\n        console.error ('AlertModal: The show property is not present');\n    }\n\n    if (('closeFunct' in inProps) === false) {\n        console.error ('AlertModal: The closeFunct property is not present');\n    }\n\n    return (\n        <div>\n            {\n                props.show === true ?  (\n                    <Modal>\n                        <div>\n                            <h1>{(props.message === '') ? defProps.message : props.message}</h1>\n                            <button name=\"ok\" onClick={() => props.closeFunct(false)} className=\"sw-modal_abuttonStyle\" >OK</button>\n                        </div>\n                    </Modal>\n                ) : null\n            }\n        </div>\n    );\n}\n\nexport default AlertModal;\n", "import React, { useEffect, useRef }  from 'react';\nimport { createPortal } from 'react-dom';\n\n\nconst Modal = ({ children }) => {\n    const elRef = useRef(null);\n\n    if (!elRef.current) {\n        const div = document.createElement('div');\n        elRef.current = div;\n    }\n\n    useEffect(() => {\n        const modalRoot = document.getElementById('sw-modal');\n        if (modalRoot) {\n            modalRoot.appendChild(elRef.current);\n\n            return () => modalRoot.removeChild(elRef.current);\n        } else {\n            console.log('Can not find DOM element ID: sw-modal, Modal widget will not pop up.');\n            console.log('Please add the following to your index.html');\n            console.log('    <div id=\"sw-modal\"></div>');\n        }\n    }, [])\n\n    return createPortal(<div>{children}</div>, elRef.current);\n};\n\nexport default Modal;", "import React from 'react';\n\n  /*\n    \u2610  U+2610 &#9744;  Ballot Box\n    \u2611  U+2611 &#9745;  Ballot Box with Check\n    \u2612  U+2612 &#9746;  Ballot Box with X\n  */\n\n const checked = String.fromCharCode(9745) \n const unchecked = String.fromCharCode(9744) \n\nconst CheckBox = props => {\n  const handle = (e) => {\n    if (typeof e.preventDefault === 'function')\n        e.preventDefault();\n    e.target.name = props.name;\n    e.target.value = (props.value === props.selectedValue) ? '' : props.selectedValue;\n    props.onChange(e);\n  }\n\n  const {selectedValue, text, children, className, ...rest} = props\n\n  const isChecked = props.value === selectedValue\n  const symbol = (isChecked) ? checked : unchecked\n\n  return <button type=\"button\" onClick={handle} className={\"sw-checkbox_defaultStyle \" + className} {...rest}>\n         {symbol}\n         {text}\n         {children}\n         </button>\n}\n\nexport default CheckBox\n", "import React from 'react';\n\n// currently only accepts property choices as ['one','two']\n\nconst ChoiceText = inProps => {\n\n    let props = {...inProps};\n    const pref = (props.hasOwnProperty('name')) ? props.name + '_' : '';\n    const choices = props.choices;\n    delete props.choices;\n\n    return <span>\n               <input type=\"text\" {...props} />\n               <datalist id={props.list} >\n                 {choices.map( (el, k) => <option key={pref + k} value={el}>{el}</option>)}\n               </datalist>\n          </span>;\n}\n\nexport default ChoiceText;", "\n/*****************************************************************************\n *\n *  This method will sanitize any free format entry by making sure the text\n *  does not start with a colon (:).\n *\n *  @param text the text that is to be checked for any problems\n *  @param item Used to identify the item being sanitized\n *\n *  @return returns an object that contains a valid field and a message\n *          field.  The valid field is a boolean value that returns true if \n *          the text is sanitized and false if it does not.  The message field\n *          will be blank if the valid field is true.  The message field will\n *          contain a message of why the field in not valid if the valid field\n *          is false.\n *\n ****************************************************************************/\nexport const sanitize = (text, item) => {\n    const table = [\n        'SELECT',\n        'DELETE',\n        'INSERT',\n        'UPDATE',\n        'ALTER'\n    ];\n    let message = null;\n\n    if (text === null || text === '') {\n        return { valid: true, message: ''};\n    }\n\n    if (text.startsWith(':')) { // Check to see if the text starts with a colon (:)\n        message = item + ' can not start with a colon (:)';\n        return { valid: false, message: message };\n    }\n\n    for (let i = 0; i < table.length; i++) {\n        if (text.toUpperCase().startsWith(table[i])) {\n            message = item + ' can not start with the word ' + table[i];\n            return { valid: false, message: message };\n        }\n    }\n\n    return { valid: true, message: ''} ;  // No problems encountered\n}\n\n/********************************************************************************************\n * \n * This function will take a floating point value and format it as a dollar amount.  It will\n * contain a $ at the front of the number, commas in the appropriate places (every three \n * decimal places from right to left), a decimal point, and two digits right of the decimal.\n * For example: 12345.6789, will transformed to $12,345.68.\n * \n * @param {*} amount        the floating point number to be translated in the money format\n * @param {*} decimalCount  number of places right of the decimal point (default is 2 if not \n *                          present)\n * @param {*} decimal       symbol for the decimal point (default is a period (.), if not \n *                          present)\n * @param {*} thousands     the seperator of every three digits from right to left (default \n *                          is a comma (,), if not present)\n * @param {*} dollarSign    the value at the beginning of the number (default is a dollar \n *                          sign ($), if not present)\n * \n **********************************************************************************************/\nexport const formatMoney = (amount, decimalCount = 2, decimal = \".\", thousands = \",\", dollarSign = '$') => {\n    try {\n        // Truncate to the apprpriate number of decimals after the decimal point\n        decimalCount = Math.abs(decimalCount);\n        decimalCount = isNaN(decimalCount) ? 2 : decimalCount;\n    \n        // Determine if the number is negative or positive\n        const negativeSign = amount < 0 ? \"-\" : \"\";\n    \n        // Determine where the thousands seperators belong in the number\n        let i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();\n        let j = (i.length > 3) ? i.length % 3 : 0;\n    \n        // Return the money formatted number\n        return dollarSign + negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\\d{3})(?=\\d)/g, \"$1\" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : \"\");\n    } catch (e) {\n        console.log(e)\n    }\n}", "import React from 'react';\n\nimport Modal from './Modal.js';\n\nconst defProps = {\n    show: true,\n    yesFunct: () => {},\n    noFunct: () => {},\n    closeFunct: () => {},\n    message: 'No Confirm message given',\n}\n\nconst ConfirmModal = inProps => {\n    const props = {...defProps, ...inProps};\n\n    if (('show' in inProps) === false) {\n        console.error ('ConfirmModal: The show property is not present');\n    }\n\n    if (('yesFunct' in inProps) === false) {\n        console.error ('ConfirmModal: The yesFunct property is not present');\n    }\n\n    if (('noFunct' in inProps) === false && ('closeFunct' in inProps) === false) {\n        console.error ('ConfirmModal: The closeFunct property is not present');\n    }\n\n    return (\n        <div>\n            {\n                props.show === true ?  (\n                    <Modal>\n                        <div>\n                            <h1>{(props.message === '') ? defProps.message : props.message}</h1>\n                            <button name=\"yes\" onClick={(async) => processYesFunct()} className=\"sw-modal_cbuttonStyle\" >Yes</button>\n                            <button name=\"no\" onClick={(async) => processNoFunct()} className=\"sw-modal_cbuttonStyle\" >No</button>\n                        </div>\n                    </Modal>\n                ) : null\n            }\n        </div>\n    );\n\n    function processYesFunct() {\n        if (('noFunct' in inProps) === true && ('closeFunct' in inProps) === false) {\n            props.noFunct(false);\n        } else {\n            props.closeFunct(false);\n        }\n\n        if (props.yesFunct !== null) {\n            props.yesFunct();\n        }\n    }\n\n    function processNoFunct() {\n        if (('noFunct' in inProps) === true && ('closeFunct' in inProps) === false) {\n            props.noFunct(false);\n        } else {\n            props.closeFunct(false);\n        }\n\n        if (props.noFunct !== null) {\n            props.noFunct();\n        }\n\n    }\n}\n\nexport default ConfirmModal;", "import React from 'react';\n\nconst ContextMenu = (propsIn) => {\n    const { positionX, positionY, noLeave, noCancel, menu, ...props } = propsIn;\n\n    const propsPositionX = positionX || 10;\n    const propsPositionY = positionY || 10;\n    const propsNoLeave = noLeave || false;\n    const propsNoCancel = noCancel || false;\n    const propsMenu = menu || [];\n\n    const menuPositionStyle = {\n        left: propsPositionX,\n        right: propsPositionY,\n    }\n\n    function cancelButton() {\n        props.closeFunct (false);\n    }\n\n    function execute (funct) {\n        funct();\n        props.closeFunct(false);\n    }\n\n    function mouseLeave() {\n        if (propsNoLeave === false) {\n            props.closeFunct(false);\n        }\n    }\n\n    function buildMenuItem(row, i) {\n        let key = 'row_' + props.name + i;\n        let dkey = 'div_' + key\n\n        return (\n            <div key={dkey}>\n                <span className=\"sw-cm_contextMenuHov\" key={key} onClick={() => execute(row.funct)}>{row.name}</span><br /><br />\n            </div>\n        )\n    }\n\n    if (props.show === true) {\n        return (\n            <div className=\"sw-cm_contextMenuHov sw-cm_menuStyle\" onMouseLeave={mouseLeave} style={menuPositionStyle}>\n                {propsMenu.map(buildMenuItem)}\n                { (propsNoCancel) ? <br /> : <span><span className=\"sw-cm_contextMenuHov\" key=\"cancelKey\" onClick={cancelButton}>Cancel</span><br /><br /></span> }\n            </div>\n        )\n    } else {\n        return null;\n    }\n}\n\nexport default ContextMenu;", "/***************************************************************************\n * \n * This will convert a date from the YYYY-MM-DD format to the MM/DD/YYYY \n * format.\n * \n * @param {*} convDate the date in the YYYY-MM-DD format\n * \n ***************************************************************************/\nexport const convertDate = (convDate) => {\n    if (convDate === null) return null;\n    if (convDate.indexOf('-') === -1) return convDate;\n\n    let date = convDate.split('-');\n    return date[1] + '/' + date[2] + '/' + date[0]; \n}\n\n/****************************************************************************\n * \n * This will convert a date and time in the YYYY-MM-DDTHH:MM:SS.sss format\n * to the MM/DD/YYYY HH:MM:SS format.\n * \n * @param {*} dateAndTime the date in the YYYY-MM-DDTHH:MM:SS.sss format\n * \n ****************************************************************************/\nexport const dateTime = (dateAndTime) => {\n    if (dateAndTime === null) return null;\n\n    let splitDT = dateAndTime.split('T');   // Split the date and time\n    let date = splitDT[0].split('-');       // Split the date\n    let partTime = splitDT[1].split('.');   // Remove the microseconds\n    let time = partTime[0].split(':');      // Split the time\n\n    return date[1] + '/' + date[2] + '/' + date[0] + ' ' +\n                time[0] + ':' + time[1] + ':' + time[2];\n}\n\n/***************************************************************************\n * \n * If value contains a single digit, it will place a 0 in front of the\n * single digit.\n * \n * @param {*} value the value to determine whether a 0 should be placed\n *                  in front of the single digit\n * \n ****************************************************************************/\nexport const addDigit = (value) => {\n    let newValue = null;        // Value to be returned\n    if (value.length === 1) {   // Value is a single digit\n        newValue = '0' + value;\n        return newValue;\n    }\n\n    return value;\n}\n\n/*****************************************************************************\n * \n * This will return the current date and time in the MM/DD/YYYY HH:MM:SS \n * format.\n * \n *****************************************************************************/\nexport const currentDateTime = () => {\n    let today = new Date(); // Current date and time\n    return addDigit((today.getMonth() + 1).toString()) + '/' + \n            addDigit(today.getDate().toString()) + '/' + \n            today.getFullYear().toString() + ' ' +\n            addDigit(today.getHours().toString()) + ':' + \n            addDigit(today.getMinutes().toString()) + ':' + \n            addDigit(today.getSeconds().toString()); \n}\n\n/*****************************************************************************\n * \n * This will return the current date in the MM/DD/YYYY format.\n * \n *****************************************************************************/\nexport const currentDate = () => {\n    let today = new Date();\n    return addDigit((today.getMonth() + 1).toString()) + '/' + \n           addDigit(today.getDate().toString()) + '/' + \n           today.getFullYear().toString();\n}\n\n/*****************************************************************************\n * \n * This will return the date that Oracle expects to receive as a string.  The\n * format will be YY-MON-DD HH:MM:SS.sss.\n * \n ******************************************************************************/\nexport const currentDBDateTime = () => {\n    let today = new Date();\n    \n    return today.getFullYear().toString().substr(2, 2) + '-' +  // Two digit year\n            monthName(today.getMonth()) + '-' +             // Month as a three letter abbreviation\n            addDigit(today.getDate().toString()) + ' ' +\n            addDigit(today.getHours().toString()) + ':' + \n            addDigit(today.getMinutes().toString()) + ':' + \n            addDigit(today.getSeconds().toString()) + '.' +\n            today.getMilliseconds().toString();\n}\n\n/*********************************************************************************\n * \n * This will place the current date in the YYYY-MM-DD format.\n * \n *********************************************************************************/\nexport const currentDBDate = () => {\n    let today = new Date(); // Get the current date\n    return today.getFullYear().toString() + '-' +   // Format the date in the YYYY-MM-DD format\n            addDigit((today.getMonth() + 1).toString()) + '-' + \n            addDigit(today.getDate().toString());\n}\n\n/**********************************************************************************\n * \n * The will take a date in the MM/DD/YYYY format and convert it to the YYYY-MM-DD \n * format.\n * \n * @param {*} date  the date in the MM/DD/YYYY format\n * \n **********************************************************************************/\nexport const dbDate = (date) => {\n    let split = date.split('/');    // Divide the MM/DD/YYYY into individual components\n    return split[2] + '-' + // Convert to the YYYY-MM-DD format\n            split[0] + '-' +\n            split[1];\n}\n\n/*****************************************************************************\n *\n *  This will convert month as a number into a three letter month name.\n *\n *  @param month the month as a number between 0 and 11\n *\n *  @return returns the three letter month abbreviation\n *\n ****************************************************************************/\nexport const monthName = (month) => {\n    switch (month) {\n        case 0: return 'JAN';\n        case 1: return 'FEB';\n        case 2: return 'MAR';\n        case 3: return 'APR';\n        case 4: return 'MAY';\n        case 5: return 'JUN';\n        case 6: return 'JUL';\n        case 7: return 'AUG';\n        case 8: return 'SEP';\n        case 9: return 'OCT';\n        case 10: return 'NOV';\n        case 11: return 'DEC';\n    }\n}\n\n", "import React from 'react';\n\n// import { date2str } from \"simple-widgets\";\nimport { date2str } from \"./date2str\"\n\n//--------------------------------------------------------------------------------\nconst DateInput = (props) => {\n\n    let { name, value, format, onChange, ...whatsLeft  } = props\n\n    if (!value)          // undefined causes React to think\n      value = \"\"        // A component is changing an uncontrolled input to be controlled.\n\n    if (value instanceof Date) {\n      value = date2str(value, format)\n    }\n    return  <input type=\"date\"\n              {...whatsLeft}\n              key={name}\n              name={name}\n              value={value}\n              onChange={onChange}\n\n              placeholder={format}\n              data-date-format={format}\n              />\n}\n\n/*\n see https://stackoverflow.com/questions/7372038/is-there-any-way-to-change-input-type-date-format\nfor using data-date-format with CSS and JS to format the date the way\n\nThe rest is a bit of CSS and JS: http://jsfiddle.net/g7mvaosL/\n\n$(\"input\").on(\"change\", function() {\n    this.setAttribute(\n        \"data-date\",\n        moment(this.value, \"YYYY-MM-DD\")\n        .format( this.getAttribute(\"data-date-format\") )\n    )\n}).trigger(\"change\")\n\n\ninput {\n    position: relative;\n    width: 150px; height: 20px;\n    color: white;\n}\n\ninput:before {\n    position: absolute;\n    top: 3px; left: 3px;\n    content: attr(data-date);\n    display: inline-block;\n    color: black;\n}\n\ninput::-webkit-datetime-edit, input::-webkit-inner-spin-button, input::-webkit-clear-button {\n    display: none;\n}\n\ninput::-webkit-calendar-picker-indicator {\n    position: absolute;\n    top: 3px;\n    right: 0;\n    color: black;\n    opacity: 1;\n}\n*/\n\nexport default DateInput\n", "// taken from http://jsfiddle.net/wLWuS/11/\n\nexport const date2str = (date,pattern) => {\n  var z = {\n      y:date.getFullYear(),\n      M:date.getMonth()+1,\n      d:date.getDate(),\n      h:date.getHours(),\n      m:date.getMinutes(),\n      s:date.getSeconds()\n  };\n  return pattern.replace(/(y+|M+|d+|h+|m+|s+)/g, function(v){\n      const len = v.length > 2 ? v.length : 2    // allows y-M-d to produce yy-MM-dd\n      const s = '0' + z[v.slice(-1)]\n      return s.slice( -(len) );\n  });\n}\n", "\nimport React, { useState, useRef, useEffect } from 'react';\n\nimport { List } from './List.js';\n\nconst hasProperty = (obj, propName) => { return !!Object.getOwnPropertyDescriptor(obj, propName);}\n\nconst DoubleListBox = props => {\n    const leftRef = useRef();\n    const rightRef = useRef();\n\n    const [choices, setChoices] = useState([...props.choices || []]);\n    const [leftValues, setLeftValues] = useState(choices.filter( item => ![...props.value || []].find(r => r === item)));\n    const [rightValues, setRightValues] = useState([...props.value || []]);\n    const [leftSelections, setLeftSelections] = useState([]);\n    const [rightSelections, setRightSelections] = useState([]);\n\n    const reset = (props) => {\n        if (!props.value) {\n            console.log(\"DoubleListBox props 'value' field is missing.\");\n        }\n    \n        if (!props.choices) {\n            console.log(\"DoubleListBox props 'choices' field is missing.\");\n        }\n    \n        const choices = [...props.choices || []]\n        const right = [...props.value || []]\n        const left = choices.filter( item => !right.find(r => r === item))  // not in the right\n        \n        setChoices(choices);\n        setLeftValues(left);\n        setRightValues(right);\n        setLeftSelections([]);\n        setRightSelections([]);\n    }\n\n    useEffect (() => reset(props), [props.choices]);\n\n    const reportChange = (right) => {\n        let compName = 'DoubleListBox';\n        if (hasProperty(props, 'name') === true) {\n            compName = props.name;\n        }\n        \n        // dont modify 'e', a Synthetic Event\n        props.onChange({target: {name: compName, value: right}});\n    }\n\n    const add = (a,b) => {\n        let ans = [...a];\n        for (let i = 0; i < b.length; i++) {\n            ans.push (b[i]);\n        }\n        return ans\n    }\n\n    const sub = (a,b) => {\n        let ans = [];\n        for (let i = 0; i < a.length; i++) {\n            if ( !b.includes(a[i]) )\n               ans.push (a[i]);\n        }\n        return ans\n    }\n\n    const moveRightSelectButton = (e) => {\n        let right = add(rightValues, leftSelections)\n        let left =  sub(leftValues, right)\n\n        setLeftValues(left);\n        setRightValues(right),\n        setLeftSelections([]);\n        reportChange(right);\n\n        clearSelections();\n    }\n\n    const clearSelections = () => {\n        const leftBox = leftRef.current;\n        const rightBox = rightRef.current;\n\n        for (let i = 0; i < leftBox.length; i++) {\n            leftBox[i].selected = false;\n        }\n\n        for (let i = 0; i < rightBox.length; i++) {\n            rightBox[i].selected = false;\n        }\n    }\n\n    const moveLeftSelectButton = (e) => {\n        let left = add(leftValues, rightSelections)\n        let right =  sub(rightValues, left)\n\n        setLeftValues(left);\n        setRightValues(right);\n        setRightSelections([]);\n        reportChange(right);\n\n        clearSelections();\n    }\n\n    const moveRightAllButton = (e) => {\n        let left = leftValues;\n        let right = [...rightValues];\n\n        for (let i = 0; i < left.length; i++) {\n            right.push (left[i]);\n        }\n\n        setLeftValues([]);\n        setRightValues(right);\n        setLeftSelections([]);\n        reportChange(right);\n    }\n\n    const moveLeftAllButton = (e) => {\n        let left = [...leftValues];\n        let right = rightValues;\n\n        for (let i = 0; i < right.length; i++) {\n            left.push (right[i]);\n        }\n\n        setLeftValues(left);\n        setRightValues([]);\n        setRightSelections([]);\n        reportChange([]);\n    }\n\n    const leftHandleChange = (e) => {\n        if (typeof e === 'string')\n          return;   // Passed in by Radio, can be ignored, next event has target.name\n\n        if (typeof e.preventDefault === 'function') {\n          e.preventDefault();\n        }\n\n        const leftBox = leftRef.current;\n\n        let values = [];\n        for (let i = 0; i < leftBox.length; i++) {\n            if (leftBox[i].selected === true) {\n                values.push (leftBox[i].value);\n            }\n        }\n\n        setLeftSelections(values);\n    }\n\n    const rightHandleChange = (e) => {\n        if (typeof e === 'string')\n          return;   // Passed in by Radio, can be ignored, next event has target.name\n\n        if (typeof e.preventDefault === 'function') {\n          e.preventDefault();\n        }\n\n        const rightBox = rightRef.current;\n\n        let values = [];\n        for (let i = 0; i < rightBox.length; i++) {\n            if (rightBox[i].selected === true) {\n                values.push (rightBox[i].value);\n            }\n        }\n\n        setRightSelections(values);\n    }\n\n    const isPosInt = (num) => {\n        return /^\\d*$/.test(num);\n    }\n\n/*\n    if (props.choices.length === 0) {\n        reset(props)\n    }\n\n    for (let i = 0; i < props.choices.length; i++) {\n        if (props.choices[i] !== choices[i]) {\n            reset(props)\n        }\n    }\n*/\n\n    let defaultSize = 7;\n\n    if ((props.leftTitle && !props.rightTitle) || !props.leftTitle && props.rightTitle) {\n        console.log ('There must both be a right title and a left title');\n    } else if (props.leftTitle && props.rightTitle) {\n        defaultSize = 10;\n    } else if (!props.leftTitle && !props.rightTitle) {\n        defaultSize = 7;\n    }\n\n    let size = 0;\n    if (hasProperty(props, 'size') === true) {\n        if (props.size === 'all') {\n            size = Math.max(defaultSize, props.choices.length);\n        } else if (isPosInt(props.size)) {\n            size = Math.max(defaultSize, parseInt(props.size));  // arrow buttons need 7 or 10 lines\n        } else {\n            size = defaultSize;\n        }\n    }\n    else {\n        size = defaultSize;  // arrow buttons need 7 or 10 lines\n    }\n\n\n    return (\n        <div className=\"sw-dlb_overallStyle\">\n            <div  className=\"sw-dlb_titleClass\">\n                <label>{props.title}</label>\n            </div>\n            <div className=\"sw-dlb_topSt\">\n                <div className=\"sw-dlb_display\">\n                    <p className=\"sw-dlb_leftClass\">{props.leftTitle}</p>\n                    <List list={leftValues} ref={leftRef} size={size} onChange={leftHandleChange} keyname=\"left\" className=\"sw-dlb_listSt\" />\n                </div>\n                <div className=\"sw-dlb_colSt\">\n                    <button name=\"moveRightSelect\"   className=\"sw-dlb_buttonSt\" onClick={moveRightSelectButton}>&gt;</button>\n                    <button name=\"moveRightAll\"      className=\"sw-dlb_buttonSt\" onClick={moveRightAllButton}>&gt;&gt;</button>\n                    <button name=\"moveLeftSelect\"    className=\"sw-dlb_buttonSt\" onClick={moveLeftSelectButton}>&lt;</button>\n                    <button name=\"moveLeftAll\"       className=\"sw-dlb_buttonSt\" onClick={moveLeftAllButton}>&lt;&lt;</button>\n                </div>\n                <div className=\"sw-dlb_display\">\n                    <p className=\"sw-dlb_rightClass\"> {props.rightTitle}</p>\n                    <List list={rightValues} ref={rightRef} size={size} onChange={rightHandleChange} keyname=\"right\" className=\"sw-dlb_listSt\" />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default DoubleListBox;", "import React, { Fragment } from 'react';\n\nconst hasProperty = (obj, propName) => { return !!Object.getOwnPropertyDescriptor(obj, propName);}\n// const min = (arr) => arr.reduce((acc))\n\nconst _Choice = (propsIn, ref) => {\n\n    const {list, choices, size, value, onChange, ...props} = propsIn\n    const opt = list || choices || []\n    const keyPart = (hasProperty(props,'keyName')) ? props.keyName + '_' : ''\n    const pref = (hasProperty(props,'name')) ? props.name + '_' + keyPart : ''\n\n    if ( typeof(value) == 'string' && !opt.includes(value) )\n    {\n        if (opt.length >0) {\n          // console.log(`Adding missing default value: '${value}' to ${JSON.stringify(opt)}`);  can be too long in the console\n          console.log(`Adding missing default value: '${value}' to ${pref} [${opt.length}]`);\n        }\n        opt.unshift(value)\n    }\n\n\n    const listHandleChange = (e) => {\n\n      if (typeof e.preventDefault === \"function\") {\n        e.preventDefault();\n      }\n\n      // if multiple is true the returning value should be an array of selected values,\n      //     not just the value on the last clicked/unclicked element\n      // if multiple is false, e.target.value will be a string of the choice selected\n      // See React SyntheticEvent   https://reactjs.org/docs/events.html\n\n      const e2 = {\n        preventDefault: e.preventDefault,\n        target: { ...e.target}\n      }\n\n      const arr = Array.from(e.target.selectedOptions, option => option.value)\n      e2.target.name = e.target.name\n      e2.target.value = (props.multiple) ? arr : e.target.value\n\n      // console.log(`listHandleChange calling onChange(e2) ${e2.target.name} ${JSON.stringify(e2.target.value)} `);\n\n      onChange(e2)\n    }\n\n    return <Fragment>\n              <select ref={ref} multiple={props.multiple} size={size} value={value} onChange={listHandleChange} {...props} >\n                  {opt.map( (el,key) => <option key={pref + key} value={el}>{el}</option>)}\n              </select>\n           </Fragment>;\n\n}\n\nconst _List = (props, ref) => (\n  <Choice className=\"ChoiceClass\" ref={ref} multiple={true} {...props} />\n  )\n\nexport const Choice = React.forwardRef(_Choice);\nexport const List = React.forwardRef(_List);\n", "import React from 'react';\n\nimport Modal from './Modal.js';\n\nconst defProps = {\n    show: true,\n    closeFunct: () => {},\n    message: 'No Error message given',\n}\n\nconst ErrorModal = inProps => {\n    const props = {...defProps, ...inProps};\n\n    if (('show' in inProps) === false) {\n        console.error ('ErrorModal: The show property is not present');\n    }\n\n    if (('closeFunct' in inProps) === false) {\n        console.error ('ErrorModal: The closeFunct property is not present');\n    }\n\n    return (\n        <div>\n            {\n                (props.show === true) ?  (\n                    <Modal>\n                        <div>\n                            <h1 className=\"modal_marginStyle\">Error</h1>\n                            <h2>{(props.message === '') ? defProps.message : props.message}</h2>\n                            <button name=\"ok\" onClick={() => props.closeFunct(false)} className=\"sw-modal_ebuttonStyle\" >OK</button>\n                        </div>\n                    </Modal>\n                ) : null\n            }\n        </div>\n    );\n}\n\nexport default ErrorModal;", "import React, { useState } from 'react';\nimport AlertModal from './AlertModal'\n\nimport { getList } from './encrypt.js'\nimport HeaderModal from './HeaderModal'\n\nconst Header = (props) => {\n\n  const [showModal, setShowModal] = useState(false)\n  const [showAlert, setShowAlert] = useState( true )\n\n  if (!props) {\n     console.log('<Header> w/o props');\n     return null\n  }\n\n  const title       = (props.title)                   ? props.title       : ''\n  const dbType      = (props.dbType)                  ? props.dbType      : ''\n  const username    = (props.username)                ? props.username    : ''\n  const titleLogo   = (props.titleLogo !== undefined) ? props.titleLogo   : ''\n  const alertLogo   = (props.alertLogo !== undefined) ? props.alertLogo   : ''\n  const logoutURL   = (props.logoutURL)               ? props.logoutURL   : ''\n  const loginURL    = (props.loginURL)                ? props.loginURL    : ''\n  const setUsername = (props.setUsername)             ? props.setUsername : () => {console.log('no setUsername fn() passed to Header.');}\n\n  let userMsg  = (username === null) ? \"User not Logged in\" : 'Welcome: ' + username\n\n  const logout = (username === null || logoutURL === null) ?\n             null : <a href={logoutURL} className=\"sw-header_link\">Logout</a>\n\n  const login  = (username !== null || loginURL === null)  ?\n             null : <a href={loginURL} className=\"sw-header_link\">Login</a>\n\n  let modalButton = null\n  if (getList().find(p => p === username)) {\n        modalButton = <button id=\"sw-modalButton\" onClick={() => setShowModal(true)}>.</button>\n  }\n\n  let alert = null\n  if (!username && !props.noModalOnError) {\n    const img = (alertLogo) ? <><img src={alertLogo} /><br/></> : null\n    const msg = <>{img}<span>You are an unauthorized user or your login time has expired</span></>\n    alert = <AlertModal show={showAlert} closeFunct={setShowAlert} message={msg} />\n  }\n\n  const titleImg = (titleLogo !== null) ? <img src={titleLogo} alt=\"Logo\" className=\"sw-header_logo\" /> : null\n  return (<header>\n            <div className=\"sw-header_div\">\n              {titleImg}\n              <h1 className=\"sw-header_title\">{title}</h1>\n              <span className=\"sw-header_link\">{userMsg}{modalButton}</span>\n              <h2>{dbType}</h2>\n              {logout}\n              {login}\n              <HeaderModal show={showModal} username={username} setUser={setUsername} closeFunct={setShowModal}/>\n            </div>\n            {alert}\n          </header>);\n}\n\nexport default Header;\n", "import CryptoJS from 'crypto-js'\n\nconst ekey='MDHKE-GZPUR-SJRNP-DFIEO-XWZKK-UPACJ-GVXMM-KLCRE-OXWLH-KWCVA-JRKEK-RTFFY'\nconst list='U2FsdGVkX1/9AWZf+ig7cTMoqm/l6Je0hmSq1luhRo+aEA4n78UPdzVpscziF0yzr1baB8Ef0sGv4OtaibyWzA=='\n\nexport const getList = () => {\n    return decrypt(list).split(',')\n}\n\nexport const decrypt = (msg) => {\n    if (!ekey) {\n       return msg\n    }\n\n    return CryptoJS.AES.decrypt(msg, ekey).toString(CryptoJS.enc.Utf8)\n}\n\nexport const encrypt = (msg) => {\n    if (!ekey) {\n        return msg\n     }\n     \n     return CryptoJS.AES.encrypt(msg, ekey).toString();\n}\n\n", "import React, { useState } from 'react';\n\nimport Modal  from './Modal';\n\n\nconst HeaderModal = (props) => {\n\n    const [user, setUser] = useState(props.username)\n\n    const closeButton = () => {\n        props.setUser(user)\n        props.closeFunct(false);\n    }\n\n    return (\n        <div>\n            {(props.show === true) ?\n                <Modal>\n                    <div>\n                        <div>\n                           <input type=\"text\" name=\"user\" value={user}\n                                  onChange={(event) => setUser(event.target.value)} />\n                        </div>\n                        <button name=\"close\" onClick={closeButton} >Close</button>\n                    </div>\n                </Modal> : null\n            }\n        </div>\n    )\n}\n\nexport default HeaderModal;", "import React, { useState } from 'react';\n\nconst hasProperty = (obj, propName) => { return !!Object.getOwnPropertyDescriptor(obj, propName);}\n\nconst InputFile = (props) => {\n    const [displayFile, setDisplayFile] = useState('');\n\n    let buttonName = 'Browse';\n    if (hasProperty(props, 'buttonname')) {\n        buttonName = props.buttonname;\n    }\n\n    const processFile = (file) => {\n        setDisplayFile(file.name);\n\n        if (hasProperty(props, 'getFileName')) {\n            props.getFileName(file.name, file);\n        }\n\n        if (hasProperty(props, 'additionalProcessing')) {\n            props.additionalProcessing();\n        }\n    }\n\n    const processDisplayDefault = (value) => {\n        console.log ('file', value);\n    }\n\n    let processDisplay = processDisplayDefault;\n    if (hasProperty(props, 'processDisplay')) {\n        processDisplay = props.processDisplay;\n    }\n\n    return (\n        <span className=\"InputFileClass\">\n            <label htmlFor={props.id} className=\"sw-infile_marginStyle\">{props.title}</label>\n            <input file=\"text\" id=\"pfile\" name=\"displayFile\" value={displayFile} className=\"sw-infile_textStyle\" onChange={(event) => processDisplay(event.target.value)} />\n            <label htmlFor={props.id} className=\"sw-infile_buttonStyle  sw-theme_normalButtonBackground\" >\n                <input type=\"file\" id={props.id} accept={(props.hasOwnProperty('accept')) ? props.accept : '' } className=\"sw-infile_fileStyle\" onChange={(event) => processFile(event.target.files[0])} />\n                {buttonName}\n            </label>\n        </span>\n    )\n}\n\nexport default InputFile;", "\r\nimport React from 'react';\r\n\r\n/***************************************************************************************\r\n *\r\n * Invalid Values format for the screen:\r\n *\r\n * invalidValues = [\r\n *  { validity: true or false,  This indicates whether the input item contains an\r\n *                              invalid item (true) or not (false).  The initial value\r\n *                              will be false, until an invalid item is found for this\r\n *                              input item.\r\n *    display: true or false,   This indicates whether the message should be displayed\r\n *                              or not.  Initially this value will be false, when an\r\n *                              invalid value for this input item is found, it will\r\n *                              be set to true.  When the mouse is clicked for this\r\n *                              input item, the value will be set back to false.\r\n *    message: string           The message that will be displayed whenever the mouse\r\n *                              is hovered over the input item and display is true.\r\n *  }, ...\r\n * ]\r\n *\r\n *\r\n * Input Values format for the table:\r\n *\r\n * invalidValues = [\r\n *  { validity: [],             Each array position will indicate whether that input item on\r\n *                              a row in the table is invalid (true).  Only those items that\r\n *                              have invalid values are placed in the array.  Initially the\r\n *                              array will be empty.\r\n *    display: [],              Each array position will indicate whether the message should\r\n *                              be displayed for that item (true) or not (false) for that row\r\n *                              in the table.  The value will be true when initally inserted\r\n *                              with the validity value.  When the user click on the mouse on\r\n *                              the input item, the value will be changed to false.\r\n *    index: [],                Each array position will contain the row number (starting at 0)\r\n *                              in the table for the input item that constains the invalid\r\n *                              value.  Initially the array will be empty.\r\n *    message: [],              Each array positon will contain the message that will be displayed\r\n *                              whenever the mouse is hovered over the input item and the display\r\n *                              is true.  Initially the array will be empty.\r\n *  }\r\n * ]\r\n *\r\n *\r\n * Input Values format for both screen and table (dual):\r\n *\r\n *  The invalid values array will contain the format for the screen (see above) and the format\r\n *  for the table (see above).  The screen format should be first followed by the table.\r\n *\r\n *\r\n * Contants\r\n *  The constants indicate the array position for each input item.  The are generally given a\r\n *  name followed by the index value.  The name is given in the code.\r\n *\r\n *\r\n * Screen Example:\r\n *\r\n *  invalidValues = [\r\n *      { validity: false, display: false, message: 'The name must be given a value' },\r\n *      { validity: true, display: true, message: 'The SSN must be given a value' },\r\n *      { validity: true, display: false, message: 'The address must be given a value' }\r\n *  ]\r\n *\r\n *  const NAME = 0;\r\n *  const SSN = 1;\r\n *  const ADDR = 2;\r\n *\r\n *  invalidValues[NAME] contains a valid name, since validity is false.\r\n *  invalidValues[SSN] contains an invalid SSN (validity is true) and the message will be\r\n *      displayed when the mouse is hovered over it, since display is true.  If the user,\r\n *      clicks on the input item, display will be set to false and the message will not be\r\n *      displayed.\r\n *  invalidValues[ADDR] contains an invalid addresss (validity is true), but the message will\r\n *      not be displayed, since display is false.\r\n *\r\n *\r\n * Table Example:\r\n *\r\n *  invalidValues = [\r\n *      { validity: [true, true], display: [true, false], index: [3, 4], message: ['The name is a duplicate, 'Invalid Name']},\r\n *      { validity: [true, true], display: [true, false], index: [8, 14], message: ['The SSN is a duplicate, 'Invalid SSN']},\r\n *  ]\r\n *\r\n *  const NAME = 0;\r\n *  const SSN = 1;\r\n *\r\n *  invalidValues[NAME] contains two invalid names (validity is true) in the table at rows 3 and 4\r\n *      (actual 4 and 5).  The message 'The name is a duplicate' is being displayed, since display is true\r\n *      for that input item on row 3 of the table.   The message 'Invalid name' will not be displayed,\r\n *      since display is false for that input item on row 4 of the table.\r\n *\r\n *  ivalidValues[SSN] contains two invalid SSNs (validity is true) in the table at rows 8 and 14\r\n *  (actual 9 and 15).  The message 'The SSN is a duplicate' is being displayed, since display is true\r\n *      for that input item on row 8 of the table.   The message 'Invalid SSN' will not be displayed,\r\n *      since display is false for that input item on row 14 of the table.\r\n *\r\n * Dual Example (screen and table):\r\n *\r\n *  invalidValues = [\r\n *      { validity: false, display: false, message: 'The name must be given a value' },\r\n *      { validity: true, display: true, message: 'The SSN must be given a value' },\r\n *      { validity: true, display: false, message: 'The address must be given a value' }\r\n *      { validity: [true, true], display: [true, false], index: [3, 4], message: ['The name is a duplicate, 'Invalid Name']},\r\n *      { validity: [true, true], display: [true, false], index: [8, 14], message: ['The SSN is a duplicate, 'Invalid SSN']},\r\n *  ]\r\n *\r\n *  const NAME = 0;\r\n *  const SSN = 1;\r\n *  const ADDR = 2;\r\n *  const NAMET = 3;\r\n *  const SSNT = 4;\r\n *\r\n *  invalidValues[NAME] see invalidValues[NAME] in the Screen Example.\r\n *  invalidValues[SSN] see invalidValues[SSN] in the Screen Example.\r\n *  invalidValues[ADDR] see invalidValues[ADDR] in the Screen Example.\r\n *  invalidValues[NAMET] see invalidValues[NAME] in the Table Example.\r\n *  invalidValues[SSNT] see invalidValues[SSN] in the Table Example.\r\n *\r\n ************************************************************************************************/\r\n\r\n/*****************************************************************************************\r\n *\r\n * This will generate the invalid array for both screen and table.  It will then return\r\n * the invalid array.\r\n *\r\n * @param {*} numScreenConstants    the number of entries for the screen.  If there are no\r\n *                                  screen entries then the value should be zero.\r\n * @param {*} numTableConstants     the number of entries for the table.  If there are no\r\n *                                  table entries then the value should be zero.\r\n *\r\n *****************************************************************************************/\r\nexport const generateInvalid = (numScreenConstants, numTableConstants) => {\r\n    let invalidArray = [];  // The invalid array to be built\r\n\r\n    // Build the screen entries\r\n    for (let i = 0; i < numScreenConstants; i++) {\r\n        invalidArray.push({ validity: false, display: false, message: '' });\r\n    }\r\n\r\n    // Build the table entries\r\n    for (let i = 0; i < numTableConstants; i++) {\r\n        invalidArray.push({ validity: [], display: [], index: [], message: [] });\r\n    }\r\n\r\n    return invalidArray;\r\n}\r\n\r\n/***************************************************************************************\r\n *\r\n * This indicates that one of the input items on the screen contains an invalid value.\r\n *\r\n * @param {*} invalidValues     list of valid and invalid inputs for the screen\r\n * @param {*} constant          indicates which of the input items that is in invalid\r\n *                              (the index into the array)\r\n * @param {*} message           message for the invalid value\r\n *\r\n ****************************************************************************************/\r\nexport const setInvalidScreen = (invalidValues, constant, message) => {\r\n    invalidValues[constant].validity = true;    // Indicates the value is invalid\r\n    invalidValues[constant].display = true;     // Indicates the message should be displayed\r\n    if (message !== null) { // There is a message\r\n        invalidValues[constant].message = message;\r\n    }\r\n\r\n    return invalidValues;\r\n}\r\n\r\n/*******************************************************************************************\r\n *\r\n * This indicates that one of the input items in a table contains an invalid value.\r\n *\r\n * @param {*} invalidValues     list of invalid inputs for the table\r\n * @param {*} constant          indicates which of the input items is invalid (the index\r\n *                              into the array)\r\n * @param {*} index             row number (from zero) in the table that contains the\r\n *                              invalid item\r\n * @param {*} message           message for the invalid value\r\n *\r\n ********************************************************************************************/\r\nexport const setInvalidTable = (invalidValues, constant, index, message) => {\r\n    let found = false;  // Indicates whether the invalid item already exists in the invalid values array\r\n    let pos = 0;        // Position where the item was found in the index array\r\n\r\n    // Spin through the array to find whether the item already exists in the\r\n    // index array for that input item\r\n    for (let i = 0; i < invalidValues[constant].index.length; i++) {\r\n        if (invalidValues[constant].index[i] === index) {\r\n            found = true;\r\n            pos = i;\r\n        }\r\n    }\r\n\r\n    if (found) {    // Item already exists\r\n        invalidValues[constant].validity[pos] = true;\r\n        invalidValues[constant].display[pos] = true;\r\n        if (message !== null) { // There is a message\r\n            invalidValues[constant].message[pos] = message;\r\n        }\r\n    } else {    // Item does not exist, so place in in the appropriate arrays for that input item in the table\r\n        invalidValues[constant].validity.push(true);\r\n        invalidValues[constant].display.push(true);\r\n        invalidValues[constant].index.push(index);\r\n        if (message !== null) { // There is a message\r\n            invalidValues[constant].message.push(message);\r\n        } else {\r\n            invalidValues[constant].message.push('');\r\n        }\r\n    }\r\n\r\n    return invalidValues;\r\n}\r\n\r\n/***********************************************************************************************\r\n *\r\n * This indicates that one of the input items is either on the screen or in a table and\r\n * contains an invalid value.\r\n *\r\n * @param {*} invalidValues list of invalid inputs for the screen or table\r\n * @param {*} constant1     index into the screen input items\r\n * @param {*} constant2     index into the table screen items\r\n * @param {*} index         row number in the table from zero\r\n * @param {*} type          indicates whether it is a screen entry (I) or table entry\r\n * @param {*} message       message for the invalid value\r\n *\r\n ***********************************************************************************************/\r\nexport const setInvalidDual = (invalidValues, constant1, constant2, index, type, message) => {\r\n    if (type === 'S') { // Screen entry\r\n        invalidValues = setInvalidScreen (invalidValues, constant1, message);\r\n    } else if (type === 'T') {    // Table entry\r\n        invalidValues = setInvalidTable (invalidValues, constant2, index, message);\r\n    }\r\n\r\n    return invalidValues;\r\n}\r\n\r\n/******************************************************************************************\r\n *\r\n * This will check to see if there is an invalid screen entry, and if there is, it will\r\n * display an invalid message.\r\n *\r\n * @param {*} invalidValues the invalid array that contains what entries are invalid\r\n * @param {*} constant      the screen constant that represents the array index to check in\r\n *                          the invalid array.\r\n *\r\n ******************************************************************************************/\r\nexport const checkValidityScreen = (invalidValues, constant) => {\r\n    return (isInvalid(invalidValues[constant], -1) === true) ? <span className=\"sw-invalid_errMessage\">{invalidValues[constant].message}</span> : null\r\n}\r\n\r\n/******************************************************************************************\r\n *\r\n * This will check to see if there is an invalid table entry, and if there is, it will\r\n * display an invalid message.\r\n *\r\n * @param {*} invalidValues the invalid array that contains what entries are invalid\r\n * @param {*} constant      the table constant that represents the array index to check in\r\n *                          the invalid array.\r\n *\r\n ******************************************************************************************/\r\nexport const checkValidityTable = (invalidValues, constant, index) => {\r\n    return (isInvalid(invalidValues[constant], index) === true) ? <span className=\"sw-invalid_errMessage\">{getInvalidMessage(invalidValues[constant], index)}</span> : null\r\n}\r\n\r\n/***********************************************************************************************\r\n *\r\n * This will set the display value to false for an invalid input item.\r\n *\r\n * @param {*} invalidValues list of invalid inputs for the screen\r\n * @param {*} constant      indicates which of the input items is invalid (the index\r\n *                          into the array)\r\n *\r\n ***********************************************************************************************/\r\nexport const resetDisplayScreen = (invalidValues, constant) => {\r\n    invalidValues[constant].display = false;\r\n\r\n    return invalidValues;\r\n}\r\n\r\n/***********************************************************************************************\r\n *\r\n * This will set the display value to false for an invalid input item.\r\n *\r\n * @param {*} invalidValues list of invalid inputs for the screen\r\n * @param {*} constant      indicates which of the input items is invalid (the index\r\n *                          into the array)\r\n * @param {*} index         row number in the table from zero\r\n *\r\n ***********************************************************************************************/\r\nexport const resetDisplayTable = (invalidValues, constant, index) => {\r\n    let found = false;  // Indicates whether the invalid item already exists in the invalid values array\r\n    let pos = 0;        // Position where the item was found in the index array\r\n\r\n    // Spin through the array to find whether the item already exists in the\r\n    // index array for that input item\r\n    for (let i = 0; i < invalidValues[constant].index.length; i++) {\r\n        if (invalidValues[constant].index[i] === index) {\r\n            found = true;\r\n            pos = i;\r\n        }\r\n    }\r\n\r\n    if (found) {    // Item was found, so set the display to false\r\n        invalidValues[constant].display[pos] = false;\r\n    }\r\n\r\n    return invalidValues;\r\n\r\n}\r\n\r\n/*******************************************************************************************\r\n *\r\n * Indicates that the mouse was clicked on a input, Choice, ChoiceText, Radio, or textarea\r\n * HTML tag on the regular screen.  If the field was invalid and clicked on, it will remove\r\n * the error message from being displayed when the mouse is hovered over the HTML item.\r\n *\r\n * @param {*} constant  indicates which item the mouse was clicked on.  Set the contants\r\n *                      after the invalid array.\r\n *\r\n ******************************************************************************************/\r\nexport const wasClickedScreen = (invalidValues, constant, setInvalid) => {\r\n    let localInvalid = [...invalidValues];\r\n    localInvalid = resetDisplayScreen(localInvalid, constant);\r\n    setInvalid (localInvalid);\r\n}\r\n\r\n/*******************************************************************************************\r\n *\r\n * Indicates that the mouse was clicked on a input, Choice, ChoiceText, Radio, or textarea\r\n * HTML tag on a table.  If the field was invalid and clicked on, it will remove\r\n * the error message from being displayed when the mouse is hovered over the HTML item.\r\n *\r\n * @param {*} constant  indicates which item the mouse was clicked on.  Set the contants\r\n *                      after the invalid array.\r\n *\r\n ******************************************************************************************/\r\nexport const wasClickedTable = (invalidValues, constant, pos, setInvalid) => {\r\n    let localInvalid = [...invalidValues];\r\n    localInvalid = resetDisplayTable(localInvalid, constant, pos);\r\n    setInvalid (localInvalid);\r\n}\r\n\r\n\r\n/*********************************************************************************************\r\n *\r\n * Indicates whether the index matches one of the screen constants (constant indexes into the\r\n * invalidValues array) (true) or not (false).\r\n *\r\n * @param {*} index     an index into the invalidArray to see if it matches one of the\r\n *                      screen constants or not\r\n * @param {*} constants the array of screen contants to see if there is a match\r\n *\r\n *********************************************************************************************/\r\nexport const isConstant = (index, constants) => {\r\n    // Spin through the array of contants to see if the index matches one of them\r\n    for (let i = 0; i < constants.length; i++) {\r\n        if (constants[i] === index) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/***********************************************************************************************\r\n *\r\n * This will check to see if any of the validity values is true in the invalid values array.\r\n * If one of the values is true, this function returns false.  If all the values are false, it\r\n * returns true to indicate that there are not invalid values.  This is genearally called at\r\n * the end of the validation function.\r\n *\r\n * @param {*} invalidValues list of invalid inputs for the screen or table\r\n * @param {*} constants     list of screen constants\r\n *\r\n ***********************************************************************************************/\r\nexport const validCheckDual = (invalidValues, constants) => {\r\n    // Determine if any of the validation checks were invalid\r\n    for (let i = 0; i < invalidValues.length; i++) {\r\n        if (isConstant(i, constants) === true) {   // Checking screen edits\r\n            if (invalidValues[i].validity === true) {\r\n                return false;\r\n            }\r\n        } else {    // Checking table edits\r\n            for (let j = 0; j < invalidValues[i].validity.length; j++) {\r\n                if (invalidValues[i].validity[j] === true) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n/**********************************************************************************************\r\n *\r\n * This will check to see if any of the screen validity values is true in the invalid values\r\n * array.  If one of the values is true, this function returns false.  If all the values are\r\n * false, it returns true to indicate that there are not invalid values.  This is genearally\r\n * called at the end of the validation function.\r\n *\r\n * @param {*} invalidValues list of invalid inputs for the screen\r\n *\r\n **********************************************************************************************/\r\nexport const validCheckScreen = (invalidValues) => {\r\n    for (let i = 0; i < invalidValues.length; i++) {\r\n        if (invalidValues[i].validity === true) { // Checking screen edits\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n/**********************************************************************************************\r\n *\r\n * This will check to see if any of the table validity values is true in the invalid values\r\n * array.  If one of the values is true, this function returns false.  If all the values are\r\n * false, it returns true to indicate that there are not invalid values.  This is genearally\r\n * called at the end of the validation function.\r\n *\r\n * @param {*} invalidValues list of invalid inputs for the table\r\n *\r\n **********************************************************************************************/\r\nexport const validCheckTable = (invalidValues) => {\r\n    // Determine if any of the validation checks were invalid\r\n    for (let i = 0; i < invalidValues.length; i++) {\r\n        for (let j = 0; j < invalidValues[i].validity.length; j++) {\r\n            if (invalidValues[i].validity[j] === true) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n/***********************************************************************************************\r\n *\r\n * This will clear the invalid values array, and reset the array to its original settings.  It\r\n * will do this for the screen and table parts.\r\n *\r\n * @param {*} invalidValues list of invalid inputs for the screen and table\r\n * @param {*} screen        array holding the starting and ending indexes (contants) for the\r\n *                          screen part of the array\r\n * @param {*} table         array holding the starting and ending indexes (contants) for the\r\n *                          screen part of the array\r\n *\r\n ***********************************************************************************************/\r\nexport const clearInvalidDual = (invalidValues, screen, table) => {\r\n    // Clear the screen part of the array\r\n    for (let i = screen[0]; i <= screen[1]; i++) {\r\n        invalidValues[i].validity = false;  // Set the validity and display parts back to false\r\n        invalidValues[i].display = false;\r\n    }\r\n\r\n    // Cler the table part of the array, by setting them to empty arrays\r\n    for (let i = table[0]; i <= table[1]; i++) {\r\n        invalidValues[i].validity = [];\r\n        invalidValues[i].display = [];\r\n        invalidValues[i].index = [];\r\n        invalidValues[i].message = [];\r\n    }\r\n\r\n    return invalidValues;\r\n}\r\n\r\n/***********************************************************************************************\r\n *\r\n * This will clear the invalid values array, and reset the array to its original settings.  It\r\n * will do this for the screen.\r\n *\r\n * @param {*} invalidValues list of invalid inputs for the screen\r\n *\r\n ***********************************************************************************************/\r\nexport const clearInvalidScreen = (invalidValues) => {\r\n    // Clear the screen values\r\n    for (let i = 0; i < invalidValues.length; i++) {\r\n        invalidValues[i].validity = false;\r\n        invalidValues[i].display = false;\r\n    }\r\n\r\n    return invalidValues;\r\n}\r\n\r\n/***********************************************************************************************\r\n *\r\n * This will clear the invalid values array, and reset the array to its original settings.  It\r\n * will do this for the table.\r\n *\r\n * @param {*} invalidValues list of invalid inputs for the table\r\n *\r\n ***********************************************************************************************/\r\nexport const clearInvalidTable = (invalidValues) => {\r\n    // Clear the table entries, by setting to empty arrays\r\n    for (let i = 0; i < invalidValues.length; i++) {\r\n        invalidValues[i].validity = [];\r\n        invalidValues[i].display = [];\r\n        invalidValues[i].index = [];\r\n        invalidValues[i].message = [];\r\n    }\r\n\r\n    return invalidValues;\r\n}\r\n\r\n/***********************************************************************************************\r\n *\r\n * This will determine if the style should change to the background color to the invalid color\r\n * because the input table item has an invalid value.  This will return the style for the\r\n * component.\r\n *\r\n * @param {*} invalidValues list of invalid inputs\r\n * @param {*} constant      indicates which of the input items is invalid (the index\r\n *                          into the array)\r\n * @param {*} cssClassName  the name of a cssClassName that will be concatenated with either\r\n *                          sw-theme_normalBackground or sw-theme_errorBackground.\r\n *\r\n ***********************************************************************************************/\r\nexport const processInvalidStyleScreen = (invalidValues, constant, cssClassName = null, backCSSName = null) => {\r\n    // Set the background color based on whether the value is invalid or not\r\n    if (cssClassName === null) {\r\n        return (invalidValues[constant].validity === true) ?\r\n             \"sw-theme_errorBackground\" : (backCSSName === null) ? \"sw-theme_normalBackground\" : backCSSName;\r\n    } else {\r\n        return (invalidValues[constant].validity === true) ?\r\n             `${cssClassName} sw-theme_errorBackground` : (backCSSName === null) ? \r\n             `${cssClassName} sw-theme_normalBackground` :\r\n             `${cssClassName} ${backCSSName}`;\r\n    }\r\n}\r\n\r\n\r\n/***********************************************************************************************\r\n *\r\n * This will determine if the style should change to the background color to the invalid color\r\n * because the input table item has an invalid value.\r\n *\r\n * @param {*} invalidValues list of invalid inputs\r\n * @param {*} constant      indicates which of the input items is invalid (the index\r\n *                          into the array)\r\n * @param {*} cssClassName  the name of a cssClassName that will be concatenated with either\r\n *                          sw-theme_normalBackground or sw-theme_errorBackground.\r\n *\r\n ***********************************************************************************************/\r\nexport const processStyleScreen = (invalidValues, constant, cssClassName) => {\r\n    return (invalidValues[constant].validity === true) ?\r\n             `${cssClassName} sw-theme_errorBackground` : `${cssClassName} sw-theme_normalBackground`;\r\n}\r\n\r\n/***********************************************************************************************\r\n *\r\n * This function is used when there are both screen and table invalid entries.  This will clear\r\n * the invalid screen entries only.  It will not clear the table entries.\r\n *\r\n * @param {*} invalidValues list of invalid inputs for the screen\r\n * @param {*} constant      the constant for the last screen entry\r\n *\r\n ***********************************************************************************************/\r\nexport const clearInvalidScreenOnly = (invalidValues, constant) => {\r\n    // Clear the screen values\r\n    for (let i = 0; i <= constant; i++) {\r\n        invalidValues[i].validity = false;\r\n        invalidValues[i].display = false;\r\n    }\r\n\r\n    return invalidValues;\r\n}\r\n\r\n/***********************************************************************************************\r\n *\r\n * This will determine if the style should change to the background color to the invalid color\r\n * because the input table item has an invalid value.  This will return the style for the\r\n * component.\r\n *\r\n * @param {*} invalidValues list of invalid inputs for the table\r\n * @param {*} constant      indicates which of the input items is invalid (the index\r\n *                          into the array)\r\n * @param {*} pos           row number in the table\r\n * @param {*} cssClassName  the name of a cssClassName that will be concatenated with either\r\n *                          sw-theme_normalBackground or sw-theme_errorBackground.\r\n *\r\n ***********************************************************************************************/\r\nexport const processInvalidStyleTable = (invalidValues, constant, pos, cssClassName = null, backCSSName = null) => {\r\n    // Spin through the validity array for that item in the invalid values array\r\n    for (let j = 0; j < invalidValues[constant].validity.length; j++) {\r\n        if (pos === invalidValues[constant].index[j]) { // Check to see if it is the correct index\r\n            if (invalidValues[constant].validity[j] === true) { // and the entry is invalid\r\n                if (cssClassName === null) {\r\n                    return `sw-theme_errorBackground`;\r\n                } else {\r\n                    return `${cssClassName} sw-theme_errorBackground`;\r\n                }\r\n            } else {    // Entry is valid\r\n                if (cssClassName === null) {\r\n                    if (backCSSName === null) {\r\n                        return `sw-theme_normalBackground`;\r\n                    } else {\r\n                        return backCSSName;\r\n                    }\r\n                } else {\r\n                    if (backCSSName === null) {\r\n                        return `${cssClassName} sw-theme_normalBackground`;\r\n                    } else {\r\n                        return `${cssClassName} ${backCSSName}`;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (cssClassName === null) {\r\n        return `sw-theme_normalBackground`;\r\n    } else {\r\n        if (backCSSName === null) {\r\n            return `${cssClassName} sw-theme_normalBackground`;\r\n        } else {\r\n            return `${cssClassName} ${backCSSName}`;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/***********************************************************************************************\r\n *\r\n * This will determine if the style should change to the background color to the invalid color\r\n * because the input table item has an invalid value.\r\n *\r\n * @param {*} invalidValues list of invalid inputs for the table\r\n * @param {*} constant      indicates which of the input items is invalid (the index\r\n *                          into the array)\r\n * @param {*} pos           row number in the table\r\n * @param {*} cssClassName  the name of a cssClassName that will be concatenated with either\r\n *                          sw-theme_normalBackground or sw-theme_errorBackground.\r\n *\r\n ***********************************************************************************************/\r\nexport const processStyleTable = (invalidValues, constant, pos, cssClassName) => {\r\n    // Spin through the validity array for that item in the invalid values array\r\n    for (let j = 0; j < invalidValues[constant].validity.length; j++) {\r\n        if (pos === invalidValues[constant].index[j]) { // Check to see if it is the correct index\r\n            if (invalidValues[constant].validity[j] === true) { // and the entry is invalid\r\n                return `${cssClassName} sw-theme_errorBackground`;\r\n            }\r\n        }\r\n    }\r\n\r\n    return `${cssClassName} sw-theme_normalBackground`;\r\n}\r\n\r\n/*********************************************************************************************\r\n *\r\n * This will determine if the input item contains an invalid value and the message should be\r\n * displayed or not based on the validity and display values for that item in the invalid\r\n * value array.  This will work for screen or table entry.  If a screen entry, pos should\r\n * be -1.\r\n *\r\n * @param {*} invalid   a specific input item in the invalid value array (specific index)\r\n * @param {*} pos       row number in the table if looking up a table entry or -1 for a\r\n *                      screen entry\r\n *\r\n ***********************************************************************************************/\r\nexport const isInvalid = (invalid, pos) => {\r\n    if (pos === -1) {   // Screen entry\r\n        return (invalid.validity && invalid.display);\r\n    } else {    // Table entry\r\n        for (let i = 0; i < invalid.validity.length; i++) {\r\n            if (invalid.index[i] === pos) { // Find the entry for that row in the table\r\n                return invalid.validity[i] && invalid.display[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/**********************************************************************************************\r\n *\r\n * This will retrieve the message from the entry invalid value array for a table entry.\r\n *\r\n * @param {*} invalid   a specific input item in the invalid value array (specific index)\r\n * @param {*} pos       row number in the table if looking up a table entry or -1 for a\r\n *                      screen entry\r\n *\r\n **********************************************************************************************/\r\nexport const getInvalidMessage = (invalid, pos) => {\r\n    for (let i = 0; i < invalid.index.length; i++) {\r\n        if (invalid.index[i] === pos) { // Find the entry for that row in the table\r\n            return invalid.message[i];  // Return the message\r\n        }\r\n    }\r\n\r\n    return '';\r\n}\r\n", "import React, { useState, useEffect } from 'react';\n\nimport NavigateBar from './NavigateBar';\n// import { TS } from './time'\n\nlet setMenuPath = (newPath) => {}\nlet setMenuParms = (newParms) => {}\n\nlet menuParms = {}\nexport const getMenuParms = () => { return menuParms }\n\n// ----------------------------------------------------------------------------------\nexport const MenuBar = (props) => {\n\n    const [curPath, setCurPath]   = useState(props.path)\n    const [curParms, setCurParms] = useState({})\n    const [disableMenu, setDisableMenu] = useState(null)\n\n    setMenuPath = setCurPath\n    setMenuParms = (val) => {\n        menuParms = {...val}\n        setCurParms(val);\n    }\n\n    const getPaths = (row) => {\n        if (row.hasOwnProperty('submenu')) {\n            return row.submenu.map(getPaths).flat();\n        } else {\n            return { path: row.path, component: row.component }\n        }\n    }\n\n    let subSymbol = 'none';\n    if (props.hasOwnProperty('subsymbol')) {\n        subSymbol = props.subsymbol;\n    }\n\n    let symbol = 'none';\n    if (props.hasOwnProperty('symbol')) {\n        symbol = props.symbol;\n    }\n\n    let type = 'horizontal';\n    if (props.hasOwnProperty('type')) {\n        type = props.type;\n        if (type !== 'horizontal' && type !== 'vertical') {\n            type = 'horizontal';\n        }\n    }\n\n    let open = 'always';\n    if (props.hasOwnProperty('open')) {\n        open = props.open;\n        if (open !== 'always' && open !== 'slide' &&\n            open !== 'horizontal' && open !== 'vertical' &&\n            open !== 'both') {\n            open = 'always';\n        }\n    }\n\n    let noSide = false;\n    if (props.hasOwnProperty('noSide')) {\n        noSide = true;\n    } else if (type === 'horizontal') {\n        noSide = true;\n    }\n\n    const searchPath = curPath || props.path\n    const items = props.menuTree.map(mi => getPaths(mi)).flat()\n    const active = items.find(item => item.path === searchPath) || items[0]\n\n    const classStyle = (noSide === true) ? \"\" : \" menubar\";\n\n    const ActComp = active.component;\n\n    let componentClassName = (type === 'horizontal' || open === 'always') ? null : \"nav_menu_component\"\n\n    const signalUnsaved = (flag) => {     // null or true,   if true they have unsaved data\n      if (flag) {\n        // console.log('Active Menu Component signals they have unsaved data. ');\n        setDisableMenu(true)\n      } else {\n        // console.log('Active Menu Component clears signal. ');\n        setDisableMenu(null)\n      }\n    }\n\n    return (\n        <div className={\"sw-menu \" + classStyle}>\n            <NavigateBar\n                 menuTree={props.menuTree}\n                 symbol={symbol}\n                 subsymbol={subSymbol}\n                 type={type}\n                 open={open}\n                 page={(props.hasOwnProperty('page')) ? true : false}\n                 disabled={disableMenu} />\n            <div className={componentClassName}>\n                 <ActComp signalUnsaved={signalUnsaved} />\n            </div>\n        </div>\n    )\n}\n\n// ----------------------------------------------------------------------------------\nexport const Redirect = (props) => {\n\n  useEffect(() => {\n    setMenuParms(props.parms)\n    setMenuPath(props.to)\n  }, [props.to, props.parms])\n\n  return <></>\n}\n\n// ----------------------------------------------------------------------------------\nexport const Link = (props) => {\n\n  if (!props.to || props.to.length < 1)    // same as || props.to === \"\")\n     return <span className=\"nav-links\">{props.children}</span>\n\n  const click = (e) => {\n      e.preventDefault();\n      console.log(`You clicked ${props.to}`);\n      setMenuParms(props.parms)\n      setMenuPath(props.to)\n  }\n\n  const cname = props.className || \"\"\n\n  return <span className={'nav-links ' + cname} href={props.to} onClick={click}>{props.children}</span>\n}\n\n", "import React, { useState, useEffect } from 'react';\nimport { Link } from './MenuBar';\n\nlet dropDown = [];\n\nconst NavigateBar = (props) => {\n    const [click, setClick] = useState(false);\n    const [menuTree, setMenuTree] = useState([]);\n    const [render, setRender] = useState(false);\n\n    let count = 0;\n    let addition1 = '';\n    let addition2 = '';\n\n    const buildTree = (menuTree) => {\n        for (let i = 0; i < menuTree.length; i++) {\n            if (menuTree[i].hasOwnProperty('submenu')) {\n                menuTree[i]['index'] = count;\n                count++;\n                buildTree(menuTree[i].submenu);\n            }\n        }\n\n        return menuTree;\n    }\n\n    useEffect(() => {\n        let menu = props.menuTree;\n        count = menu.length;\n        setMenuTree(buildTree(menu));\n\n        for (let i = 0; i < count; i++) {\n            dropDown.push(false);\n        }\n    }, [props.menuTree]);\n\n    const handleClick = () => {\n        let value = true;\n        if (click === true) {\n            value = false;\n        }\n        setClick(value);\n    }\n\n    const handleClickDD = (index) => {\n        let value = true;\n        if (click === true) {\n            value = false;\n        }\n\n        for (let i = 0; i < dropDown.length; i++) {\n            dropDown[i] = false;\n        }\n\n        setClick(value);\n    }\n\n    const forceRender = () => {\n        if (render === false) {\n            setRender(true);\n        } else {\n            setRender(false);\n        }\n    }\n\n    const onMouseEnter = (event, index) => {\n        dropDown[index] = true;\n        forceRender();\n    };\n\n    const onMouseLeave = (index) => {\n        if (index === undefined) {\n            index = 0;\n        }\n\n        for (let i = index; i < dropDown.length; i++) {\n            dropDown[i] = false;\n        }\n\n        forceRender();\n        setClick(false);\n    };\n\n    const buildDropDowns = (row, index) => {\n        let name = null;\n        if (row.hasOwnProperty('title')) {\n            name = row.title.replace(' ', '_') + index;\n        }\n\n        let navItem = 'nav-item';\n        let navMargin = ' dropdown-menu2-horizontal';\n        if (props.type === 'vertical') {\n            navItem = 'nav-item-vertical';\n            navMargin = ' dropdown-menu2-vertical';\n        }\n\n        if (row.hasOwnProperty('submenu')) {\n            return (<li\n                            key={name}\n                            className={navItem}\n                            onMouseEnter={(event) => onMouseEnter(event, row.index)}\n                            onMouseLeave={(event) => onMouseLeave(row.index)}>\n                                <Link className='nav-links'>\n                                    {row.title + addition1}\n                                </Link>\n                                { (dropDown[row.index] === true) ?\n                                    <ul\n                                        onClick={() => handleClickDD(row.index)}\n                                        className={click ? 'dropdown-menu2 clicked' + navMargin : 'dropdown-menu2' + navMargin}>\n                                        {row.submenu.map(buildDropDowns)}\n                                    </ul> : <></> }\n                    </li> )\n        } else if (row.hasOwnProperty('title')) {\n            return (<li key={name}>\n                            <Link\n                                className=\"dropdown-link\"\n                                to={row.path}>\n                                {row.title}\n                            </Link>\n                    </li> )\n        }\n    }\n\n    const buildMainMenu = (menuTree) => {\n        return menuTree.map((row, index) => {\n            let name = '';\n            if (row.hasOwnProperty('title')) {\n                name = row.title.replace(' ', '_') + index;\n            }\n\n            let navItem = 'nav-item'\n            if (props.type === 'vertical') {\n                navItem = 'nav-item-vertical';\n            }\n\n            let dropDownType = '';\n            if (props.type === 'horizontal') {\n                dropDownType = ' dropdown-menu-horizontal';\n            } else if (props.type === 'vertical') {\n                dropDownType = ' dropdown-menu-vertical';\n            }\n\n            if (row.hasOwnProperty('submenu')) {\n                return ( <li\n                                key={name}\n                                className={navItem}\n                                onMouseEnter={(event) => onMouseEnter(event, index)}\n                                onMouseLeave={() => onMouseLeave(index)}>\n                                <Link className='nav-links'>\n                                    {row.title + addition2}\n                                </Link>\n                                { (dropDown[index] === true) ?\n                                    <ul\n                                        onClick={() => handleClick()}\n                                        className={click ? 'dropdown-menu clicked' + dropDownType : 'dropdown-menu' + dropDownType}>\n                                        {row.submenu.map(buildDropDowns)}\n                                    </ul> : <></>\n                                }\n                            </li> )\n            } else if (row.hasOwnProperty('title')) {\n                return (<li key={name}\n                            className={navItem}>\n                                <Link to={row.path} className='nav-links'>\n                                    {row.title}\n                                </Link>\n                        </li> )\n            }\n        })\n    }\n\n    if (props.symbol === 'arrow') {\n        addition1 = ' \\u2BC8';\n    } else if (props.symbol === 'dots') {\n        addition1 = ' \\u2026';\n    } else if (props.symbol !== 'none') {\n        addition1 = ' ' + props.symbol;\n    }\n\n    if (props.subsymbol === 'arrow') {\n        addition2 = ' \\u25BC';\n    } else if (props.subsymbol !== 'none') {\n        addition2 = ' ' + props.subsymbol;\n    }\n\n    let navType = '';\n    let open = '';\n    let menuIcon = null;\n    if (props.type === 'horizontal') {\n        navType = ' nav-menu-horizontal';\n        if (props.open === 'horizontal' || props.open === 'slide') {\n            open = 'navbar nav-horiz-open-horizontal';\n        } else if (props.open === 'always') {\n            open = 'navbar';\n        }\n    } else if (props.type === 'vertical') {\n        navType = ' nav-menu-vertical';\n        if (props.open === 'both') {\n            open = `nav-menu-vertical-pad navbar_vertical nav-open-both nav-vertical`;\n        } else if (props.open === 'horizontal' || props.open === 'slide') {\n            open = `nav-menu-vertical-pad navbar_vertical nav-open-horizontal nav-vertical`;\n        } else if (props.open === 'vertical') {\n            open = `nav-menu-vertical-pad navbar_vertical nav-vertical nav-open-vertical`;\n        } else if (props.open === 'always') {\n            open = `navbar_vertical nav-vertical nav_menu_vertical_pad_always`;\n        }\n    }\n\n    if (props.open !== 'always') {\n        menuIcon = <div className=\"nav-center\">&#x2630;</div>\n    }\n\n    const disabled = (props.disabled) ? true : null\n    return (\n        <nav className={'nav-nav-menu ' + open} disabled={disabled}>\n            {menuIcon}\n            <ul className={click ? 'nav-menu active' + navType : 'nav-menu' + navType}>\n                {buildMainMenu(menuTree)}\n            </ul>\n        </nav>\n    )\n}\n\nexport default NavigateBar;", "import React, { useState } from 'react';\nimport { Link } from './MenuBar';\n\nexport const Outline = (props) => {\n    const buttonClick = (path) => {\n        setCurPath(path);\n    }\n\n    const buildMainLink = (links) => {\n        let disabled = false;\n        let buttonClass = 'sw-outline-button';\n        if (props.hasOwnProperty('disabled')) {\n            disabled = props.disabled;\n            buttonClass = (disabled === true) ? 'sw-outline-button_disable' : 'sw-outline-button';\n        }\n\n        return links.map ((row, i) => {\n            let fontClass = 'sw-outline-font_plain';\n            if (row.hasOwnProperty('textStyle')) {\n                if (row.textStyle === 'bold') {\n                    fontClass = 'sw-outline-font_bold';\n                } else if (row.textStyle === 'italic') {\n                    fontClass = 'sw-outline-font_italic';\n                }\n            }\n\n            let indentClass = '';\n            if (row.hasOwnProperty('indent') && row.indent === true) {\n                indentClass = 'sw-outline-indent_normal';\n            }\n\n            if (row.hasOwnProperty('spacing')) {\n                let root = document.documentElement;\n                root.style.setProperty(`--sw-outline-indentation_amount`, row.spacing);\n                indentClass = 'sw-outline-indent_spacing';\n            }\n\n            if (row.hasOwnProperty('path')) {\n                if (row.hasOwnProperty('type') && row.type === 'new') {\n                    return  <li key={i} className={`${indentClass}`} >\n                                <div className={`${buttonClass} ${fontClass}`} >\n                                    <Link to={row.path}>{row.title}</Link>\n                                </div>\n                            </li>\n\n                } else {  // type defaults to side\n                    return  <li key={i} className={`${indentClass}`}>\n                                <button className={`${fontClass} ${buttonClass}`} disabled={disabled} onClick={() => buttonClick(row.path)}>{row.title}</button>\n                            </li>\n                }\n            } else {\n                return  <li key={i} className={`sw-outline-item ${fontClass} ${indentClass}`}>{row.title}</li>\n            }\n        })\n    }\n\n    const getPaths = (row) => {\n        if (row.hasOwnProperty('path')) {\n            return { title: row.title, path: row.path, component: row.component }\n        }\n    }\n\n\n    const [curPath, setCurPath] = useState('');\n\n    const items = props.links.filter(getPaths);\n\n    // default to first if no path has been selected (first time in)\n    const active = items.find(item => item.path === curPath) || items[0]\n\n    return (\n        <div className=\"sw-outline-flex\">\n            <div className=\"sw-outline-margin\">\n                <ul className=\"sw-outline-list\">\n                    {buildMainLink(props.links)}\n                </ul>\n            </div>\n            <div className=\"sw-outline-selected_item\">\n                { active.component() }\n            </div>\n        </div>\n    )\n}\n", "import React from 'react';\n\n  /*\n    9737   Sun\n    183     &middot;\n    \u26AA\t9898\t26AA\t \tMEDIUM WHITE CIRCLE\n    \u26AB\t9899\t26AB\t \tMEDIUM BLACK CIRCLE\n\n    U+26AA\t\u26AA\te2 9a aa\tMEDIUM WHITE CIRCLE\n    U+26AB\t\u26AB\te2 9a ab\tMEDIUM BLACK CIRCLE\n    U+1F534\t\uD83D\uDD34\tf0 9f 94 b4\tLARGE RED CIRCLE\n    U+1F535\t\uD83D\uDD35\tf0 9f 94 b5\tLARGE BLUE CIRCLE\n  */\n \nconst checked = String.fromCharCode(9899) \nconst unchecked = String.fromCharCode(9898) \n\nconst Frag = React.Fragment\n\nconst Radio = props => {\n  const handle = (e) => {\n    if (typeof e.preventDefault === 'function')\n        e.preventDefault();\n    e.target.name = props.name;\n    e.target.value = props.selectedValue;\n    props.onChange(e);\n  }\n   \n  const {selectedValue, text, children, className, ...rest} = props\n\n  const isChecked = props.value === selectedValue;\n  const symbol = (isChecked) ? checked : unchecked;\n\n  return <Frag>\n           <button type=\"button\" onClick={handle} className={\"sw-radio_defaultStyle \" + className} {...rest}>\n             {symbol}\n             {text}\n             {children}\n           </button>\n         </Frag>;\n}\n\n// 2018-10-10 {text} {children} moved to inside button clickable area\n\nexport default Radio;\n", "/*****************************************************************************\n *\n *  This will sequential search a table until the key is found and return \n *  the number the table entry associated with this key.\n *\n *  @param table  the table or array to be searched\n *  @param key    the key to search for in the table\n *  @param field  the field in the table to search\n *\n *  @return returns the entry in the table associated with the key.  If the\n *          key is not found null is returned.\n *\n ****************************************************************************/\nexport const search = (table, key, field) => {\n    // Spin through the table until the key is found\n    for (let i = 0; i < table.length; i++) {\n        if (table[i][field] === key) {  // Key is found in the table\n            return table[i];\n        }\n    }\n\n    return null; // Key was not found\n}\n\n/*****************************************************************************\n *\n *  This will binary search a table until the key is found and returns the \n *  table entry associated with this key.\n *\n *  @param table  the table or array to be searched\n *  @param key    the key to search for in the table\n *  @param field  the field in the table to search\n *\n *  @return returns the entry in the table associated with the key or null if\n *          the key is not found.\n *\n ****************************************************************************/\nexport const binSearch = (table, key, field) => {\n    let top = 0;                // Index to the top of the table\n    let bottom = table.length;  // Index to the bottom of the table\n    let middle = 0;             // Index to the calculated middle of the table\n    let found = false;          // Indicates the key was found\n    let neverFound = false;     // Indicates the key will never be found\n\n    // Loop until the key is found or it never can be found\n    while (found === false && neverFound === false) {\n        middle = parseInt ((top + bottom) / 2);\n\n        if (top >= bottom) {\n            neverFound = true;\n        } else if (table[middle][field] === key) {\n            found = true;\n        } else if (table[middle][field] > key) {\n            bottom = middle - 1;\n        } else if (table[middle][field] < key) {\n            top = middle + 1;\n        }\n    }\n\n    if (found) {    // Key was found\n        return table[middle];\n    } else {    // Key was not found\n        return null;\n    }\n}\n\n", "/* eslint-disable react-hooks/exhaustive-deps */\r\n/* eslint react/prop-types: 0 */\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { css } from \"@emotion/react\";\r\nimport FadeLoader from \"react-spinners/FadeLoader\";\r\nimport pdfMake from \"pdfmake/build/pdfmake\";\r\nimport pdfFonts from \"pdfmake/build/vfs_fonts\";\r\nimport { CSVLink } from 'react-csv';\r\n\r\nimport CheckBox from './CheckBox.js';\r\nimport { Choice } from './List.js';\r\nimport ChoiceText from './ChoiceText.js';\r\nimport { isInvalid, setInvalidScreen, generateInvalid,\r\n         processInvalidStyleScreen, wasClickedScreen} from './Invalid.js'\r\nimport AlertModal from './AlertModal.js';\r\nimport { generateCSSButton } from './Theme.js';\r\nimport { currentDate, convertDate } from './DateFunct.js';\r\nimport { formatMoney } from './Common.js'\r\n\r\n\r\nimport funnel from './funnel-filter-svgrepo-com.svg';\r\nimport { data } from 'autoprefixer';\r\n//import { data } from 'autoprefixer';\r\n\r\npdfMake.vfs = pdfFonts.pdfMake.vfs;\r\n\r\nconst upper = [...'ABCDEFGHIJKLMNOPQRSTUVWXYZ'];\r\nconst lower = [...'abcdefghijklmnopqrstuvwxyz'];\r\nconst digit = [...'0123456789'];\r\n\r\n// ----------------------------------------------------------------------------\r\nconst hasProperty = (obj, propName) => {\r\n    return !!Object.getOwnPropertyDescriptor(obj, propName);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\nfunction range(start, end) {\r\n    if (end == -1 || end < start) {\r\n      return []\r\n    }\r\n    return Array(end - start + 1).fill().map((_, idx) => start + idx)\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\nconst genHdr = (name) => {\r\n    const header = name.replace(/_/g, ' ')\r\n\r\n    return {header, name, search: true, sort: true, dropDown: false, pdfCol: 'left' }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\nconst defaultColHeaders = (rowZero) => {\r\n\r\n    if (!rowZero)\r\n       return null\r\n\r\n    return Object.keys(rowZero).map( col => genHdr(col) )\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\nconst defaultEachRowInTable = (row, i) => {\r\n    const cols = (!row) ? null : Object.keys(row).map( (idx, j) => ( <td key={i + '_' + j}>{row[idx]}</td> ) )\r\n    const odd = (i % 2) ? 'sw-sst_oddRow' : 'sw-sst_evenRow'\r\n\r\n    return (<tr className={odd} key={i}>{cols}</tr>)\r\n}\r\n\r\n/****************************************************************************\r\n *\r\n * This will allow the user to add a filter / search bar to a table in case\r\n * not all the data is displayed at once.  It will also allow a column to be\r\n * sorted by clicking on it.\r\n *\r\n * @param   propsPassed the props passed in form the calling component\r\n *\r\n ****************************************************************************/\r\nconst SearchSortTable = (propsPassed) => {\r\n\r\n    const defaultProps = {                           // Default props if non are given\r\n      error: false,                                  // Indicates that an error has occrred\r\n      MAX_ITEMS: 100,                                // Maximum items on a page\r\n      eachRowInTable: defaultEachRowInTable,         // The default each row in table function\r\n      table: defaultColHeaders(propsPassed.data[0])        // No table def passed in as a prop, setup a default\r\n    }\r\n\r\n    const props = Object.assign(defaultProps, propsPassed);\r\n\r\n    if (!props.data || !Array.isArray(props.data)) {\r\n      console.error('Search Sort Table component: props.data is missing/null or not an Array:', props.data);\r\n      return <><hr /></>\r\n    }\r\n\r\n    if (hasProperty(props,'data') === false) {\r\n      console.error('Search Sort Table component: A data prop must be passed');\r\n      return (<span></span>);\r\n    }\r\n\r\n    if (hasProperty(props,'table') === false) {\r\n        console.error('Search Sort Table component: A table object prop must be passed');\r\n        return (<span></span>);\r\n    }\r\n\r\n    if (hasProperty(props,'letters') === true) {\r\n      if (hasProperty(props,'noupper') === true &&\r\n          hasProperty(props,'nolower') === true &&\r\n          hasProperty(props,'nodigit') === true) {\r\n            console.error('Search Sort Table component: If using letters prop, can not have all three: noupper, nolower, and nodigit');\r\n            return (<span></span>);\r\n        }\r\n    } else {\r\n    if (hasProperty(props,'noupper') === true ||\r\n        hasProperty(props,'nolower') === true ||\r\n        hasProperty(props,'nodigit') === true) {\r\n          console.error('Search Sort Table component: Can not have noupper, nolower, or nodigit props without the letters prop');\r\n          return (<span></span>);\r\n        }\r\n    }\r\n\r\n    return <_InnerSearchSortTable {...props} />\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\nconst _InnerSearchSortTable = (props) => {\r\n\r\n    const invalidArray = generateInvalid(5, 0);  // Used to tell whether the user entered and invalid value or not\r\n\r\n    const FILTER = 0;\r\n    const SRCHITEM = 1;\r\n    const SRCHHDR = 2;\r\n    const PDFORIENT = 3;\r\n    const AGGREGATE = 4;\r\n\r\n    const numCols = (props.table) ? props.table.length : 10     // Number of columns displayed\r\n    let colAry = Array(numCols);\r\n    const initialFilters = Array(numCols).fill('');             // React doesn't like <input value={null}\r\n    const initialSortOrder = Array(numCols).fill('N');          // Initial sort order, which is neither\r\n\r\n    const initialBackground = Array(63).fill({backgroundColor: getComputedStyle(document.documentElement)\r\n                    .getPropertyValue('--sw-theme_backgroundColor')});\r\n\r\n    let startIndexes = (props.data.length > 0) ? range(0, props.data.length-1) : [];    // Initial set of indexes\r\n\r\n    let initFooters = new Array(numCols);    // Allocate the footer array\r\n\r\n    for (let i = 0; i < initFooters.length; i++) {  // Blank out the footers\r\n        initFooters[i] = [];\r\n    }\r\n\r\n    const pdfOrientValues = ['', 'Portrait', 'Landscape'];  // How the page is oriented for the PDF\r\n\r\n    // Set the state variables\r\n    const [start, setStart] = useState(0);                              // The start of the pagination\r\n    const [end, setEnd] = useState((hasProperty(props,'showall') === true) ? props.data.length : parseInt(props.MAX_ITEMS));    // The end of the pagination\r\n    const [searchItem, setSearchItem] = useState('');                   // The item to search for\r\n    const [searchHeader, setSearchHeader] = useState('');               // The column to search\r\n    const [searchHeaderValues, setSearchHeaderValues] = useState([searchHeader]); // The value of each header in the table -- intialize array to include default value\r\n    const [sortOrder, setSortOrder] = useState(initialSortOrder);       // Indicates the sort: (N) none, (A) ascending,  or (D) descending (D)\r\n    const [topDisabled, setTopDisabled] = useState(true);               // Indicates whether the top button is disabled or not\r\n    const [previousDisabled, setPreviousDisabled] = useState(true);     // Indicates whether the previous button is disabled or not\r\n    const [nextDisabled, setNextDisabled] = useState(false);            // Indicates whether the next button is disabled or not\r\n    const [bottomDisabled, setBottomDisabled] = useState(false);        // Indicates whether the bottom button is disabled or not\r\n    const [rowValues, setRowValues] = useState([]);                     // Indicates how many rows in the table should be displayed\r\n    const [maxItems, setMaxItems] = useState((hasProperty(props,'showall') === true) ? props.data.length : parseInt(props.MAX_ITEMS));   // Maximum number of rows to display in the table\r\n    const [maximum, setMaximum] = useState((hasProperty(props,'showall') === true) ? props.data.length : parseInt(props.MAX_ITEMS));     // Maximum number of rows selected by the user to display in the table\r\n    const [filter, setFilter] = useState(initialFilters);               // The values for each column to be filtered\r\n    const [filterOn, setFilterOn] = useState('');                       // Indicates whether the user has checked the Filter On check box or not\r\n    const [filterPressed, setFilterPressed] = useState(false);          // Indicates whether the filtering is enabled or disabled (Filter button)\r\n    const [invalid, setInvalid] = useState(invalidArray);               // Indicates which fields are invalid and which ones are not\r\n    const [alertMessage, setAlertMessage] = useState('');               // The message for the alert modal\r\n    const [showAlert, setShowAlert] = useState(false);                  // Indicates whether the alert modal should be displayed or not\r\n    const [indexes, setIndexes] = useState([...startIndexes]);          // Indicates the order in which the data should be displayed (the data remains in the original order)\r\n    const [copyIndex, setCopyIndex] = useState([...startIndexes]);      // This is a copy of the index in order to put it back into its original order\r\n    const [length, setLength] = useState(props.data.length);            // The length of the data\r\n    const [background, setBackground] = useState(initialBackground);    // Background color for the letters prop\r\n    const [table, setTable] = useState(props.table);                    // Contains information about how to display the table\r\n    const [columns, setColumns] = useState(colAry);                     // Column values for the drop down in each filter item\r\n    const [htmlDropDown, setHtmlDropDown] = useState(false);            // Contains the dropdown for each column in the table\r\n    const [dropDownIndex, setDropDownIndex] = useState(-1);             // Indicates in which column the dropdown will appear\r\n    const [controlBreakInfo, setControlBreakInfo] = useState([]);       // Contains which columns in the table are hidden and have control breaks\r\n    const [controlBreakData, setControlBreakData] = useState([]);       // The title, data, and footer for each control break\r\n    const [startPos, setStartPos] = useState([]);                       // Where each control break starts in the indexes\r\n    const [functSelect, setFunctSelect] = useState('');                 // Indicates which aggregate function has been selected\r\n    const [footers, setFooters] = useState(initFooters);                // The aggregate footers placed at the end of each column in the table\r\n    const [pdfOrientation, setPdfOrientation] = useState('');           // Indicates whether Portrait or Landscape is to selected for the page orientation of the PDF\r\n    const [excelData, setExcelData] = useState([]);                     // Contains the data to be placed in the excel spreadsheet\r\n    const [showExcel, setShowExcel] = useState(false);                  // Indicates whether the Excel Display button can be displayed or not\r\n    const [hideCols, setHideCols] = useState([]);                         // Indicates which columns are hide and which are displayed\r\n\r\n    // TODO: Ask Jim  hideCols is never used\r\n\r\n    // const [indexSet, setIndexSet] = useState([[...startIndexes]]);\r\n    // const [origIndexes, setOrigIndexes] = useState([...startIndexes]);\r\n    const origIndexes = [...startIndexes];  // The original set of indexes that is used when the sort order is neither or control breaks are removed\r\n\r\n    /*************************************************************************************************************\r\n     *\r\n     * This will set up controlBreakInfo array, which contains whether the column in the table is hidden or is a\r\n     * control break\r\n     *\r\n     **************************************************************************************************************/\r\n    function populateDropDown (table) {\r\n        let ctrlBreakAry = [];  // The control break info array\r\n        for (let i = 0; i < table.length; i++) {\r\n            ctrlBreakAry.push ({hidden: false, ctrlBreak: 0 });\r\n        }\r\n\r\n        setControlBreakInfo(ctrlBreakAry);\r\n    }\r\n\r\n    let localCols = new Array(numCols);  // The value of each column in the table for the filter process\r\n\r\n    /*****************************************************************************************************************\r\n     *\r\n     * This will do a sequential search on an array.\r\n     *\r\n     * @param table the table to be searched\r\n     * @param key   the key to search for in the table\r\n     *\r\n     ******************************************************************************************************************/\r\n    function search(table, key) {\r\n        for (let i = 0; i < table.length; i++) {\r\n            if (table[i] === key) { // Key has been found in the table\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;   // Key was not found\r\n    }\r\n\r\n    /******************************************************************************************************************\r\n     *\r\n     * This builds the values for the choice boxes for each column in the filtering process.  It will place each value\r\n     * for that column in the choice box, with duplicates being removed.  The values will then be sorted.\r\n     *\r\n     * @param row   a row in the table or default table\r\n     * @param i     current index into the table or default table\r\n     *\r\n     ********************************************************************************************************************/\r\n    function buildChoices (row, i) {\r\n        let data = props.data;  // The data to be searched\r\n        let values = [];        // The values to place in the choice boxes\r\n\r\n        // Spin through the data and place the data for that column in the values array, removing duplicates\r\n        for (let j = 0; j < data.length; j++) {\r\n            if (search (values, data[j][row.name]) === false) {\r\n                values.push(data[j][row.name]);\r\n            }\r\n        }\r\n\r\n        // Sort the values array to place all the values in the choice box in ascending order\r\n        values.sort(function (item1, item2) {\r\n            // Convert to upper case if ignoring case\r\n            if (typeof item1 === 'string' &&\r\n                hasProperty(props,'ignorecase') === true) {\r\n                // item1.data = (item1.data !== null) ? item1.data.toUpperCase() : null;\r\n                item1 = item1.toUpperCase()\r\n                item2 = (item2 !== null) ? item2.toUpperCase() : null;\r\n            }\r\n\r\n            // Make the comparison\r\n            if (item1 < item2) {\r\n                return -1;\r\n            } else if (item1 > item2) {\r\n                return 1;\r\n            } else {\r\n                return 0;   // Equal\r\n            }\r\n        });\r\n\r\n        localCols[i] = values;  // Place each choice box value in the localCols array\r\n    }\r\n\r\n    /******************************************************************************\r\n     *\r\n     * Called to populate the header drop down\r\n     *\r\n     ******************************************************************************/\r\n\r\n    // ---------\r\n    useEffect (() => {\r\n//      console.log('SearchSortTable useEffect [] ');\r\n      populateDropDown(props.table);\r\n      populateSearch(props.table)\r\n      props.table.map(buildChoices);\r\n      setColumns(localCols);\r\n    }, []);\r\n\r\n    // ---------\r\n    useEffect (() => {\r\n//      console.log('SearchSortTable useEffect [] props.table:', props.table);\r\n\r\n      setTable(props.table);\r\n      populateSearch(props.table);\r\n      props.table.map(buildChoices);\r\n      setColumns(localCols);\r\n    }, [props.table]);\r\n\r\n    // ---------\r\n    useEffect (() => {\r\n//       console.log('SearchSortTable useEffect [props.data]', props.data, ' props.table:', props.table, 'table:', table);\r\n\r\n      if (!props.table && !table) {        // No table def passed in as a prop, setup a default\r\n        let tableDef = defaultColHeaders(props.data[0])\r\n        setTable(tableDef)\r\n        populateSearch(tableDef)\r\n        tableDef.map(buildChoices);\r\n        setColumns(localCols);\r\n    }\r\n      if (indexes.length === 0) {   // There are no indexes\r\n            sendIndexes(0, origIndexes.length, origIndexes.length, origIndexes);\r\n            setFilterOn(false);\r\n            setStartEnd(0, origIndexes.length, origIndexes);\r\n            setIndexes(origIndexes);\r\n            setCopyIndex(origIndexes);\r\n            setLength(origIndexes.length);\r\n            setDisable(0, origIndexes.length);\r\n        } else {    // There are indexes\r\n            setDisable(start, length);\r\n            sendIndexes(start, end, length, indexes);\r\n        }\r\n    }, [props.data]);\r\n\r\n    // ---------\r\n    useEffect (() => {\r\n//        console.log('SearchSortTable useEffect [props.data.length] ');\r\n\r\n        setFilterOn(false);\r\n        setStartEnd(0, origIndexes.length, origIndexes);\r\n        setIndexes(origIndexes);\r\n        setCopyIndex(origIndexes);\r\n        setLength(origIndexes.length);\r\n        sendIndexes(0, origIndexes.length, origIndexes.length, origIndexes);\r\n        setDisable(0, origIndexes.length);\r\n    }, [props.data.length])\r\n\r\n\r\n/*\r\n    console.log('props.data.length :', props.data.length);\r\n    console.log ('start', start);\r\n    console.log ('end', end);\r\n    console.log ('length', length);\r\n    console.log ('indexes', indexes);\r\n    console.log ('maxItems', maxItems);\r\n    console.log ('maximum', maximum);\r\n    console.log ('origIndexes', origIndexes);\r\n    console.log ('startIndexes :', startIndexes);\r\n*/\r\n\r\n\r\n    let number = 0;\r\n    if (hasProperty(props, 'number') === true) {\r\n        number = props.number;\r\n    }\r\n\r\n    let mathDecimal = 2;\r\n    if (hasProperty(props, 'mathDecimal') === true) {\r\n        mathDecimal = parseInt(props.mathDecimal);\r\n    }\r\n\r\n    let mathIgnoreCase = false;\r\n    if (hasProperty(props, 'mathIgnoreCase') === true) {\r\n        mathIgnoreCase = props.mathIgnoreCase;\r\n    }\r\n\r\n    /****************************************************************************\r\n     *\r\n     * This will populate the header drop down and place a blank at the\r\n     * beginning.\r\n     *\r\n     * @param table the table props to populate the search drop down\r\n     *\r\n     ****************************************************************************/\r\n    function populateSearch(table) {\r\n        let localFilter = [...filter];   // The values in the filter input boxes\r\n        let search = [''];      // The values for the drop down\r\n\r\n        if (!table) {\r\n           return\r\n        }\r\n\r\n        // Build the items for the drop down, the sort order, and the filter\r\n        for (let i = 0; i < table.length; i++) {\r\n            if (table[i].search === true) {\r\n                search.push (table[i].header);\r\n            }\r\n            if (hasProperty(props,'nofilter') === true) {\r\n                localFilter[i] = '';\r\n            }\r\n        }\r\n\r\n        setSearchHeaderValues(search);\r\n\r\n        setFilter(localFilter);\r\n\r\n        // Build the values for the row drop down on the bottom right of the screen.\r\n        let values = [];\r\n        for (let count = props.MAX_ITEMS; count <= 100; count += 5) {\r\n            values.push(count);\r\n        }\r\n\r\n        values.push ('All');\r\n        setRowValues (values);\r\n    }\r\n\r\n\r\n\r\n    /**************************************************************************************************\r\n     *\r\n     * Render the screen.\r\n     *\r\n     **************************************************************************************************/\r\n    let tableDivStyle = '';\r\n    if (hasProperty(props,'scroll') === true) {\r\n        tableDivStyle = 'sw-sst_scrollStyle';\r\n    }\r\n\r\n    let heightWidthStyle = {};\r\n    if (hasProperty(props, 'height') === true && hasProperty(props, 'width') === false) {\r\n        heightWidthStyle = { height: props.height };\r\n    } else if (hasProperty(props, 'height') === false && hasProperty(props, 'width') === true) {\r\n        heightWidthStyle = { width: props.width };\r\n    } else if (hasProperty(props, 'height') === true && hasProperty(props, 'width') === true) {\r\n        heightWidthStyle = { height: props.height, width: props.width };\r\n    }\r\n\r\n    let filterBackground = null;\r\n    if (filterOn !== 'Y') {\r\n        filterBackground = 'sw-sst_imageStyleDisable';\r\n    } else if (filterPressed === true) {\r\n        filterBackground = 'sw-sst_imageStyleFilter';\r\n    } else {\r\n        filterBackground = 'sw-sst_imageStyleNormal';\r\n    }\r\n\r\n    let headerStyle = 'sw-sst_headerStyle';\r\n    if (hasProperty(props, 'noheaderborder') === true) {\r\n        headerStyle = 'sw-sst_headerStyle2';\r\n    }\r\n\r\n    let footerStyle = 'sw-sst_footerStyle';\r\n    if (hasProperty(props, 'nofooterborder') === true) {\r\n        footerStyle = 'sw-sst_footerStyle2';\r\n    }\r\n\r\n    const genButtonStyle         = generateCSSButton('sw-sst_buttonStyle', props.error, false, false, 'sw-sst_normalButtonBackground', 'sw-sst_grayButtonBackground');\r\n    const genTopButtonStyle      = generateCSSButton('sw-sst_noButtonStyle', props.error, topDisabled, true, 'sw-sst_normalButtonBackground', 'sw-sst_grayButtonBackground');\r\n    const genPreviousButtonStyle = generateCSSButton('sw-sst_noButtonStyle', props.error, previousDisabled, true, 'sw-sst_normalButtonBackground', 'sw-sst_grayButtonBackground');\r\n    const genNextButtonStyle     = generateCSSButton('sw-sst_noButtonStyle', props.error, nextDisabled, true, 'sw-sst_normalButtonBackground', 'sw-sst_grayButtonBackground');\r\n    const genBottomButtonStyle   = generateCSSButton('sw-sst_noButtonStyle', props.error, bottomDisabled, true, 'sw-sst_normalButtonBackground', 'sw-sst_grayButtonBackground');\r\n    const genFilterStyle         = generateCSSButton(filterBackground,  props.error, filterOn !== 'Y', true, 'sw-sst_normalButtonBackground', 'sw-sst_grayButtonBackground');\r\n\r\n    const topSymbol = '|\\u2BC7';        // Bar and left triangle\r\n    const previousSymbol = '\\u2BC7';    // Left triangle\r\n    const nextSymbol = '\\u2BC8';        // Right triangle\r\n    const bottomSymbol = '\\u2BC8|';     // Right triangle and bar\r\n\r\n    // Populate the table with the next set of data to populate\r\n\r\n    let showData = [];\r\n    if (props.data !== undefined && props.data !== null && indexes.length !== 0) {\r\n        for (let i = start; i < end && i < props.data.length; i++) {\r\n            showData.push (props.data[indexes[i]]);\r\n        }\r\n    }\r\n\r\n//    console.log('showData :', showData);\r\n\r\n    let letterDigit = [];   // The letters and digits to be displayed at the top of the table\r\n    let letters = null;     // The HTML to display the letters on the screen\r\n    if (hasProperty(props,'letters') === true) {\r\n        if (hasProperty(props,'noupper') === true) {\r\n            if (hasProperty(props,'nolower') === true) {\r\n                letterDigit = [...digit];\r\n            } else {    // Lower\r\n                if (hasProperty(props,'nodigit') === true) {\r\n                    letterDigit = [...lower];\r\n                } else {    // Digit\r\n                    letterDigit = [...lower, ...digit];\r\n                }\r\n            }\r\n        } else {    // Upper\r\n            if (hasProperty(props,'nolower') === true) {\r\n                if (hasProperty(props,'nodigit') === true) {\r\n                    letterDigit = [...upper];\r\n                } else {    // Digit\r\n                    letterDigit = [...upper, ...digit];\r\n                }\r\n            } else {    // Lower\r\n                if (hasProperty(props,'nodigit') === true) {\r\n                    letterDigit = [...upper, ...lower];\r\n                } else {    // Digit\r\n                    letterDigit = [...upper, ...lower, ...digit];\r\n                }\r\n            }\r\n        }\r\n\r\n        letterDigit.push('^');\r\n        letters = <span key=\"letters\"><br />{letterDigit.map(alphabet)}<br /><br /></span>\r\n    }\r\n\r\n    let topButtonHTML = <span></span>;\r\n    if (hasProperty(props,'notop') === false && hasProperty(props,'showall') === false) {\r\n        topButtonHTML = <button name=\"top\" className={genTopButtonStyle} onClick={() => topButton()} disabled={props.error || topDisabled}>{topSymbol}</button>;\r\n    }\r\n\r\n    let previousButtonHTML = <span></span>;\r\n    if (hasProperty(props,'noprevious') === false && hasProperty(props,'showall') === false) {\r\n        previousButtonHTML = <button name=\"previous\" className={genPreviousButtonStyle} onClick={() => previousButton()} disabled={props.error || previousDisabled}>{previousSymbol}</button>;\r\n    }\r\n\r\n    let nextButtonHTML = <span></span>;\r\n    if (hasProperty(props,'nonext') === false && hasProperty(props,'showall') === false) {\r\n        nextButtonHTML = <button name=\"next\" className={genNextButtonStyle} onClick={() => nextButton()} disabled={props.error || nextDisabled}>{nextSymbol}</button>;\r\n    }\r\n\r\n    let bottomButtonHTML = <span></span>;\r\n    if (hasProperty(props,'nobottom') === false && hasProperty(props,'showall') === false) {\r\n        bottomButtonHTML = <button name=\"bottom\" className={genBottomButtonStyle} onClick={() => bottomButton()} disabled={props.error || bottomDisabled}>{bottomSymbol}</button>;\r\n    }\r\n\r\n    let allButtonHTML = <span></span>;\r\n    if (hasProperty(props,'showall') === true) {\r\n        allButtonHTML = <button name=\"all\" className={genBottomButtonStyle} onClick={() => allButton()} disabled={props.error}>All</button>;\r\n    }\r\n\r\n    let title = null;\r\n    if (hasProperty(props,'title') === true) {\r\n        if (hasProperty(props,'titleSize') === true) {\r\n            if (props.titleSize === '1') {\r\n                title = <h1 className=\"sw-sst_titleStyle\">{props.title}</h1>\r\n            } else if (props.titleSize === '2') {\r\n                title = <h2 className=\"sw-sst_titleStyle\">{props.title}</h2>\r\n            } else if (props.titleSize === '3'){\r\n                title = <h3 className=\"sw-sst_titleStyle\">{props.title}</h3>\r\n            } else if (props.titleSize === '4') {\r\n                title = <h4 className=\"sw-sst_titleStyle\">{props.title}</h4>\r\n            } else if (props.titleSize === '5') {\r\n                title = <h5 className=\"sw-sst_titleStyle\">{props.title}</h5>\r\n            } else if (props.titleSize === '6') {\r\n                title = <h6 className=\"sw-sst_titleStyle\">{props.title}</h6>\r\n            }\r\n        } else {\r\n            title = <h3 className=\"sw-sst_titleStyle\">{props.title}</h3>\r\n        }\r\n    }\r\n\r\n    const filterSection = (hasProperty(props,'nofilter') === true) ? null :\r\n        (<>\r\n            <CheckBox selectedValue=\"Y\" name=\"filterOn\" text=\"&nbsp;&nbsp;&nbsp;Filter On\" value={filterOn} onChange={(event) => processFilterOn(event.target.value)} />\r\n            <button onClick={filterButton} className=\"sw-sst_buttonStyle2\" disabled={props.error || filterOn !== 'Y'}>\r\n                <img src={funnel} width=\"30px\" height=\"30px\" className={genFilterStyle} />\r\n            </button>\r\n        </>)\r\n\r\n    const searchStyle = processInvalidStyleScreen(invalid, SRCHHDR, 'sw-sst_searchStyle');\r\n\r\n    const itemStyle = processInvalidStyleScreen(invalid, SRCHITEM);\r\n\r\n    const searchSection = (hasProperty(props,'nosearch') === true) ? null :\r\n        (<>\r\n            <span className=\"sw-invalid_checkForError\">\r\n                <Choice choices={searchHeaderValues}  name=\"searchHeader\" value={searchHeader} onChange={(event) => setSearchHeader(event.target.value)} onClick={() => wasClickedScreen(invalid, SRCHHDR, setInvalid)} className={searchStyle} disabled={props.error} />\r\n                {(isInvalid(invalid[SRCHHDR], -1) === true) ? <span className=\"sw-invalid_errMessage\">{invalid[SRCHHDR].message}</span> : null }\r\n            </span>\r\n            <span className=\"sw-invalid_checkForError\">\r\n                <input type=\"text\" name=\"searchItem\" value={searchItem} onChange={(event) => setupSearch(event.target.value)} onClick={() => wasClickedScreen(invalid, SRCHITEM, setInvalid)} className={itemStyle} disabled={props.error} />\r\n                {(isInvalid(invalid[SRCHITEM], -1) === true) ? <span className=\"sw-invalid_errMessage\">{invalid[SRCHITEM].message}</span> : null }\r\n            </span>\r\n            <button name=\"searchButtonName\" className={genButtonStyle} onClick={() => searchItemButton()} disabled={props.error}>Search</button>\r\n        </>)\r\n\r\n    /*****************************************************************************************************************\r\n     *\r\n     * This will display the PDF with the regular data that is in the search sort table.\r\n     *\r\n     ******************************************************************************************************************/\r\n    function pdfRegButton() {\r\n        let title = 'PDF Report';\r\n        if (hasProperty(props, 'title') === true) {\r\n            title = props.title;\r\n        } else if (hasProperty(props, 'report') === true) {\r\n            title = props.report;\r\n        }\r\n\r\n        let docDefinition = {   // This contains the PDF report information\r\n            info: {\r\n                 title: title,\r\n            },\r\n            pageOrientation: pdfOrientation,\r\n            pageMargins: [20, 100, 20, 80],\r\n\r\n            content: [  // The main body of the PDF\r\n            ],\r\n            styles: {   // Styles for the header and cell headers\r\n                header1: {\r\n                    fontSize: 14,\r\n                    bold: true,\r\n                    alignment: 'center',\r\n                    margin: [0, 3, 0, 0]\r\n                },\r\n                cellLeftBold: {\r\n                    alignment: 'left',\r\n                    fontSize: 12,\r\n                    bold: true,\r\n                },\r\n                cellRight: {\r\n                    alignment: 'right',\r\n                },\r\n                cellCenter: {\r\n                    alignment: 'center'\r\n                }\r\n            }\r\n        };\r\n\r\n        docDefinition.header = {    // Build the header and footer\r\n            stack: [\r\n                {columns: [\r\n                    { text: 'Report Date: ' +  currentDate(), alignment: 'right', margin: [0, 5, 5, 0]},\r\n                ]},\r\n                { text: title, style: 'header1' },\r\n            ]\r\n        };\r\n        docDefinition.footer = { text: 'For Official Use Only', alignment: 'center' };\r\n\r\n        // Place the page number at the bottom of each page\r\n\r\n        docDefinition.footer = function(currentPage, pageCount) { return {text: 'Page: ' + currentPage.toString() + ' of ' + pageCount + '   For Official Use Only', alignment: 'center'} };\r\n\r\n        if (props.data.length > 0) {\r\n            let widths = [];    // The width of each of the field, will be auto\r\n            let headers = [];   // The header for each row of the table\r\n            for (let i = 0; i < table.length; i++) {    // See if the column in the table is to be hidden or not\r\n                if (controlBreakInfo[i].hidden === false) { // Not hidden\r\n                    headers.push({text: table[i].header, style: 'cellCenter' });\r\n                }\r\n            }\r\n\r\n            for (let i = 0; i < headers.length; i++) {\r\n                widths.push('auto');\r\n            }\r\n\r\n            let tableSST =\r\n                { table: {  // Build the table\r\n                    headerRows: 1,  // 1 row of headers\r\n                    widths: widths,\r\n\r\n                    body: [ // Build the table header\r\n                        headers,\r\n                    ],\r\n                    alignment: 'center'\r\n            }};\r\n\r\n            docDefinition.content.push(tableSST);\r\n\r\n            // Print out a row in the table\r\n            for (let i = 0; i < indexes.length; i++) {\r\n                let text = [];\r\n                for (let j = 0; j < table.length; j++) {    // Process a column in the table\r\n                    if (controlBreakInfo[j].hidden === false) {\r\n                        // Determine the format of the cell\r\n                        if (hasProperty(table[j], 'pdfCol') === true) {\r\n                            if (table[j].pdfCol === 'left') {\r\n                                text.push({ text: props.data[indexes[i]][table[j].name] });\r\n                            } else if (table[j].pdfCol === 'right') {\r\n                                text.push({ text: props.data[indexes[i]][table[j].name], style: 'cellRight' });\r\n                            } else if (table[j].pdfCol === 'center') {\r\n                                text.push({ text: props.data[indexes[i]][table[j].name], style: 'cellCenter' });\r\n                            } else if (table[j].pdfCol === 'date') {\r\n                                text.push({ text: convertDate(props.data[indexes[i]][table[j].name]), style: 'cellCenter' });\r\n                            } else if (table[j].pdfCol === 'dateLeft') {\r\n                                text.push({ text: convertDate(props.data[indexes[i]][table[j].name]) });\r\n                            } else if (table[j].pdfCol === 'dateRight') {\r\n                                text.push({ text: convertDate(props.data[indexes[i]][table[j].name]), style: 'cellRight' });\r\n                            } else if (table[j].pdfCol === 'money') {\r\n                                text.push({ text: formatMoney(props.data[indexes[i]][table[j].name]), style: 'cellRight' });\r\n                            } else {\r\n                                text.push({ text: props.data[indexes[i]][table[j].name] });\r\n                            }\r\n                        } else if (typeof props.data[indexes[i]][table[j].name] === 'number') {\r\n                            text.push({ text: props.data[indexes[i]][table[j].name], style: 'cellRight' });\r\n                        } else if (hasProperty(table[j], 'dataDate') === true ||\r\n                                   hasProperty(table[j], 'filterDate') === true ||\r\n                                   hasProperty(table[j], 'searchDate') === true ||\r\n                                   hasProperty(table[j], 'sortDate') === true) {\r\n                            text.push({ text: convertDate(props.data[indexes[i]][table[j].name]), style: 'cellCenter' });\r\n                        } else {\r\n                            text.push({ text: props.data[indexes[i]][table[j].name] });\r\n                        }\r\n                    }\r\n                }\r\n\r\n                docDefinition.content[0].table.body.push(text);\r\n            }\r\n\r\n            // Process the aggregate footers\r\n            let foundFooter = false;    // Indicates that a footer for that column was found\r\n            let text = [];              // The text for the footers\r\n            for (let i = 0; i < footers.length; i++) {\r\n                if (footers[i].length > 0) {\r\n                    let value = ''; // Build the footer\r\n                    for (let j = 0; j < footers[i].length; j++) {\r\n                        value += footers[i][j] + '\\n';\r\n                    }\r\n                    text.push({ text: value, style: 'cellLeftBold' });\r\n                    foundFooter = true;\r\n                } else {\r\n                    text.push ({ text: ' ', style: 'cellLeftBold' });\r\n                }\r\n            }\r\n\r\n            if (foundFooter === true) { // A footer was found, so display it\r\n                docDefinition.content[0].table.body.push(text);\r\n            }\r\n\r\n            pdfMake.createPdf(docDefinition).open();    // Build the PDF\r\n        }\r\n    }\r\n\r\n    /*****************************************************************************************************************\r\n     *\r\n     * This will display the PDF with the control break data that is in the search sort table.\r\n     *\r\n     ******************************************************************************************************************/\r\n    function pdfCBButton() {\r\n        let title = 'PDF Report';\r\n        if (hasProperty(props, 'title') === true) {\r\n            title = props.title;\r\n        } else if (hasProperty(props, 'report') === true) {\r\n            title = props.report;\r\n        }\r\n\r\n        let docDefinition = {   // This contains the PDF report information\r\n            info: {\r\n                 title: title,\r\n            },\r\n            pageOrientation: pdfOrientation,\r\n            pageMargins: [20, 100, 20, 80],\r\n\r\n            content: [  // The main body of the PDF\r\n            ],\r\n            styles: {   // Styles for the header and cell headers\r\n                header1: {\r\n                    fontSize: 14,\r\n                    bold: true,\r\n                    alignment: 'center',\r\n                    margin: [0, 3, 0, 0]\r\n                },\r\n                cellLeftBold: {\r\n                    alignment: 'left',\r\n                    fontSize: 12,\r\n                    bold: true,\r\n                },\r\n                cellCenterBoldBig: {\r\n                    alignment: 'center',\r\n                    fontSize: 14,\r\n                    bold: true,\r\n                },\r\n                cellRight: {\r\n                    alignment: 'right',\r\n                },\r\n                cellCenter: {\r\n                    alignment: 'center'\r\n                }\r\n            }\r\n        };\r\n\r\n        docDefinition.header = {    // Build the header and footer\r\n            stack: [\r\n                {columns: [\r\n                    { text: 'Report Date: ' +  currentDate(), alignment: 'right', margin: [0, 5, 5, 0]},\r\n                ]},\r\n                { text: title, style: 'header1' },\r\n            ]\r\n        };\r\n        docDefinition.footer = { text: 'For Official Use Only', alignment: 'center' };\r\n\r\n        // Place the page number at the bottom of each page\r\n\r\n        docDefinition.footer = function(currentPage, pageCount) { return {text: 'Page: ' + currentPage.toString() + ' of ' + pageCount + '   For Official Use Only', alignment: 'center'} };\r\n\r\n        if (props.data.length > 0) {\r\n            let index = 0;  // Indicates the next position in the content array\r\n\r\n            for (let k = 0; k < controlBreakData.length; k++) { // Spin through the control break data\r\n                if (k !== 0) {  // If not the first control break, print out a blank line\r\n                    docDefinition.content.push ({ text: ' ', style: 'cellCenterBoldBig' });\r\n                    index++;\r\n                    }\r\n                docDefinition.content.push ({ text: controlBreakData[k].title, style: 'cellCenterBoldBig' });\r\n                index++;\r\n\r\n                let widths = [];    // The width of each of the field, will be auto\r\n                let headers = [];   // The header for each row of the table\r\n                for (let i = 0; i < table.length; i++) {\r\n                    if (controlBreakInfo[i].hidden === false) {\r\n                        headers.push({text: table[i].header, style: 'cellCenter' });\r\n                    }\r\n                }\r\n\r\n                for (let i = 0; i < headers.length; i++) {\r\n                    if (controlBreakInfo[i].hidden === false) {\r\n                        widths.push('auto');\r\n                    }\r\n                }\r\n\r\n                let tableSST =\r\n                    { table: {  // Build the table\r\n                        headerRows: 1,  // 1 row of headers\r\n                        widths: widths,\r\n\r\n                        body: [ // Build the table header\r\n                            headers,\r\n                        ]\r\n                }};\r\n\r\n                docDefinition.content.push(tableSST);\r\n\r\n                for (let i = 0; i < controlBreakData[k].data.length; i++) { // Spin throught the data for each control break\r\n                    let text = [];  // The text for each cell\r\n                    for (let j = 0; j < table.length; j++) {\r\n                        if (controlBreakInfo[j].hidden === false) { // Column is not hidden\r\n                            // Determine the format for the column\r\n                            if (hasProperty(table[j], 'pdfCol') === true) {\r\n                                if (table[j].pdfCol === 'left') {\r\n                                    text.push({ text: controlBreakData[k].data[i][table[j].name] });\r\n                                } else if (table[j].pdfCol === 'right') {\r\n                                    text.push({ text: controlBreakData[k].data[i][table[j].name], style: 'cellRight' });\r\n                                } else if (table[j].pdfCol === 'center') {\r\n                                    text.push({ text: controlBreakData[k].data[i][table[j].name], style: 'cellCenter' });\r\n                                } else if (table[j].pdfCol === 'date') {\r\n                                    text.push({ text: convertDate(controlBreakData[k].data[i][table[j].name]), style: 'cellCenter' });\r\n                                } else if (table[j].pdfCol === 'dateLeft') {\r\n                                    text.push({ text: convertDate(controlBreakData[k].data[i][table[j].name]) });\r\n                                } else if (table[j].pdfCol === 'dateRight') {\r\n                                    text.push({ text: convertDate(controlBreakData[k].data[i][table[j].name]), style: 'cellRight' });\r\n                                } else if (table[j].pdfCol === 'money') {\r\n                                    text.push({ text: formatMoney(controlBreakData[k].data[i][table[j].name]), style: 'cellRight' });\r\n                                } else {\r\n                                    text.push({ text: controlBreakData[k].data[i][table[j].name] });\r\n                                }\r\n                            } else if (typeof controlBreakData[k].data[i][table[j].name] === 'number') {\r\n                                text.push({ text: controlBreakData[k].data[i][table[j].name], style: 'cellRight' });\r\n                            } else if (hasProperty(table[j], 'dataDate') === true ||\r\n                                       hasProperty(table[j], 'filterDate') === true ||\r\n                                       hasProperty(table[j], 'searchDate') === true ||\r\n                                       hasProperty(table[j], 'sortDate') === true) {\r\n                                text.push({ text: convertDate(controlBreakData[k].data[i][table[j].name]), style: 'cellCenter' });\r\n                            } else {\r\n                                text.push({ text: controlBreakData[k].data[i][table[j].name] });\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    docDefinition.content[index].table.body.push(text);\r\n                }\r\n\r\n                let foundFooter = false;    // Indicates that a footer was found, so place it in the PDF\r\n                let text = [];              // The value for a footer in a column in the table\r\n                for (let i = 0; i < controlBreakData[k].footer.length; i++) {\r\n                    if (controlBreakData[k].footer[i].length > 0) { // There is a footer\r\n                        let value = ''; // Value for the footer\r\n                        for (let j = 0; j < controlBreakData[k].footer[i].length; j++) {    // Build the footer\r\n                            value += controlBreakData[k].footer[i][j] + '\\n';\r\n                        }\r\n                        text.push({ text: value, style: 'cellLeftBold' });\r\n                        foundFooter = true;\r\n                    } else {    // No footer found for that column\r\n                        text.push({ text: ' ', style: 'cellLeftBold' });\r\n                    }\r\n                }\r\n\r\n                if (foundFooter === true) { // Place the footer in the column for the table\r\n                    docDefinition.content[index].table.body.push(text);\r\n                }\r\n\r\n                index++;\r\n            }\r\n\r\n            pdfMake.createPdf(docDefinition).open();    // Build the PDF\r\n        }\r\n    }\r\n\r\n    /*****************************************************************************************************************\r\n     *\r\n     * This will determine which PDF function to call based on whether there are control breaks or not.\r\n     *\r\n     *****************************************************************************************************************/\r\n    function pdfButton() {\r\n        let localInvalid = [...invalid];    // Makes sure a page orientation for the PDF was selected\r\n        if (pdfOrientation === '' || pdfOrientation === null || pdfOrientation === undefined) {\r\n            localInvalid = setInvalidScreen(localInvalid, PDFORIENT, 'An orientation must be entered for the PDF');\r\n            setInvalid(localInvalid);\r\n            return;\r\n        }\r\n\r\n        if (isControlBreak(controlBreakInfo) === true) {    // There is a control break\r\n            pdfCBButton();\r\n        } else {    // No control break\r\n            pdfRegButton();\r\n        }\r\n    }\r\n\r\n    /********************************************************************************************************************\r\n     *\r\n     * This will process the data into a CSV file to be imported into excel for a regular search sort table.\r\n     *\r\n     *********************************************************************************************************************/\r\n    function excelRegButton() {\r\n        let title = 'Excel Report';\r\n        if (hasProperty(props, 'title') === true) {\r\n            title = props.title;\r\n        } else if (hasProperty(props, 'report') === true) {\r\n            title = props.report;\r\n        }\r\n\r\n        let exData = [];    // The data for the excel spreadsheet\r\n\r\n        // Title for the excel spreadsheet\r\n        exData.push(['Report Date: ' +  currentDate()]);\r\n        exData.push([' ']);\r\n        exData.push([title]);\r\n        exData.push([' ']);\r\n\r\n        let header = [];    // Header for the excel spreadsheet\r\n        for (let i = 0; i < table.length; i++) {\r\n            header.push(table[i].header);\r\n        }\r\n\r\n        exData.push(header);\r\n        exData.push([' ']);     // Blank line\r\n\r\n        // Data for the excel spreadsheet\r\n        for (let i = 0; i < props.data.length; i++) {\r\n            let text = [];\r\n            for (let j = 0; j < table.length; j++) {\r\n                text.push(props.data[indexes[i]][table[j].name]);\r\n            }\r\n            exData.push(text);\r\n        }\r\n\r\n        // Footer at the bottom of the spreadsheet\r\n        exData.push([' ']);\r\n        exData.push[['For Offical Use Only']];\r\n\r\n        setExcelData(exData);\r\n        setShowExcel(true); // Show the Excel Display button\r\n    }\r\n\r\n    /********************************************************************************************************************\r\n     *\r\n     * This will process the data into a CSV file to be imported into excel for a search sort table that has control\r\n     * breaks.\r\n     *\r\n     *********************************************************************************************************************/\r\n    function excelCBButton() {\r\n        let title = 'Excel Report';\r\n        if (hasProperty(props, 'title') === true) {\r\n            title = props.title;\r\n        } else if (hasProperty(props, 'report') === true) {\r\n            title = props.report;\r\n        }\r\n\r\n        let exData = [];    // Data for the excel spreadsheet\r\n\r\n        // Title for the excel spreadsheet\r\n        exData.push(['Report Date: ' +  currentDate()]);\r\n        exData.push([' ']);\r\n        exData.push([title]);\r\n        exData.push([' ']);\r\n\r\n        // Header for the excel spreadsheet\r\n        let header = [];\r\n        for (let i = 0; i < table.length; i++) {\r\n            header.push(table[i].header);\r\n        }\r\n\r\n        // Data for the excel spreadsheet\r\n        for (let k = 0; k < controlBreakData.length; k++) {\r\n            exData.push([' ']);\r\n            exData.push([' ']);\r\n            exData.push([controlBreakData[k].title]);\r\n            exData.push(header);\r\n            exData.push([' ']);\r\n\r\n            for (let i = 0; i < controlBreakData[k].data.length; i++) {\r\n                let text = [];\r\n                for (let j = 0; j < table.length; j++) {\r\n                    text.push(controlBreakData[k].data[i][table[j].name]);\r\n                }\r\n                exData.push(text);\r\n            }\r\n        }\r\n\r\n        // Footer at the bottom of the spreadsheet\r\n        exData.push([' ']);\r\n        exData.push[['For Offical Use Only']];\r\n\r\n        setExcelData(exData);\r\n        setShowExcel(true); // Show the Excel Display button\r\n    }\r\n\r\n    /*****************************************************************************************************************\r\n     *\r\n     * This will determine which excel spreadsheet function to call based on whether there are control breaks or not.\r\n     *\r\n     *****************************************************************************************************************/\r\n    function excelBuildButton() {\r\n        if (isControlBreak(controlBreakInfo) === true) {    // There is a control break in the search sort table\r\n            excelCBButton();\r\n        } else {    // No control break\r\n            excelRegButton();\r\n        }\r\n    }\r\n\r\n    /******************************************************************************************************************\r\n     *\r\n     * This will hide the Excel Display button\r\n     *\r\n     ******************************************************************************************************************/\r\n    function closeExDisplay() {\r\n        setShowExcel(false);\r\n    }\r\n\r\n    // This will display the PDF button and the Orientation choice box on the screen\r\n    const pdfDisplay = (hasProperty(props, 'nopdf') === true) ? null :\r\n        <span>\r\n            <button name=\"pdf\" className={genButtonStyle} onClick={pdfButton}>PDF</button>\r\n            <span className=\"sw-invalid_checkForError\">\r\n                <label htmlFor=\"pdfOrientation\">Orientation: </label>\r\n                <Choice choices={pdfOrientValues} name=\"pdfOrientation\" value={pdfOrientation}\r\n                    onChange={(event) => setPdfOrientation(event.target.value)}\r\n                    onClick={() => wasClickedScreen(invalid, PDFORIENT, setInvalid)}\r\n                    className={processInvalidStyleScreen(invalid, PDFORIENT)} />\r\n                {(isInvalid(invalid[PDFORIENT], -1) === true) ? <span className=\"sw-invalid_errMessage\">{invalid[PDFORIENT].message}</span> : null }\r\n            </span>\r\n        </span>;\r\n\r\n    // This will display the Excel Build and Excel Display button on the screen\r\n    const excelDisplay = (hasProperty(props, 'noexcel') === true) ? null :\r\n        <span>\r\n            <button name=\"excelBuild\" className={genButtonStyle} onClick={excelBuildButton} >Excel Build</button>\r\n            {(showExcel === false) ? null :\r\n                <CSVLink data={excelData} target=\"_blank\" onClick={closeExDisplay} className=\"sw-sst_excelButtonStyle\">Excel Display</CSVLink> }\r\n        </span>;\r\n\r\n    // This will determine if both the PDF and Excel buttons and choice box should be displayed or not\r\n    const pdfExcel = (hasProperty(props, 'nopdf') === true && hasProperty(props, 'noexcel') === true) ? null :\r\n        <div className=\"sw-sst_footStyle2\">\r\n            {pdfDisplay}\r\n            {excelDisplay}\r\n        </div>;\r\n\r\n    // Indicates whether the footer displaying the pagination on the bottom right corner of the search sort table should be displayed\r\n    const footer = (hasProperty(props,'nofooter') === true) ? null :\r\n        <div>\r\n            <div className=\"sw-sst_footStyle\">\r\n                { (hasProperty(props,'norows') === true) ? null :\r\n                    <span className=\"sw-sst_marginStyle\">\r\n                        <Choice choices={rowValues} name=\"rows\" value={maximum} onChange={(event) => processMaxItems(event.target.value)} className=\"sw-sst_noBorderStyle\" disabled={props.error} />\r\n                        rows\r\n                    </span>\r\n                }\r\n                {topButtonHTML}\r\n                {previousButtonHTML}\r\n                { (hasProperty(props,'nodisplay') === true) ? null :\r\n                    <span>{start + ' - ' + end + ' of ' + length}</span>\r\n                }\r\n                {nextButtonHTML}\r\n                {bottomButtonHTML}\r\n            </div>\r\n            {pdfExcel}\r\n        </div>\r\n\r\n    let hoverClassName = `sw-sst_tableStyle `;\r\n    if (hasProperty(props,'hover') === true) {  // A row can be hovered over\r\n        let root = document.documentElement;    // The root of the DOM\r\n        let hoverBackColor = 'cyan';            // The default hover color\r\n        let found = false;                      // Indicates whether more than 10 colors have been placed in the CSS\r\n\r\n        if (hasProperty(props,'hoverColor') === true) { // The default hover color is to be changed\r\n            hoverBackColor = props.hoverColor;\r\n        }\r\n\r\n        // Set the hover color in the CSS\r\n        for (let i = 1; i <= 10 && found === false; i++) {\r\n            let colorValue = getComputedStyle(root).getPropertyValue(`--sw-sst_hover_back_color${i}`);\r\n            if (colorValue === ' none') {\r\n                root.style.setProperty(`--sw-sst_hover_back_color${i}`, hoverBackColor);\r\n                hoverClassName += `sw-sst_search_sort_table${i}`;\r\n                found = true;\r\n            } else if (colorValue === hoverBackColor) {\r\n                hoverClassName += `sw-sst_search_sort_table${i}`;\r\n                found = true;\r\n            }\r\n        }\r\n\r\n        if (found === false) {  //\r\n            console.error ('You can have at most 10 different hover colors for tables.')\r\n        }\r\n    }\r\n\r\n     if (!table) {    // Loading (no Table Col Defs yet, no data yet)\r\n      const override = css`\r\n        margin: 0 auto;\r\n        `;\r\n      const msg = (props.spinner) ?\r\n          <div style={{height: '6em'}}>\r\n            <h3>Loading</h3>\r\n            <FadeLoader css={override} size=\"30px\" color=\"teal\" loading={true} />\r\n          </div>\r\n       : <span></span>\r\n\r\n      return msg\r\n    }\r\n\r\n    let controlBreakVal = isControlBreak(controlBreakInfo);\r\n\r\n    let tableBuild = null;\r\n\r\n    let cbCount = -1;\r\n    if (controlBreakVal === true) { // Display control break tables\r\n        let cbTable = `cbtitles_${number}`;\r\n        let cbHeader = `cbhead_${number}`;\r\n\r\n        // Build the tables for the control breaks by rendering the headers in blue at the top and\r\n        // each control break table following\r\n        tableBuild =    <span>\r\n                            <table className=\"sw-sst_table\" key={cbTable}>\r\n                                <tr key={cbHeader}>\r\n                                    {table.map(buildHeaders(true, 0))}\r\n                                </tr>\r\n                            </table>\r\n                            {controlBreakData.map(renderCtrlBreak) }\r\n                        </span>\r\n    } else {    // Regular search sort table\r\n        let keyTable = `table_${number}`;\r\n        let header = `head_${number}`;\r\n        let count = -1;\r\n        tableBuild =    <table className={hoverClassName + \" sw-sst_table\"} name={`table${number}`} key={keyTable}>\r\n                            <tbody>\r\n                                <tr key={header} className=\"sw-sst_centerBoldStyle\">\r\n                                    {table.map(buildHeaders(true, 0))}\r\n                                </tr>\r\n                                { showData.map((row) => {\r\n                                    count++;\r\n                                    return props.eachRowInTable(row, count);\r\n                                }) }\r\n                                { (hasProperty(props,'footer') === true) ?\r\n                                    <tr className=\"footerStyle\">{ props.footer.map(buildFooter) }</tr> : null }\r\n                                <tr>\r\n                                    {footers.map(buildMathFooters)}\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n    }\r\n\r\n    /************************************************************************************************************************\r\n     *\r\n     * Checks to see if the dropDown field exists and is set to true in the table props.\r\n     *\r\n     *************************************************************************************************************************/\r\n    function areDropDowns() {\r\n        for (let i = 0; i < table.length; i++) {    // Spin through the table to check for the dropDown field and its value\r\n            if (hasProperty(table[i], 'dropDown') === true && table[i].dropDown === true) {\r\n                return true;    // There are dropDowns in the table\r\n            }\r\n        }\r\n\r\n        return false;   // No drop downs in the table\r\n    }\r\n\r\n    /**************************************************************************************************************************\r\n     *\r\n     * Render the screen\r\n     *\r\n     **************************************************************************************************************************/\r\n    return (\r\n        <div className=\"sw-sst_divStyle\">\r\n            {title}\r\n            <div>\r\n                { (hasProperty(props,'sfbottom') === false) ?\r\n                    (<>\r\n                        {filterSection}\r\n                        {searchSection}\r\n                        <span className=\"sw-sst_right\">\r\n                            {(areDropDowns() === false) ? null : <button name=\"reset\" className={genButtonStyle} onClick={() => resetButton()} disabled={props.error}>Reset</button>}\r\n                        </span>\r\n                        {allButtonHTML}\r\n                        {letters}\r\n                    </>) : null\r\n                }\r\n            </div>\r\n            { (props.data.length === 0 && hasProperty(props,'showtable') === false) ?\r\n            <div>No Data to Display</div> :\r\n            <div>\r\n                <div className={tableDivStyle} style={heightWidthStyle}>\r\n                    {tableBuild}\r\n                </div>\r\n                {footer}\r\n                <div>\r\n                    { (hasProperty(props,'sfbottom') === true) ?\r\n                        (<>\r\n                            {filterSection}\r\n                            {searchSection}\r\n                            {allButtonHTML}\r\n                            {letters}\r\n                        </>) : null\r\n                    }\r\n                </div>\r\n            </div>\r\n            }\r\n            <AlertModal show={showAlert} closeFunct={setShowAlert} message={alertMessage} />\r\n        </div>\r\n    );\r\n\r\n    /*************************************************************************************\r\n     *\r\n     * This will set the number of data items that are to be displayed on the screen.\r\n     *\r\n     * @param {*} value the value selected from the drop down\r\n     *\r\n     **************************************************************************************/\r\n    function processMaxItems(value) {\r\n        if (value === 'All') {  // All data should be shown\r\n            setMaxItems(props.data.length);\r\n        } else {\r\n            setMaxItems(parseInt(value));\r\n        }\r\n        setMaximum(value);  // Used so the value will show on the drop down\r\n    }\r\n\r\n    /*********************************************************************************\r\n     *\r\n     * This is called whenever the user changes the search item.  It will take the\r\n     * user to the beginning of the data and set the value typed.\r\n     *\r\n     * @param {*} value value to set the search item to\r\n     *\r\n     **********************************************************************************/\r\n    function setupSearch(value) {\r\n        setStartEnd(0, length, indexes);\r\n        setSearchItem(value);\r\n    }\r\n\r\n    /******************************************************************************************************************\r\n     *\r\n     * This will set the search sort table back to its initial state.  It will remove hidden columns, control breaks,\r\n     * and aggregate footers.\r\n     *\r\n     *******************************************************************************************************************/\r\n    function resetButton() {\r\n        let ctrlBreakInfo = [...controlBreakInfo];\r\n        let locFooters = [...footers];\r\n        let ctrlBreakData = [...controlBreakData];\r\n\r\n        // Remove the hidden columns and control breaks\r\n        for (let i = 0; i < ctrlBreakInfo.length; i++) {\r\n            ctrlBreakInfo[i].hidden = false;\r\n            ctrlBreakInfo[i].ctrlBreak = 0;\r\n        }\r\n\r\n        for (let i = 0; i < locFooters.length; i++) {   // Remove the footers\r\n            locFooters[i] = [];\r\n        }\r\n\r\n        for (let i = 0; i < ctrlBreakData.length; i++) {    // Remove the control break data\r\n            for (let j = 0; j < ctrlBreakData[i].footer.length; j++) {\r\n                ctrlBreakData[i].footer[j] = [];\r\n            }\r\n            ctrlBreakData[i].title = '';\r\n        }\r\n\r\n        hideTheColumns(ctrlBreakInfo);\r\n\r\n        setIndex(origIndexes);  // Set the indexes back to the original indexes\r\n        setControlBreakInfo(ctrlBreakInfo);\r\n        setFooters(locFooters);\r\n        setControlBreakData(ctrlBreakData);\r\n    }\r\n\r\n    /************************************************************************************************************\r\n     *\r\n     * Indicates whether a control break has been set or not for a column\r\n     *\r\n     * @param controlBreakInfo  information about hidden columns and control breaks\r\n     *\r\n     ************************************************************************************************************/\r\n    function isControlBreak (controlBreakInfo) {\r\n        for (let i = 0; i < controlBreakInfo.length; i++) {\r\n            if (controlBreakInfo[i].ctrlBreak > 0) {    // If the control break column has a value greater than zero,\r\n                return true;                            // control breaks have been set\r\n            }\r\n        }\r\n\r\n        return false;   // No control breaks found\r\n    }\r\n\r\n\r\n    // /************************************************************************************************************\r\n    //  *\r\n    //  * This will hide the column in the regular table or the control break tables\r\n    //  *\r\n    //  * @param hideShow  indicates that the column should be displayed (false) or not (true)\r\n    //  * @param row       row in the control break info array\r\n    //  * @param i         current index into the control break info array\r\n    //  *\r\n    //  ************************************************************************************************************/\r\n\r\n/*\r\n    function _findHiddenColumns(hideShow) {\r\n\r\n      // TODO ask Jim   hideTheColumn() is not defined\r\n\r\n        return function (row, i) {\r\n            let name = `table${number}`;    // Determine the name of the table\r\n\r\n            if (row.hidden === hideShow) {  // Make sure the column is to be hidden or shown\r\n                if (isControlBreak(controlBreakInfo) === true) {    // There is a control break\r\n                    for (let j = 0; j < controlBreakData.length; j++) {\r\n                        name = `table${number}_${j}`    // Determine the control break table name\r\n                        hideTheColumn(row, i, name, true, hideShow);   // Hide the column in the control break table\r\n                    }\r\n                } else {    // Regular table\r\n                    hideTheColumn(row, i, name, false, hideShow);   // Hide the column in the table\r\n                }\r\n            }\r\n        }\r\n    }\r\n*/\r\n\r\n    /**********************************************************************************************************\r\n     *\r\n     * This will hide the column by setting the attribute hidden if hideShow is true or removing the attribute\r\n     * hidden if hideShow is false.\r\n     *\r\n     * @param row           the row containing the current control break info for that column in the table\r\n     * @param i             current index into the control break info array\r\n     * @param name          the name of the table in which the column is to be hidden\r\n     * @param isCtrlBreak   indicates that there is a control break\r\n     * @param hideShow  indicates that the column should be displayed (false) or not (true)\r\n     *\r\n     ************************************************************************************************************/\r\n    function _hideTheColumnxx (row, i, name, isCtrlBreak, hideShow) {\r\n        let tableElement = document.getElementsByName(name)[0]; // Find the table in the DOM\r\n        console.log('tableElement :', tableElement);\r\n        if (tableElement === undefined) {\r\n            return;\r\n        }\r\n        let tbodyElement = tableElement.children;               // Find the tbody in the DOM\r\n        console.log('tbodyElement :', tbodyElement);\r\n        let trElement = tbodyElement[(isCtrlBreak === false) ? 0 : 1].children; // Find the tr children in the DOM\r\n        console.log('trElement :', trElement);\r\n        for (const trChild of trElement) {  // Spin through the tr children in the tbody section of the table in the DOM\r\n            console.log('trChild :', trChild);\r\n            let count = 0;  // Counts the number of tr children\r\n            for (const tdChild of trChild.children) {   // Spin through the td children in the tr\r\n//                console.log('tdChild :', tdChild);\r\n                if (count === i) {  // Is it the correct tr child being sought\r\n                    if (hideShow === true) {    // Hiding the column\r\n                        tdChild.setAttribute(\"hidden\", row.hidden); // Add the hidden attribute\r\n                    } else {    // Not hiding the column\r\n                        tdChild.removeAttribute(\"hidden\");  // Remove the hidden atttribute\r\n                    }\r\n                }\r\n                count++;\r\n            }\r\n        }\r\n    }\r\n\r\n    /********************************************************************************************************************\r\n     *\r\n     * The will place whether the column is hidden or shown in the table.  This information is passed back to the calling\r\n     * component via a hidden function.  The hidden values (true or false) for each column is returned in an array.\r\n     *\r\n     * @param ctrlBreakInfo contains whether the column should be hidden or shown along with the control break information\r\n     *\r\n     *********************************************************************************************************************/\r\n    function hideTheColumns(ctrlBreakInfo) {\r\n        let hide = [];  // Indicates whether the column is hidden (true) or shown (false)\r\n        for (let i = 0; i < ctrlBreakInfo.length; i++) {    // Spin through the control break info and see if the column\r\n            hide.push(ctrlBreakInfo[i].hidden);             // is hidden or shown\r\n        }\r\n\r\n        if (hasProperty(props, 'hidden') === true) {\r\n            props.hidden(hide); // Call the hidden function in the calling component\r\n        }\r\n        setHideCols(hide);\r\n    }\r\n\r\n    /***********************************************************************************************************************\r\n     *\r\n     * This will hide a column in the search sort table.  This is selected by the drop down with blue headers for each\r\n     * column.\r\n     *\r\n     * @param row   the row being processed in the table props\r\n     * @param i     current row in the table being processed\r\n     *\r\n     ***********************************************************************************************************************/\r\n    function hideColumn(row, i) {\r\n        let ctrlBreakInfo = [...controlBreakInfo];\r\n        ctrlBreakInfo[i].hidden = true;                 // Hide that particular column in the search sort table\r\n        hideTheColumns(ctrlBreakInfo);\r\n//        ctrlBreakInfo.map(findHiddenColumns(true));     // Find the column that is to be hidden in the DOM and add the hidden attribute\r\n        setControlBreakInfo(controlBreakInfo)\r\n        setHtmlDropDown(false);                         // Hide the dropdown in the column\r\n    }\r\n\r\n    /***********************************************************************************************************************\r\n     *\r\n     * This will show a column in the search sort table.  This is selected by the drop down with blue headers for each\r\n     * column.\r\n     *\r\n     * @param row   the row being processed in the table props\r\n     * @param i     current row in the table being processed\r\n     *\r\n     ***********************************************************************************************************************/\r\n    function showColumn(row, i) {\r\n        let ctrlBreakInfo = [...controlBreakInfo];\r\n        ctrlBreakInfo[i].hidden = false;                // Show that particular column in the search sort table\r\n        hideTheColumns(ctrlBreakInfo);\r\n//        ctrlBreakInfo.map(findHiddenColumns(false));    // Find the column that is to be shown in the DOM and add the hidden attribute\r\n        setControlBreakInfo(controlBreakInfo)\r\n        setHtmlDropDown(false);                         // Hide the dropdown in the column\r\n    }\r\n\r\n    /*************************************************************************************************************************\r\n     *\r\n     * This will find the next order number for the next control break.\r\n     *\r\n     * @param {*} controlBreakInfo  contains the control break sort order\r\n     * @returns                     returns the next sort order number\r\n     *\r\n     *************************************************************************************************************************/\r\n    function maxPlusOne(controlBreakInfo) {\r\n        let max = -1;   // The next sort order number\r\n        for (let i = 0; i < controlBreakInfo.length; i++) { // Find the maximum sort order number for the control breaks\r\n            if (controlBreakInfo[i].ctrlBreak > max) {\r\n                max = controlBreakInfo[i].ctrlBreak;\r\n            }\r\n        }\r\n\r\n        return max + 1; // Return the next sort order number\r\n    }\r\n\r\n    /**************************************************************************************************************************\r\n     *\r\n     * This determines the data type of the data to be sorted.  If field is a date, its format is format is converted to the\r\n     * correct format.\r\n     *\r\n     * @param   breakOrder  contains the control break sort order for the control breaks\r\n     * @param   row         indexes for the control break\r\n     *\r\n     **************************************************************************************************************************/\r\n    function buildSortData (breakOrder, row) {\r\n        let data = [];  // The data for the control break\r\n        for (let i = 0; i < breakOrder.length; i++) {   // Spin through the control break sort order\r\n            let dateFormat = null;\r\n            if (hasProperty(table[breakOrder[i].col], 'sortDate')) {    // There is a sort data in the table props\r\n                dateFormat = table[breakOrder[i].col].sortDate;\r\n            }\r\n\r\n            if (dateFormat !== null) {  // Convert the date to its sort date format\r\n                if (dateFormat === 'MM/DD/YYYY') {\r\n                    data.push(convertDate2(props.data[row][table[breakOrder[i].col].name], '/', 1));\r\n                } else if (dateFormat === 'MM-DD-YYYY') {\r\n                    data.push(convertDate2(props.data[row][table[breakOrder[i].col].name], '-', 1));\r\n                } else if (dateFormat === 'MM/DD/YYYY HH:MM:SS') {\r\n                    data.push(convertDateTime(props.data[row][table[breakOrder[i].col].name], '/', 1));\r\n                } else if (dateFormat === 'MM-DD-YYYY HH:MM:SS') {\r\n                    data.push(convertDateTime(props.data[row][table[breakOrder[i].col].name], '-', 1));\r\n                } else if (dateFormat === 'YYYY-MM-DDTHH:MM:SS.SSS') {\r\n                    data.push(convertDateTimeReg (props.data[row][table[breakOrder[i].col].name]));\r\n                } else {\r\n                    data.push(props.data[row][table[breakOrder[i].col].name]);\r\n                }\r\n            } else {    // No sort date format\r\n                data.push(props.data[row][table[breakOrder[i].col].name]);\r\n            }\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    /*********************************************************************************************************************\r\n     *\r\n     * The will sort multiple columns for the control breaks.  It will also sort the control break numbers to get the\r\n     * columns in the right order.\r\n     *\r\n     * @param {*} ctrlBreakInfo information about the ordering of the control breaks\r\n     * @param {*} indexes       indexes into the data\r\n     * @returns                 the indexes and the data for the control break\r\n     *\r\n     *********************************************************************************************************************/\r\n    function sortMultipleCols(ctrlBreakInfo, indexes) {\r\n        let breakOrder = [];    // The sort order for the control breaks\r\n        let sortAry = [];       // The sorted indexes based on the control break order\r\n\r\n        if (table === null) return; // No table props\r\n\r\n        // Copy the control break order from the control break info\r\n        for (let i = 0; i < ctrlBreakInfo.length; i++) {\r\n            if (ctrlBreakInfo[i].ctrlBreak > 0) {\r\n                breakOrder.push ({ col: i, order: ctrlBreakInfo[i].ctrlBreak});\r\n            }\r\n        }\r\n\r\n        // Sort the control break order\r\n        breakOrder.sort(function (item1, item2) {\r\n            return item1.order - item2.order;\r\n        });\r\n\r\n        // Build the indexes for each control break\r\n        indexes.map ((row) => {\r\n            sortAry.push ({ index: row, data: buildSortData(breakOrder, row) });\r\n        });\r\n\r\n        // Sort the indexes based on the control break sort order\r\n        sortAry.sort(function (item1, item2) {\r\n            for (let i = 0; i < breakOrder.length; i++) {\r\n                // Convert to upper case if ignoring case\r\n                if (typeof item1.data[i] === 'string' &&\r\n                    hasProperty(props,'ignorecase') === true) {\r\n                    // item1.data = (item1.data !== null) ? item1.data.toUpperCase() : null;\r\n                    item1.data[i] = item1.data[i].toUpperCase()\r\n                    item2.data = (item2.data[i] !== null) ? item2.data.toUpperCase() : null;\r\n                }\r\n\r\n                // Make the comparison\r\n                if (item1.data[i] < item2.data[i]) {\r\n                    return -1;\r\n                } else if (item1.data[i] > item2.data[i]) {\r\n                    return 1;\r\n                }\r\n            }\r\n\r\n            return 0;\r\n        });\r\n\r\n        // Build the new indexes for the control break\r\n        let newIndexes = [];\r\n        sortAry.map((row) => newIndexes.push(row.index));\r\n\r\n        setIndex(newIndexes, false);\r\n\r\n        return { indexes: newIndexes, srtOrder: breakOrder };\r\n    }\r\n\r\n    /***********************************************************************************************************************\r\n     *\r\n     * This will calculate the pagination for the control breaks in the search sort table.  The starting or ending point\r\n     * will be passed down and either the starting table and index within the table or the ending table and index within the\r\n     * table.\r\n     *\r\n     * @param   point   the starting or ending point for a control break\r\n     *\r\n     ************************************************************************************************************************/\r\n    function calcStartEndCB (point) {\r\n        let tablePos = 0;   // The control break table in which the point is located\r\n        let index = 0;      // The index within the control break table where the point is located\r\n        let count = 0;      // Counts the length of each table to determine which table the point is in\r\n        let length = 0;     // The length of a control break table\r\n        let done = false;   // Indicates that the table position and index has been found\r\n\r\n        for (let i = 0; i < controlBreakData.length && done === false; i++) {\r\n            length = controlBreakData[i].data.length;\r\n            if (count + length < point) {   // The point is not in this control break table\r\n                count += length;\r\n            } else {    // The point is in the control break table\r\n                tablePos = i;\r\n                index = (point - count);\r\n                done = true;\r\n            }\r\n        }\r\n\r\n        return { table: tablePos, index: index};    // Return the table position and index of the point\r\n    }\r\n\r\n    /*************************************************************************************************************************\r\n     *\r\n     * This will calculate the starting and ending position for the data to be displayed on the screen (pagination).\r\n     *\r\n     **************************************************************************************************************************/\r\n    function calcPagination() {\r\n        let starting = calcStartEndCB(start);   // Calculate the starting position\r\n        let ending = calcStartEndCB(end);       // Calculate the ending position\r\n\r\n        let infoObj = { tableStart: starting.table, // Place the starting and ending position in an object\r\n                        startIndex: starting.index, // and return the object\r\n                        tableEnd: ending.table,\r\n                        endIndex: ending.index };\r\n        return infoObj;\r\n    }\r\n\r\n    /*************************************************************************************************************************\r\n     *\r\n     * This will render the control break table and take care of the pagination.\r\n     *\r\n     * @param   row the name of the table being rendered\r\n     * @param   i   current index into the controlBreakData\r\n     *\r\n     **************************************************************************************************************************/\r\n    function renderCtrlBreak (row, i) {\r\n        let name = `table${number}_${i}`;   // The name of the table\r\n        let tableCBInfo = calcPagination(); // Calculate the starting and ending points for the data on the screen\r\n        let displayFooter = false;          // Indicates whether the footer should be displayed or not\r\n        let data = [];                      // The data for the control break\r\n\r\n        if (i < tableCBInfo.tableStart) {   // Have not reached the starting control break table for the paginantion\r\n            return null;\r\n        } else if (tableCBInfo.tableStart === i) {      // At the start control break table to be displayed\r\n            let end = controlBreakData[i].data.length;  // Set the ending of the pagination at the end of the control break table\r\n            if (tableCBInfo.tableEnd === i) {           // The end of the pagination is before the end of the control break table\r\n                end = tableCBInfo.endIndex;\r\n            }\r\n\r\n            // This pagination will reach the end of the control break table, so display any footers\r\n            for (let j = tableCBInfo.startIndex; j < end; j++) {\r\n                data.push(row.data[j]); // Copy the data to be displayed\r\n                if (j + 1 === controlBreakData[i].data.length) {\r\n                    displayFooter = true;\r\n                }\r\n            }\r\n        } else if (i < tableCBInfo.tableEnd) {  // Have not reached the ending control break table\r\n            data = row.data;                    // therefore, copy all the data from the control break table\r\n        } else if (tableCBInfo.tableEnd === i) {    // Have reached the control break table for the end of the pagination\r\n            // This pagination will reach the end of the control break table, so display any footers\r\n            for (let j = 0; j < tableCBInfo.endIndex; j++) {\r\n                data.push (row.data[j]);    // Copy the data to be displayed\r\n                if (j + 1 === controlBreakData[i].data.length) {\r\n                    displayFooter = true;\r\n                }\r\n            }\r\n        } else {  // No more data for the pagination\r\n            return null;\r\n        }\r\n\r\n        // At the end of the data for this pagination, so display the footer\r\n        if (data.length === controlBreakData[i].data.length) {\r\n            displayFooter = true;\r\n        }\r\n\r\n        let keyTable = `cbtable_${number}_${i}`;    // Key for the table using the name of the control break table\r\n        let keyHeader = `cbrow_${number}`;          // Key for the header using the control break table number\r\n        let key = `cbfoot_${number}_${i}`;          // Key for the footer using the control break table name\r\n\r\n        console.log ('render');\r\n        return (    // Render the control break\r\n            <table name={name} className={hoverClassName + \" sw-sst_table\"} key={keyTable}>\r\n                <caption className=\"sw-sst_tableBold\">{row.title}</caption>\r\n                <tbody>\r\n                    <tr key={keyHeader}>\r\n                        {table.map(buildHeaders(false, i))}\r\n                    </tr>\r\n                    {data.map((row) => {\r\n                        cbCount++;\r\n                        return props.eachRowInTable(row, cbCount);\r\n                    })}\r\n                    <tr key={key}>\r\n                        {(displayFooter === true) ? row.footer.map(buildMathFooters) : null}\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        )\r\n    }\r\n\r\n    /******************************************************************************************************************\r\n     *\r\n     * This compares two values to see if they are equal or unequal and returns true if they are equal and false if\r\n     * they are unequal.  This used to determine the control break data.\r\n     *\r\n     * @param k     index into the control break data array\r\n     * @param info  contains the indexes and sort order info into the data for the comparision\r\n     * @param temp  the temporary value to compare to see if the control breaks have changed\r\n     *\r\n     ******************************************************************************************************************/\r\n    function compare(k, info, temp) {\r\n        let found = true;   // Assume to be equal until proven otherwise\r\n        for (let j = 0; j < info.srtOrder.length; j++) {\r\n            if (props.data[info.indexes[k]][table[info.srtOrder[j].col].name] !== temp[table[info.srtOrder[j].col].name]) {\r\n                found = false;  // The values being compared are unequal\r\n            }\r\n        }\r\n\r\n        return found;\r\n    }\r\n\r\n    /********************************************************************************************************************\r\n     *\r\n     * This will build the temporary value that is used to see if control breaks have changed.\r\n     *\r\n     * @param k     index into the control break data array\r\n     * @param info  contains the indexes and sort order info into the data for the comparision\r\n     *\r\n     ******************************************************************************************************************/\r\n    function processTemp(k, info) {\r\n        let temp = {};  // Contains the temporary values\r\n        for (let i = 0; i < info.srtOrder.length; i++) {    // Build the temporary value for a control break change\r\n            temp[table[info.srtOrder[i].col].name] = props.data[info.indexes[k]][table[info.srtOrder[i].col].name];\r\n        }\r\n\r\n        return temp;\r\n    }\r\n\r\n    /*******************************************************************************************************************\r\n     *\r\n     * This will build the title for each control break table.\r\n     *\r\n     * @param k     index into the control break data array\r\n     * @param info  contains the indexes and sort order info into the data for the comparision\r\n     *\r\n     ******************************************************************************************************************/\r\n    function processTitle(k, info) {\r\n        let title = '';\r\n        for (let i = 0; i < info.srtOrder.length; i++) {\r\n            title += `${table[info.srtOrder[i].col].header} ${props.data[info.indexes[k]][table[info.srtOrder[i].col].name]}; `\r\n        }\r\n\r\n        return title;\r\n    }\r\n\r\n    /*******************************************************************************************************************\r\n     *\r\n     * This will set up a blenk footer for each control break table.\r\n     *\r\n     ******************************************************************************************************************/\r\n    function processFooter() {\r\n        let footer = new  Array(table.length);      // Allocate an array for the number of columns in the control break table\r\n        for (let i = 0; i < table.length; i++) {    // Build the blank footer\r\n            footer[i] = [];\r\n        }\r\n\r\n        return footer;\r\n    }\r\n\r\n    /*******************************************************************************************************************\r\n     *\r\n     * This will find the control breaks based on the data and build the control break tables.\r\n     *\r\n     * @param controlBreakInfo  contains whether the column in the table is to be hidden or is a control break\r\n     * @param indexes           indexes into the data\r\n     *\r\n     ******************************************************************************************************************/\r\n    function findCtrlBreak(controlBreakInfo, indexes) {\r\n        let info = sortMultipleCols(controlBreakInfo, indexes); // Sort the columns based on the control break data\r\n        let ctrlBreakData = [];                                 // Contains the control break title, data, and footer\r\n        let startingPos = [0];                                  // Contains where each control break starts in the data\r\n        let pos = 0;                                            // Used to get the title out of the control break data\r\n        let data = [];                                          // The data for the control break;\r\n\r\n        let temp = processTemp (0, info);\r\n\r\n        for (let k = 0; k < info.indexes.length; k++) {\r\n            if (compare(k, info, temp) === true) {  // Check to see if the temporary value and data value are equal\r\n                pos = k;\r\n                data.push(props.data[info.indexes[k]]); // Place the data into the control break data array\r\n                if ((k + 1) === info.indexes.length) {  // At the end of the control break\r\n                    let title = processTitle(k, info);  // Get the control break title and footer\r\n                    let footer = processFooter();\r\n                    ctrlBreakData.push ({ title: title, data: [...data], footer: footer }); // Build the control break data array\r\n                }\r\n            } else {    // Temporary value and dat values are unequal (new control break)\r\n                startingPos.push(k);    // Place the starting position of the new table\r\n\r\n                let title = processTitle(pos, info);    // Get the control break title and footer\r\n                let footer = processFooter();\r\n\r\n                // Build a control break table\r\n                ctrlBreakData.push ({ title: title, data: [...data], footer: footer });\r\n\r\n                data = [];  // Reset the data for the new control break table\r\n                temp = processTemp(k, info);            // Get a new temporary value\r\n                data.push(props.data[info.indexes[k]]); // Place the data in the control break data array\r\n                if ((k + 1) === info.indexes.length) {  // At the end of the control break\r\n                    let title = processTitle(k, info);  // Get the control break title and footer\r\n                    let footer = processFooter();\r\n                    ctrlBreakData.push ({ title: title, data: [...data], footer: footer }); // Build the control break data array\r\n                }\r\n            }\r\n        }\r\n\r\n        if (hasProperty(props, 'startingpos') === true) {\r\n            props.startingPos(startingPos); // Pass the starting positions of the control break tables back to the calling program\r\n        }\r\n        setStartPos(startingPos);\r\n        setControlBreakData(ctrlBreakData);\r\n    }\r\n\r\n    /**************************************************************************************************************************\r\n     *\r\n     * This will turn a control break on in the control break info by assigning the next number in the ctrlBreak field.\r\n     *\r\n     * @param row   row in the control break info array\r\n     * @param i     current index in the control break info array\r\n     *\r\n     **************************************************************************************************************************/\r\n    function controlBreakOn(row, i) {\r\n        let ctrlBreakInfo = [...controlBreakInfo];\r\n\r\n        ctrlBreakInfo[i].ctrlBreak = maxPlusOne(ctrlBreakInfo); // Assign a control break number to the column\r\n        findCtrlBreak(ctrlBreakInfo, indexes);                  // Find the control break title, data, and footer for the contorl break table\r\n        setControlBreakInfo(ctrlBreakInfo);\r\n        setHtmlDropDown(false);                                 // Hide the dropdown for the column\r\n    }\r\n\r\n    /**************************************************************************************************************************\r\n     *\r\n     * This will turn a control break off in the control break info by assigning the next number in the ctrlBreak field.\r\n     *\r\n     * @param row   row in the control break info array\r\n     * @param i     current index in the control break info array\r\n     *\r\n     **************************************************************************************************************************/\r\n    function controlBreakOff(row, i) {\r\n        let ctrlBreakInfo = [...controlBreakInfo];\r\n\r\n        ctrlBreakInfo[i].ctrlBreak = 0;         // Turn off the control break\r\n        findCtrlBreak(ctrlBreakInfo, indexes);  // Find the control break title, data, and footer for the contorl break table\r\n        setControlBreakInfo(ctrlBreakInfo);\r\n        setHtmlDropDown(false);                 // Hide the dropdown for the column\r\n    }\r\n\r\n    /**************************************************************************************************************************\r\n     *\r\n     * This will hide the drop down in the column header.\r\n     *\r\n     **************************************************************************************************************************/\r\n    function cancel() {\r\n        setHtmlDropDown(false); // Hide the dropdown for the column\r\n    }\r\n\r\n    /**************************************************************************************************************************\r\n     *\r\n     * This will sum a numeric column in the table and place the sum at the bottom of the table.\r\n     *\r\n     * @param   row the column information from the table props\r\n     * @param   i   current index into the table props\r\n     *\r\n     ***************************************************************************************************************************/\r\n    function summationFunct(row, i) {\r\n        let sum = 0;    // The sum of the column\r\n        if (isControlBreak(controlBreakInfo) === true) {    // There are control breaks\r\n            for (let j = 0; j < controlBreakData.length; j++) { // Spin through the control break tables\r\n                sum = 0;\r\n                // Sum up the column for each row\r\n                for (let k = 0; k < controlBreakData[j].data.length; k++) {\r\n                    sum += controlBreakData[j].data[k][row.name];\r\n                }\r\n                controlBreakData[j].footer[i].push(`Sum: ${sum}`);  // Place the sum into the footer\r\n            }\r\n        } else {    // Regular search sort table to sum\r\n            let locFooters = [...footers];  // Current footers\r\n\r\n            // Sum the column for each row\r\n            for (let j = 0; j < props.data.length; j++) {\r\n                sum += props.data[j][row.name];\r\n            }\r\n\r\n            locFooters[i].push(`Sum: ${sum}`);    // Place the sum into the footer\r\n            setFooters(locFooters);\r\n        }\r\n    }\r\n\r\n    /**************************************************************************************************************************\r\n     *\r\n     * This will calculate the average of a numeric column in the table and place the average at the bottom of the table.\r\n     *\r\n     * @param   row the column information from the table props\r\n     * @param   i   current index into the table props\r\n     *\r\n     ***************************************************************************************************************************/\r\n    function averageFunct(row, i) {\r\n        let sum = 0;    // The sum of the column\r\n        let count = 0;  // The number of numeric values (number of rows)\r\n        if (isControlBreak(controlBreakInfo) === true) {    // There are control breaks\r\n            for (let j = 0; j < controlBreakData.length; j++) { // Spin through the control break tables\r\n                sum = 0;\r\n                count = 0;\r\n                // Sum the column for each row\r\n                for (let k = 0; k < controlBreakData[j].data.length; k++) {\r\n                    sum += controlBreakData[j].data[k][row.name];\r\n                    count++;\r\n                }\r\n                controlBreakData[j].footer[i].push(`Average: ${(sum / count).toFixed(mathDecimal)}`);   // Place the average into the footer\r\n            }\r\n        } else {    // Regular search sort table to calculate the average\r\n            let locFooters = [...footers];  // Current footers\r\n\r\n            // Sum the column for each row\r\n            for (let j = 0; j < props.data.length; j++) {\r\n                sum += props.data[j][row.name];\r\n                count++;\r\n            }\r\n\r\n            locFooters[i].push(`Average: ${(sum / count).toFixed(mathDecimal)}`);   // Place the sum into the footer\r\n            setFooters(locFooters);\r\n        }\r\n    }\r\n\r\n    /**************************************************************************************************************************\r\n     *\r\n     * This will count the number of rows in the table and place the count in this column at the bottom of the table.\r\n     *\r\n     * @param   row the column information from the table props\r\n     * @param   i   current index into the table props\r\n     *\r\n     ***************************************************************************************************************************/\r\n    function countFunct(row, i) {\r\n        let count = 0;  // Counts the number of rows\r\n        if (isControlBreak(controlBreakInfo) === true) {    // There are control breaks\r\n            for (let j = 0; j < controlBreakData.length; j++) { // Spin through the control break tables\r\n                count = 0;\r\n                // Count the number of rows\r\n                for (let k = 0; k < controlBreakData[j].data.length; k++) {\r\n                    count++;\r\n                }\r\n                controlBreakData[j].footer[i].push(`Count: ${count}`);  // Place the counter into the footer\r\n            }\r\n        } else {    // Regular search sort table\r\n            let locFooters = [...footers];  // Current footers\r\n\r\n            // Count the number of rows\r\n            for (let j = 0; j < props.data.length; j++) {\r\n                count++;\r\n            }\r\n\r\n            locFooters[i].push(`Count: ${count}`);  // Place the counter into the footer\r\n            setFooters(locFooters);\r\n        }\r\n    }\r\n\r\n    /**************************************************************************************************************************\r\n     *\r\n     * This will count the distinct number of rows for that column in the table and place the count in this column at the\r\n     * bottom of the table.\r\n     *\r\n     * @param   row the column information from the table props\r\n     * @param   i   current index into the table props\r\n     *\r\n     ***************************************************************************************************************************/\r\n    function countDistinctFunct(row, i) {\r\n        let count = 0;  // The distinct (unique) count for the column\r\n        if (isControlBreak(controlBreakInfo) === true) {    // There is a control break\r\n            for (let j = 0; j < controlBreakData.length; j++) { // Spin through the control break tables\r\n                count = 0;\r\n                for (let k = 0; k < controlBreakData[j].data.length; k++) { // Spin through the rows of data\r\n                    let found = false;\r\n                    for (let m = 0; m < k; m++) {   // Spin through the previous rows in the table to see if a value for that column already exists\r\n                        if (mathIgnoreCase === true && typeof controlBreakData[j].data[k][row.name] === 'string') {\r\n                            // Check to see This value has already been counted after being converted to uppercase\r\n                            if (controlBreakData[j].data[k][row.name].toUpperCase() === controlBreakData[j].data[m][row.name].toUpperCase() && found === false) {\r\n                                found = true;\r\n                            }\r\n                        } else {    // Values is not a string and the case is ignored\r\n                            if (controlBreakData[j].data[k][row.name] === controlBreakData[j].data[m][row.name] && found === false) {\r\n                                found = true;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (found === false) {  // Could not find this number already in the data; therefore, count it\r\n                        count++;\r\n                    }\r\n                }\r\n                controlBreakData[j].footer[i].push(`Distinct Count: ${count}`); // Place the distinct count into the footer\r\n            }\r\n        } else {    // Regular search sort table\r\n            let locFooters = [...footers];  // Current footers\r\n\r\n            for (let j = 0; j < props.data.length; j++) {\r\n                let found = false;\r\n                for (let m = 0; m < j; m++) {   // Spin through the previous rows in the table to see if a value for that column already exists\r\n                    if (mathIgnoreCase === true && typeof props.data[j][row.name] === 'string') {\r\n                        // Check to see This value has already been counted after being converted to uppercase\r\n                        if (props.data[j][row.name].toUpperCase() === props.data[m][row.name].toUpperCase() && found === false) {\r\n                            found = true;\r\n                        }\r\n                    } else {    // Values is not a string and the case is ignored\r\n                        if (props.data[j][row.name] === props.data[m][row.name] && found === false) {\r\n                            found = true;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (found === false) {  // Could not find this number already in the data; therefore, count it\r\n                    count++;\r\n                }\r\n            }\r\n\r\n            locFooters[i].push(`Distinct Count: ${count}`); // Place the distinct count into the footer\r\n            setFooters(locFooters);\r\n        }\r\n    }\r\n\r\n    /**************************************************************************************************************************\r\n     *\r\n     * This will minimum column value in a column in the table and place the minimum value in this column at the\r\n     * bottom of the table.\r\n     *\r\n     * @param   row the column information from the table props\r\n     * @param   i   current index into the table props\r\n     *\r\n     ***************************************************************************************************************************/\r\n    function minimumFunct(row, i) {\r\n        let minimum = null; // The minimum value for the column\r\n        if (isControlBreak(controlBreakInfo) === true) {    // There is a control break\r\n            for (let j = 0; j < controlBreakData.length; j++) { // Spin through the data to find the minimum\r\n                minimum = controlBreakData[j].data[0][row.name];    // Set the first value in the column to the minimum\r\n                for (let k = 0; k < controlBreakData[j].data.length; k++) { // Spin through the data to find the minimum value in a column\r\n                    if (mathIgnoreCase === true && typeof controlBreakData[j].data[k][row.name] === 'string') {\r\n                        // Determine if a new minimum was found\r\n                        if (controlBreakData[j].data[k][row.name].toUpperCase() < minimum.toUpperCase()) {\r\n                            minimum = controlBreakData[j].data[k][row.name];\r\n                        }\r\n                    } else {    // Ignore the case\r\n                        if (controlBreakData[j].data[k][row.name] < minimum) {  // Determine if a new minimum was found\r\n                            minimum = controlBreakData[j].data[k][row.name];\r\n                        }\r\n                    }\r\n                }\r\n                controlBreakData[j].footer[i].push(`Minimum: ${minimum}`);  // Place the minimum value into the footer\r\n            }\r\n        } else {    // Regular search sort table\r\n            let locFooters = [...footers];  // Current footers\r\n\r\n            minimum = props.data[0][row.name];  // Set the first value in the column to the minimum\r\n            for (let j = 0; j < props.data.length; j++) {   // Spin through the data to find the minimum value in a column\r\n                if (mathIgnoreCase === true && typeof props.data[j][row.name] === 'string') {\r\n                    // Determine if a new minimum was found\r\n                    if (props.data[j][row.name].toUpperCase() < minimum.toUpperCase()) {\r\n                        minimum = props.data[j][row.name];\r\n                    }\r\n                } else {    // Ignore the case\r\n                    if (props.data[j][row.name] < minimum) {    // Determine if a new minimum was found\r\n                        minimum = props.data[j][row.name];\r\n                    }\r\n                }\r\n            }\r\n\r\n            locFooters[i].push(`Minimum: ${minimum}`);  // Place the minimum value into the footer\r\n            setFooters(locFooters);\r\n        }\r\n    }\r\n\r\n    /**************************************************************************************************************************\r\n     *\r\n     * This will maximum column value in a column in the table and place the maximum value in this column at the\r\n     * bottom of the table.\r\n     *\r\n     * @param   row the column information from the table props\r\n     * @param   i   current index into the table props\r\n     *\r\n     ***************************************************************************************************************************/\r\n    function maximumFunct(row, i) {\r\n        let maximum = null; // The maximum value for the column\r\n        if (isControlBreak(controlBreakInfo) === true) {    // There is a control break\r\n            for (let j = 0; j < controlBreakData.length; j++) { // Spin through the data to find the maximum\r\n                maximum = controlBreakData[j].data[0][row.name];    // Set the first value in the column to the maximum\r\n                for (let k = 0; k < controlBreakData[j].data.length; k++) { // Spin through the data to find the maximum value in a column\r\n                    if (mathIgnoreCase === true && typeof controlBreakData[j].data[k][row.name] === 'string') {\r\n                        if (controlBreakData[j].data[k][row.name].toUpperCase() > maximum.toUpperCase()) {\r\n                            // Determine if a new maximum was found\r\n                            maximum = controlBreakData[j].data[k][row.name];\r\n                        }\r\n                    } else {    // Ignore the case\r\n                        if (controlBreakData[j].data[k][row.name] > maximum) {  // Determine if a new maximum was found\r\n                            maximum = controlBreakData[j].data[k][row.name];\r\n                        }\r\n                    }\r\n                }\r\n                controlBreakData[j].footer[i].push(`Maximum: ${maximum}`);  // Place the maximum value into the footer\r\n            }\r\n        } else {\r\n            let locFooters = [...footers];  // Current footers\r\n\r\n            maximum = props.data[0][row.name];  // Set the first value in the column to the maximum\r\n            for (let j = 0; j < props.data.length; j++) {\r\n                if (mathIgnoreCase === true && typeof props.data[j][row.name] === 'string') {\r\n                    // Determine if a new maximum was found\r\n                    if (props.data[j][row.name].toUpperCase() > maximum.toUpperCase()) {\r\n                        maximum = props.data[j][row.name];\r\n                    }\r\n                } else {    // Ignore the case\r\n                    if (props.data[j][row.name] > maximum) {    // Determine if a new maximum was found\r\n                        maximum = props.data[j][row.name];\r\n                    }\r\n                }\r\n            }\r\n\r\n            locFooters[i].push(`Maximum: ${maximum}`);  // Place the minimum value into the footer\r\n            setFooters(locFooters);\r\n        }\r\n    }\r\n\r\n    /**************************************************************************************************************************\r\n     *\r\n     * This will find the median value for a column in the table and place the median value in this column at the\r\n     * bottom of the table.\r\n     *\r\n     * @param   row the column information from the table props\r\n     * @param   i   current index into the table props\r\n     *\r\n     ***************************************************************************************************************************/\r\n    function medianFunct(row, i) {\r\n        let median = null;  // Median value\r\n        let middle = 0;     // Indicates the middle of the table to find the median\r\n        let data = null;    // Sorted data for the table to determine the median\r\n        if (isControlBreak(controlBreakInfo) === true) {    // There is a control break\r\n            for (let j = 0; j < controlBreakData.length; j++) { // Spin through the data to find the median value\r\n\r\n                let data = [...controlBreakData[j].data];   // Copy the data for the control break\r\n                data.sort (function (item1, item2) {    // Sort the data inorder to find the median\r\n                    if (item1[row.name] < item2[row.name]) {\r\n                        return -1;\r\n                    } else if (item1[row.name] > item2[row.name]) {\r\n                        return 1;\r\n                    } else {\r\n                        return 0;\r\n                    }\r\n                })\r\n\r\n                if (data.length % 2 === 0) {    // There is an even amount of numbers in the column\r\n                    middle = parseInt(data.length / 2); // Find the middle of the data array\r\n                    // Calculate the median by taking the average of the two numbers\r\n                    median = ((data[middle - 1][row.name] + data[middle][row.name]) / 2).toFixed(mathDecimal);\r\n                } else {    // There are an odd amount of numbers in the column\r\n                    middle = parseInt(data.length / 2); // Find the middle of the data array and grab that number\r\n                    median = data[middle][row.name];    // for the median\r\n                }\r\n\r\n                controlBreakData[j].footer[i].push(`Median: ${median}`);    // Place the median value into the footer\r\n            }\r\n        } else {    // Regular search sort table\r\n            let locFooters = [...footers];  // Current footers\r\n\r\n            median = null;\r\n            middle = 0;\r\n            data = [...props.data]; // Copy the data in order to find the median\r\n            data.sort (function (item1, item2) {        // Sort the data inorder to find the median\r\n                if (item1[row.name] < item2[row.name]) {\r\n                    return -1;\r\n                } else if (item1[row.name] > item2[row.name]) {\r\n                    return 1;\r\n                } else {\r\n                    return 0;\r\n                }\r\n            })\r\n\r\n            if (data.length % 2 === 0) {    // There is an even amount of numbers in the column\r\n                middle = parseInt(data.length / 2); // Find the middle of the data array\r\n                // Calculate the median by taking the average of the two numbers\r\n                median = ((data[middle - 1][row.name] + data[middle][row.name]) / 2).toFixed(mathDecimal);\r\n            } else {    // There are an odd amount of numbers in the column\r\n                middle = parseInt(data.length / 2); // Find the middle of the data array and grab that number\r\n                median = data[middle][row.name];    // for the median\r\n            }\r\n\r\n            locFooters[i].push(`Median: ${median}`);    // Place the median value into the footer\r\n            setFooters(locFooters);\r\n        }\r\n    }\r\n\r\n    /**************************************************************************************************************************\r\n     *\r\n     * This is called when the user presses the Apply button to apply the aggregation to the column from the\r\n     * dropDown over the column.\r\n     *\r\n     * @param   row the column information from the table props\r\n     * @param   i   current index into the table props\r\n     *\r\n     ***************************************************************************************************************************/\r\n    function applyFunction(row, i) {\r\n        // Make sure an aggregation was selected from the pull down choice box\r\n        let localInvalid = [...invalid];\r\n        if (functSelect === '' || functSelect === null || functSelect === undefined) {\r\n            localInvalid = setInvalidScreen(localInvalid, AGGREGATE, 'An aggregate must be entered');\r\n            setInvalid(localInvalid);\r\n            return;\r\n        }\r\n\r\n        if (functSelect === 'Summation') {\r\n            summationFunct (row, i);\r\n        } else if (functSelect === 'Average') {\r\n            averageFunct(row, i);\r\n        } else if (functSelect === 'Count') {\r\n            countFunct(row, i);\r\n        } else if (functSelect === 'Count Distinct') {\r\n            countDistinctFunct(row, i);\r\n        } else if (functSelect === 'Minimum') {\r\n            minimumFunct(row, i);\r\n        } else if (functSelect === 'Maximum') {\r\n            maximumFunct(row, i);\r\n        } else if (functSelect === 'Median') {\r\n            medianFunct(row, i);\r\n        }\r\n        setHtmlDropDown(false); // Hide the dropDown over the column\r\n    }\r\n\r\n    /*************************************************************************************************************************\r\n     *\r\n     * This will display the dropDown above the column header.  The single page with a circle X will hide the column.\r\n     * The single page by itself will show the column.  The multiple pages will do a control break on that column.  The\r\n     * multiple pages with a circle X will undo the control break for that column.  The circle X will cancel the drop down.\r\n     * The choice box will allow the user to select from a list of aggregations base on the type of data in the column.  The\r\n     * apply button will do the aggregation operation selected and place the result a the bottom of the column.\r\n     *\r\n     * @param   row the column information from the table props\r\n     * @param   i   current index into the table props\r\n     *\r\n     ***************************************************************************************************************************/\r\n    function showDropDown(row, i) {\r\n        let functionList = null;\r\n\r\n        if (hasProperty(row, 'type') === true) {    // The type of data for the column is table props\r\n            if (row.type === 'string') {\r\n                functionList = ['', 'Count', 'Count Distinct', 'Minimum', 'Maximum']\r\n            } else {\r\n                functionList = ['', 'Summation', 'Average', 'Count', 'Count Distinct', 'Minimum', 'Maximum', 'Median'];\r\n            }\r\n        } else if (typeof props.data[0][row.name] === 'string') {\r\n            functionList = ['', 'Count', 'Count Distinct', 'Minimum', 'Maximum']\r\n        } else if (typeof props.data[0][row.name] === 'number') {\r\n            functionList = ['', 'Summation', 'Average', 'Count', 'Count Distinct', 'Minimum', 'Maximum', 'Median'];\r\n        }\r\n\r\n        // Render the drop down\r\n        return (\r\n            <div className=\"sw-sst_dropDownDiv\">\r\n                {(controlBreakInfo[i].hidden === false) ?\r\n                    <span className=\"sw-sst_showToolTip\">\r\n                        <button name=\"hidden\" onClick={() => hideColumn(row, i)} className=\"sw-sst_dropDownButton\" >\uD83D\uDDCF\u2297</button>\r\n                        <span className=\"sw-sst_toolTip sw-sst_top\">Hide Column</span>\r\n                    </span> :\r\n                     <span className=\"sw-sst_showToolTip\">\r\n                        <button name=\"show\" onClick={() => showColumn(row, i)} className=\"sw-sst_dropDownButton\" >\uD83D\uDDCF</button>\r\n                        <span className=\"sw-sst_toolTip sw-sst_top\">Show Column</span>\r\n                    </span>}\r\n                {(controlBreakInfo[i].ctrlBreak === 0) ?\r\n                    <span className=\"sw-sst_showToolTip\">\r\n                        <button name=\"controlBreakOn\" onClick={() => controlBreakOn(row, i)} className=\"sw-sst_dropDownButton\" >\uD83D\uDDD0</button>\r\n                        <span className=\"sw-sst_toolTip sw-sst_top\">Control Break</span>\r\n                    </span> :\r\n                    <span className=\"sw-sst_showToolTip\">\r\n                        <button name=\"controlBreakOff\" onClick={() => controlBreakOff(row, i)} className=\"sw-sst_dropDownButton\" >\uD83D\uDDD0\u2297</button>\r\n                        <span className=\"sw-sst_toolTip sw-sst_top\">Undo Control Break</span>\r\n                    </span>}\r\n                <span className=\"sw-sst_showToolTip\">\r\n                    <button name=\"cancel\" onClick={cancel} className=\"sw-sst_dropDownButton\">\u2297</button><br />\r\n                    <span className=\"sw-sst_toolTip sw-sst_top\">Cancel</span>\r\n                </span>\r\n                <span className=\"sw-invalid_checkForError\">\r\n                    <Choice choices={functionList} name=\"functSelect\" value={functSelect}\r\n                        onChange={(event) => setFunctSelect(event.target.value)}\r\n                        onClick={() => wasClickedScreen(invalid, AGGREGATE, setInvalid)}\r\n                        className={\"sw-sst-dropDown_choice\" + processInvalidStyleScreen(invalid, AGGREGATE)} />\r\n                    {(isInvalid(invalid[AGGREGATE], -1) === true) ? <span className=\"sw-invalid_errMessage\">{invalid[AGGREGATE].message}</span> : null }\r\n                </span>\r\n                <button name=\"apply\" onClick={() => applyFunction(row, i)} className=\"sw-sst_dropButton\">Apply</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /****************************************************************************************************************************\r\n     *\r\n     * This determines which column the drop down menu is displayed over.\r\n     *\r\n     * @param   row the column information from the table props\r\n     * @param   i   current index into the table props\r\n     *\r\n     ***************************************************************************************************************************/\r\n    function displayDropDown(row, i) {\r\n        setDropDownIndex(i);    // Indicates which column in the table the drop down should appear above\r\n        setFunctSelect('');     // No aggregate function has been selected\r\n        setHtmlDropDown(true);  // Display the drop down over the appropriate column\r\n    }\r\n\r\n\r\n    /*********************************************************************************************************************\r\n     *\r\n     * The is will place the headers in the table object into the table.\r\n     *\r\n     * @param {*} row           the row in the table props which contains the name of the header\r\n     * @param {*} i             the index of the column in the table\r\n     * @param {*} main          indicates whether this is the main header, which will be displayed in a certain color\r\n     * @param {*} tableIndex    indicates the column in which drop down should appear\r\n     *\r\n     *********************************************************************************************************************/\r\n    function buildHeaders(main, tableIndex) {\r\n        const f = (row, i) => {\r\n            let key = 'cell_' + i;\r\n            let btnImg = '\\u2BC8';\r\n            // let filterKey = 'filter_' + i;\r\n            let filterName = row.header + '_filter';\r\n            let ctrlBreak = false;\r\n\r\n            if (isControlBreak(controlBreakInfo) === true) {\r\n                ctrlBreak = true;\r\n            }\r\n\r\n            let doSort = false;\r\n            if ((main === true && ctrlBreak === false) || (main === false && ctrlBreak === true)) {\r\n                doSort = true;\r\n            }\r\n\r\n            if (doSort === true && controlBreakInfo.length > 0 && controlBreakInfo[i].hidden === true) {\r\n                return;\r\n            }\r\n\r\n            // console.log(`buildHeaders() filter[${filter.length}]:`, JSON.stringify(filter));\r\n\r\n            let fontColor = null;\r\n            if (main === true) {\r\n                fontColor = \"sw-sst_headerColor\";\r\n            }\r\n\r\n            if (table[i].sort === true && sortOrder[i] !== 'N' && (doSort === true)) {\r\n                // After the sort was done, it flips the sort order; therefore, if it is\r\n                // now a D, that means it was sorted in ascending order previously.  If\r\n                // it is now an A, that means it was sorted in descending order previously.\r\n                if (sortOrder[i] === 'A') {\r\n                    btnImg = '\\u2BC5';    // Up arrow\r\n                } else if (sortOrder[i] === 'D') {\r\n                    btnImg = '\\u2BC6';    // Down arrow\r\n                } else if (sortOrder[i] === 'N') {\r\n                    btnImg = '\\u2BC8';    // Right arrow\r\n                }\r\n            }\r\n            // Filter is turned on\r\n            if (filterOn === 'Y' && hasProperty(props,'nofilter') === false && main === true) {\r\n                let filterStyle = processInvalidStyleScreen(invalid, FILTER, 'sw-sst_widthStyle');\r\n\r\n                if (row.sort === false || hasProperty(props,'nosort') === true) { // No sorting, so no onClick handler\r\n                    if (row.search === false) { // No searching on this field, so no filtering on it also\r\n                        if (row.dropDown === true && main === true) {\r\n                            return (<th key={key} className={headerStyle}>\r\n                                        {(i === dropDownIndex && htmlDropDown === true) ? showDropDown(row, i) : null}\r\n                                        <button className={\"sw-sst_headerButton \" + fontColor} onClick={() => displayDropDown(row, i)}>{row.header}</button>\r\n                                    </th>)  // Display the header only\r\n                        } else {\r\n                            return (<th key={key} className={headerStyle}>\r\n                                        <div className={fontColor}>{row.header}</div>\r\n                                    </th>)  // Display the header only\r\n                        }\r\n                    } else {    // Can filter; therefore, display the input field\r\n                        return (\r\n                            <th key={key} className={headerStyle + ' sw-sst_bottom'}>\r\n                                {(i === dropDownIndex && main === true && htmlDropDown === true) ? showDropDown(row, i) : null}\r\n                                {(row.dropDown === true && main === true) ?\r\n                                    <button className={\"sw-sst_headerButton\" + fontColor} onClick={() => displayDropDown(row, i)}>{row.header}</button> :\r\n                                    <div className={fontColor}>{row.header}</div>}\r\n                                <span className=\"sw-invalid_checkForError\">\r\n                                    {(hasProperty(props, 'choice') === false) ?\r\n                                        <input type=\"text\" name={filterName} className={filterStyle} value={filter[i]} onChange={(event) => processFilter(event.target.value, i)} disabled={props.error} /> :\r\n                                        <ChoiceText list={\"dropDown_\" + i} choices={columns[i]} name={filterName} className={filterStyle} value={filter[i]} onChange={(event) => processFilter(event.target.value, i)} disabled={props.error} />}\r\n                                </span>\r\n                            </th>\r\n                        );\r\n                    }\r\n                } else {    // Sorting on the column is allowed\r\n                    if (row.search === false) { // No searching or filtering on the column, so display header only\r\n                        return (\r\n                            <th key={key} className={headerStyle}>\r\n                                {(i === dropDownIndex && main === true && htmlDropDown === true) ? showDropDown(row, i) : null}\r\n                                {(row.dropDown === true && main === true) ? <button className={\"sw-sst_headerButton \" + fontColor} onClick={() => displayDropDown(row, i)}>{row.header}</button> :\r\n                                    <div className={fontColor}>{row.header}</div>}\r\n                                {(doSort === true) ? <button name=\"sort\" onClick={() => sortClicked(row.name, 'X', indexes, tableIndex)} className=\"sw-sst_buttonStyle2\">{btnImg}</button> : null }\r\n                            </th>\r\n                        );\r\n                    } else {    // Searching and filtering is allowed\r\n                        return (    // Display header and input field for filtering\r\n                            <th key={key} className={headerStyle + ' sw-sst_bottom'}>\r\n                                {(i === dropDownIndex && main === true && htmlDropDown === true) ? showDropDown(row, i) : null}\r\n                                <div>\r\n                                    {(row.dropDown === true && main === true) ? <button className={\"sw-sst_headerButton \" + fontColor} onClick={() => displayDropDown(row, i)}>{row.header}</button> :\r\n                                        <div className={fontColor}>{row.header}</div>}\r\n                                    {(doSort === true) ? <button name=\"sort\" onClick={() => sortClicked(row.name, 'X', indexes, tableIndex)} className=\"sw-sst_buttonStyle2\">{btnImg}</button> : null }\r\n                                </div>\r\n                                <span className=\"sw-invalid_checkForError\">\r\n                                    {(hasProperty(props, 'choice') === false) ?\r\n                                        <input type=\"text\" name={filterName} className={filterStyle} value={filter[i]} onChange={(event) => processFilter(event.target.value, i)} disabled={props.error} /> :\r\n                                        <ChoiceText list={\"dropDown\" + i} choices={columns[i]} name={filterName} className={filterStyle} value={filter[i]} onChange={(event) => processFilter(event.target.value, i)} disabled={props.error} /> }\r\n                                </span>\r\n                            </th>\r\n                        );\r\n                    }\r\n                }\r\n            // Filtering is off or not allowed\r\n            } else if (row.sort === false || hasProperty(props,'nosort') === true) { // No sorting, so no onClick handler\r\n                return (<th key={key} className={headerStyle}>\r\n                                {(i === dropDownIndex && main === true && htmlDropDown === true) ? showDropDown(row, i) : null}\r\n                                {(row.dropDown === true && main === true) ? <button className={fontColor} onClick={() => displayDropDown(row, i)}>{row.header}</button> :\r\n                                    <div className={fontColor}>{row.header}</div>}\r\n                        </th> ); // Display the header only\r\n            } else {    // Sorting on the column is allowed\r\n                return (\r\n                    <th key={key} className={headerStyle}>\r\n                        {(i === dropDownIndex && main === true && htmlDropDown === true) ? showDropDown(row, i) : null}\r\n                        {(row.dropDown === true && main === true) ? <button className={\"sw-sst_headerButton \" + fontColor} onClick={() => displayDropDown(row, i)}>{row.header}</button> :\r\n                            <div className={fontColor}>{row.header}</div>}\r\n                        {(doSort === true) ? <button name=\"sort\" onClick={() => sortClicked(row.name, 'X', indexes, tableIndex)} className=\"sw-sst_buttonStyle2\">{btnImg}</button> : null }\r\n                    </th>\r\n                );\r\n            }\r\n        }\r\n\r\n        return f\r\n    }\r\n\r\n    /****************************************************************************************************\r\n     *\r\n     * This will place a line in the last row of the table, which can be used for totals of each column.\r\n     *\r\n     * @param {*} row   represnts the value to place in each column of the table\r\n     * @param {*} i     index into the mapped array\r\n     *\r\n     *****************************************************************************************************/\r\n    function buildFooter(row, i) {\r\n        let key = 'footer_' + i;\r\n\r\n        return (    // Place a value in the column\r\n            <td key={key} className={footerStyle}>{row}</td>\r\n        )\r\n    }\r\n\r\n    /******************************************************************************************************\r\n     *\r\n     * This will place the aggregate footers at the bottom of each column if there are any.\r\n     *\r\n     * @param row   row in the control break data array that contains the footer\r\n     * @param i     current index into the control break data array\r\n     *\r\n     ******************************************************************************************************/\r\n    function buildMathFooters(row, i) {\r\n        if (row === undefined || row === null) {    // No footer for this column, so return a blank cell\r\n            return <td></td>;\r\n        }\r\n\r\n        let key = 'mathfooter_' + i;\r\n\r\n        let foot = [];  // Contains all the information in the footer with <br /> between each aggregate footer\r\n        for (let j = 0; j < row.length; j++) {\r\n            foot.push(<span>{row[j]}<br /></span>);\r\n        }\r\n\r\n        return (    // Place a value in the column\r\n            <td key={key} className={footerStyle}>{foot}</td>\r\n        )\r\n    }\r\n\r\n    /***************************************************************************************\r\n     *\r\n     * This will turn filtering on or off.  If filtering is on, the following will occur:\r\n     *  1.  It will display the filter input fields below each header (done in buildHeaders)\r\n     *  2.  Place an index on the data under the filterIndex field.  Used to copy the data\r\n     *      from the filtering data to the main data.\r\n     *  3.  Store a copy of the main data.\r\n     *  4.  Enable the Filter button\r\n     *\r\n     * If filtering is off, the following will occur:\r\n     *  1.  Copy the filtered data back to the main data using the filter index.\r\n     *  2.  Remove the filtered data\r\n     *  3.  Copy the main data back\r\n     *\r\n     * @param {*} value inidicates whether filtering is on or off\r\n     *\r\n     *****************************************************************************************/\r\n    function processFilterOn(value) {\r\n        setFilterOn(value);\r\n\r\n        if (value === 'Y') {    // Filter is on\r\n            clearSetBackground(0, false);\r\n        } else {\r\n            setFilterPressed(false);        // Disable the filter button\r\n        }\r\n\r\n        if (value !== 'Y' && isControlBreak(controlBreakInfo) === true) {\r\n            findCtrlBreak(controlBreakInfo, origIndexes);\r\n        } else {\r\n            setIndex(origIndexes, true);\r\n            resetSortOrder();\r\n        }\r\n    }\r\n\r\n    /****************************************************************************************\r\n     *\r\n     * This will gather the data entered in the filter input boxes into an array.\r\n     *\r\n     * @param {*} value the value entered in a filter input box\r\n     * @param {*} i     the index into the array to store the value in the array\r\n     *\r\n     *****************************************************************************************/\r\n    function processFilter(value, i) {\r\n        let local = [...filter];    // The filter array for the filter input boxes\r\n\r\n        local[i] = value;\r\n\r\n        // console.log(`processFilter() local[${local.length}]`, JSON.stringify(local));\r\n\r\n        setFilter(local);\r\n    }\r\n\r\n    /******************************************************************************************\r\n     *\r\n     * This will make sure that the user entered at least one value in one of the filter\r\n     * input boxes.  This is called when the user presses the Filter button.\r\n     *\r\n     ******************************************************************************************/\r\n    function filterValidate() {\r\n        let localInvalid = [...invalid];\r\n\r\n        localInvalid[FILTER].validity = false;\r\n        localInvalid[FILTER].display = false;\r\n\r\n        // Search though the filter array to find a value\r\n        for (let i = 0; i < filter.length; i++) {\r\n            if (filter[i] !== '') { // There is a value\r\n                return true;\r\n            }\r\n        }\r\n\r\n        // No values for filtering were entered\r\n        localInvalid = setInvalidScreen (localInvalid, FILTER, '');\r\n        localInvalid[FILTER].display = false;\r\n\r\n        setInvalid(localInvalid);\r\n\r\n        setAlertMessage('A filter value must be entered in at least one filter box');\r\n        setShowAlert(true);\r\n\r\n        return false;\r\n    }\r\n\r\n    /***************************************************************************************\r\n     *\r\n     * This will filter the data and display it on the screen.\r\n     *\r\n     ***************************************************************************************/\r\n    function filterButton() {\r\n        // Make sure filter values were entered\r\n        if (filterValidate() === false) {\r\n            return;\r\n        }\r\n\r\n        let data = props.data;  // The data to filter\r\n        let newData = [];       // The filtered data\r\n        let indexing = [];      // List of indexes that indicate which filter input boxes have data\r\n        let found = [];         // Indicates whether that filter input box found data to filter\r\n        let count = 0;          // counts the number of filtered data\r\n        let done = false;       // Indicates that we are done filtering that data element\r\n\r\n        // Build the indexes in which the user entered data in the filter input box\r\n        for (let i = 0; i < table.length; i++) {\r\n            if (filter[i] !== '') {\r\n                indexing.push(i);\r\n            }\r\n        }\r\n\r\n        let foundDate = false;\r\n\r\n        // Spin through the data and see if it meets the filter criteria\r\n        for (let i = 0; i < indexes.length; i++) {\r\n            found = [];     // Empty the found array for the next data element\r\n            done = false;\r\n            // Spin through the filter input boxes to see if the data element matches\r\n            for (let j = 0; j < indexing.length && done === false; j++) {\r\n                foundDate = false;\r\n                // Find if the index is in the date table\r\n                if (hasProperty(table[indexing[j]], 'dataDate') && hasProperty(table[indexing[j]], 'filterDate')) {\r\n                    foundDate = true;\r\n                }\r\n\r\n                // The data field is blank or has no value\r\n                if (data[indexes[i]][table[indexing[j]].name] === null ||\r\n                    data[indexes[i]][table[indexing[j]].name] === undefined) {\r\n                    found.push(false);\r\n                    done = true;\r\n                } else if (foundDate === true) {    // The field contains a date\r\n                    let dataPart = null;\r\n                    let filterPart = null;\r\n\r\n                    // Convert the format for the data part\r\n                    if (table[indexing[j]].dataDate === 'MM/DD/YYYY') {\r\n                        dataPart = convertDate2(data[indexes[i]][table[indexing[j]].name], '/', 1);\r\n                    } else if (table[indexing[j]].dataDate === 'MM-DD-YYYY') {\r\n                        dataPart = convertDate2(data[indexes[i]][table[indexing[j]].name], '-', 1);\r\n                    } else if (table[indexing[j]].dataDate === 'MM/DD/YYYY HH:MM:SS') {\r\n                        dataPart = convertDateTime(data[indexes[i]][table[indexing[j]].name], '/', 1);\r\n                    } else if (table[indexing[j]].dataDate === 'MM-DD-YYYY HH:MM:SS') {\r\n                        dataPart = convertDateTime (data[indexes[i]][table[indexing[j]].name], '-', 1);\r\n                    } else if (table[indexing[j]].dataDate === 'YYYY-MM-DDTHH:MM:SS.SSS') {\r\n                        dataPart = convertDateTimeReg (data[indexes[i]][table[indexing[j]].name]);\r\n                    } else {\r\n                        dataPart = data[indexes[i]][table[indexing[j]].name];\r\n                    }\r\n\r\n                    // Convert the format for the filter part\r\n                    if (table[indexing[j]].filterDate === 'MM/DD/YYYY') {\r\n                        if (filter[indexing[j]].length === 'MM/DD/YYYY'.length) {\r\n                            filterPart = convertDate2(filter[indexing[j]], '/', 1);\r\n                        } else if (filter[indexing[j]].length === 'MM/YYYY'.length && filter[indexing[j]].indexOf('/') !== -1) {\r\n                            filterPart = convertDate2(filter[indexing[j]], '/', 2);\r\n                        } else {\r\n                            filterPart = filter[indexing[j]];\r\n                        }\r\n                    } else if (table[indexing[j]].filterDate === 'MM-DD-YYYY') {\r\n                        if (filter[indexing[j]].length === 'MM-DD-YYYY'.length) {\r\n                            filterPart = convertDate2(filter[indexing[j]], '-', 1);\r\n                        } else if (filter[indexing[j]].length === 'MM-YYYY'.length && filter[indexing[j]].indexOf('-') !== -1) {\r\n                            filterPart = convertDate2(filter[indexing[j]], '-', 2);\r\n                        } else {\r\n                            filterPart = filter[indexing[j]];\r\n                        }\r\n                    } else if (table[indexing[j]].filterDate === 'MM/DD/YYYY HH:MM:SS') {\r\n                        if (filter[indexing[j]].length === 'MM/DD/YYYY HH:MM:SS'.length) {\r\n                            filterPart = convertDateTime(filter[indexing[j]], '/', 1);\r\n                        } else if (filter[indexing[j]].length === 'MM/YYYY'.length && filter[indexing[j]].indexOf('/') !== -1) {\r\n                            filterPart = convertDate2(filter[indexing[j]], '/', 2);\r\n                        } else {\r\n                            filterPart = filter[indexing[j]];\r\n                        }\r\n                    } else if (table[indexing[j]].filterDate === 'MM-DD-YYYY HH:MM:SS') {\r\n                        if (filter[indexing[j]].length === 'MM-DD-YYYY HH:MM:SS'.length) {\r\n                            filterPart = convertDateTime (filter[indexing[j]], '-', 1);\r\n                        } else if (filter[indexing[j]].length === 'MM/YYYY'.length && filter[indexing[j]].indexOf('-') !== -1) {\r\n                            filterPart = convertDate2(filter[indexing[j]], '-', 2);\r\n                        } else {\r\n                            filterPart = filter[indexing[j]];\r\n                        }\r\n                    } else if (table[indexing].filterDate === 'YYYY-MM-DDTHH:MM:SS.SSS') {\r\n                        if (filter[indexing[j]].length === 'YYYY-MM-DDTHH:MM:SS.SSS'.length) {\r\n                            filterPart = convertDateTimeReg (filter[indexing[j]]);\r\n                        } else {\r\n                            filterPart = filter[indexing[j]];\r\n                        }\r\n                    } else {\r\n                        filterPart = filter[indexing[j]];\r\n                    }\r\n\r\n                    if (dataPart.toString().indexOf(filterPart.toString()) !== -1) {  // Compare the dates\r\n                        found.push(true);\r\n                    } else {    // Dates are not equal\r\n                        found.push(false);\r\n                        done = true;\r\n                    }\r\n                // The data element matches one of the filter input boxes\r\n                } else if (data[indexes[i]][table[indexing[j]].name].toString().indexOf(filter[indexing[j]].toString()) !== -1) {\r\n                    found.push(true);   // Place a true in the found array indicating the filter input box matched\r\n                } else {    // The data element did not match the filter input box\r\n                    found.push(false);\r\n                    done = true;    // Since a match was not found the data element will not meet the filter criteria\r\n                }\r\n            }\r\n\r\n\r\n            // Check to see if the data element met all the filter criteria\r\n            let move = true;\r\n            // Spin through found array making sure all values are true.  If they are, the data element\r\n            // matches the filter criteria\r\n            for (let k = 0; k < found.length && move === true; k++) {\r\n                if (found[k] === false) {   // False was found, so the data element does not match filter criteria\r\n                    move = false;\r\n                }\r\n            }\r\n\r\n            // Data element matches the filter criteria, so place the data in the filtered data area\r\n            if (move === true) {\r\n                newData.push(indexes[i]);\r\n                count++;\r\n            }\r\n        }\r\n\r\n        if (count > 0) {    // There are filtered data elements\r\n            setIndex(newData, true);\r\n            setFilterPressed(true);\r\n            if (isControlBreak(controlBreakInfo) === true) {\r\n                findCtrlBreak(controlBreakInfo, newData);\r\n            }\r\n        }\r\n    }\r\n\r\n    /********************************************************************************************************************\r\n     *\r\n     * This will set the indexes, and possibly a copy of the index, the length of the indexes, and the start and end of\r\n     * the indexes.\r\n     *\r\n     * @param indexing  the indexes to be set\r\n     * @param doCopy    indicates whether a copy of the indexes should be made (true) or not (false)\r\n     *\r\n     *********************************************************************************************************************/\r\n    function setIndex(indexing, doCopy) {\r\n        setIndexes(indexing);\r\n        if (doCopy === true) {\r\n            setCopyIndex(indexing);\r\n        }\r\n        setLength (indexing.length);\r\n        setStartEnd (0, indexing.length, indexing);\r\n    }\r\n\r\n\r\n    /**********************************************************************************************\r\n     *\r\n     * This will convert the date from the MM/DD/YYYY or MM-DD-YYYY format to the YYYY-MM-DD\r\n     * format.\r\n     *\r\n     * @param {*} date the date to be converted to the YYYY-MM-DD format\r\n     * @param {*} char the slash (/) or dash (-)\r\n     * @param {*} type  number to indicate whether to have the date (1) or date and time (2)\r\n     *\r\n     **********************************************************************************************/\r\n    function convertDate2(date, char, type) {\r\n        let split = date.split(char);\r\n\r\n        if (type === 1) {\r\n            return `${split[2]}-${split[0]}-${split[1]}`;\r\n        } else {\r\n            return `${split[1]}-${split[0]}`;\r\n        }\r\n    }\r\n\r\n    /**********************************************************************************************\r\n     *\r\n     * This will convert the date and time from the MM/DD/YYYY HH:MM:SS or MM-DD-YYYY HH:MM:SS\r\n     * format to the YYYY-MM-DD HH:MM:SS format.\r\n     *\r\n     * @param {*} date  the date to be converted to the YYYY-MM-DD format\r\n     * @param {*} char  the slash (/) or dash (-)\r\n     * @param {*} type  number to indicate whether to have the date (1) or date and time (2)\r\n     *\r\n     **********************************************************************************************/\r\n    function convertDateTime(date, char, type) {\r\n        let dateTime = date.split(' ');\r\n        let localDate = dateTime[0].split(char);\r\n\r\n        if (type === 1) {\r\n            return `${localDate[2]}-${localDate[0]}-${localDate[1]}T${dateTime[1]}`;\r\n        } else {\r\n            return `${localDate[1]}-${localDate[0]}`;\r\n        }\r\n    }\r\n\r\n    /**********************************************************************************************\r\n     *\r\n     * This will strip of the milliseconds from the YYYY-MM-DDTHH:MM:SS.SSS format (strips the\r\n     * .SSS).\r\n     *\r\n     * @param {*} date the date to strip the milliseconds from\r\n     *\r\n     ***********************************************************************************************/\r\n    function convertDateTimeReg(date) {\r\n        let split = date.split('.');\r\n\r\n        if (split.length === 0) {\r\n            return date;\r\n        } else {\r\n            return split[0];\r\n        }\r\n    }\r\n\r\n    /******************************************************************************\r\n     *\r\n     * This will validate that data was entered in the header drop down and text\r\n     * box for searching.  This is called when the Search button is pressed.\r\n     *\r\n     * @param {*} which indicates whether both (B) the search header and item\r\n     *                  should be validated or only the header (H)\r\n     *\r\n     *******************************************************************************/\r\n    function validate(_which) {\r\n        let localInvalid = [...invalid];\r\n\r\n        localInvalid[SRCHHDR].validity = false;\r\n        localInvalid[SRCHHDR].display = false;\r\n        localInvalid[SRCHITEM].validity = false;\r\n        localInvalid[SRCHITEM].display = false;\r\n\r\n        if (searchHeader === '') {\r\n            localInvalid = setInvalidScreen(localInvalid, SRCHHDR, 'A column header to be searched must be selected');\r\n        }\r\n\r\n        setInvalid(localInvalid);\r\n\r\n        return  localInvalid[SRCHHDR].validity === false &&\r\n                localInvalid[SRCHITEM].validity === false;    // No problems occurred\r\n    }\r\n\r\n    /********************************************************************************\r\n     *\r\n     * This will search a column in a table until it matches the starting characters\r\n     * in the column with that which is in the text box.  In other words, if the\r\n     * column contains SMITH and SM is entered in the text box, it will match.  It\r\n     * will match until it finds the first occurrence.\r\n     *\r\n     **********************************************************************************/\r\n    function searchItemButton() {\r\n        if (table && validate('B') === true) {  // Make sure a value has been selected in the drop down and text box\r\n            let search = null;\r\n            search = (hasProperty(props,'ignorecase') === true) ?\r\n                searchItem.toUpperCase() :  // Convert to upper case to ignore case\r\n                searchItem;\r\n            // Find a match in the correct column of the data\r\n            let tableIndex = table.map(function(e) { return e.header; }).indexOf(searchHeader);   // Column match\r\n            if (hasProperty(table[tableIndex], 'dataDate') && hasProperty(table[tableIndex], 'searchDate')) {\r\n                searchDate(search, tableIndex);\r\n            } else if (hasProperty(props,'searchstart') === true) {\r\n                searchStart(search, table[tableIndex].name);\r\n            } else {\r\n                searchAny(search, table[tableIndex].name);\r\n            }\r\n//            let index = props.data.findIndex(val => val[table[tableIndex].name].toString().startsWith(search));   // Text match\r\n//            setStartEnd(index); // Set the start and end to show the found text\r\n        }\r\n    }\r\n\r\n    /*********************************************************************************************\r\n     *\r\n     * This is search through the date and compare dates in the correct format to see if they\r\n     * are equal.  If they are equal, it will move that row in the table to the top.\r\n     *\r\n     * Parameters:\r\n     * @param   searchItem the date to search for\r\n     * @param   tableIndex the index into the table\r\n     *\r\n     **********************************************************************************************/\r\n    function searchDate(searchItem, tableIndex) {\r\n\r\n        let data = props.data;  // The data to filter\r\n        let done = false;\r\n\r\n        // Find if the index is in the date table\r\n\r\n        for (let i = 0; i < indexes.length && done === false; i++) {\r\n            // The data field is blank or has no value\r\n            if (data[indexes[i]][table[tableIndex].name] === null) {\r\n                done = true;\r\n            } else {    // The field contains a date\r\n                let dataPart = null;\r\n                let searchPart = null;\r\n\r\n                // Convert the format for the data part\r\n                if (table[tableIndex].dataDate === 'MM/DD/YYYY') {\r\n                    dataPart = convertDate2(data[indexes[i]][table[tableIndex].name], '/', 1);\r\n                } else if (table[tableIndex].dataDate === 'MM-DD-YYYY') {\r\n                    dataPart = convertDate2(data[indexes[i]][table[tableIndex].name], '-', 1);\r\n                } else if (table[tableIndex].dataDate === 'MM/DD/YYYY HH:MM:SS') {\r\n                    dataPart = convertDateTime(data[indexes[i]][table[tableIndex].name], '/', 1);\r\n                } else if (table[tableIndex].dataDate === 'MM-DD-YYYY HH:MM:SS') {\r\n                    dataPart = convertDateTime (data[indexes[i]][table[tableIndex].name], '-', 1);\r\n                } else if (table[tableIndex].dataDate === 'YYYY-MM-DDTHH:MM:SS.SSS') {\r\n                    dataPart = convertDateTimeReg (data[indexes[i]][table[tableIndex].name]);\r\n                } else {\r\n                    dataPart = data[indexes[i]][table[tableIndex].name];\r\n                }\r\n\r\n                // Convert the format for the filter part\r\n                if (table[tableIndex].searchDate === 'MM/DD/YYYY') {\r\n                    if (searchItem.length === 'MM/DD/YYYY'.length) {\r\n                        searchPart = convertDate2(searchItem, '/', 1);\r\n                    } else if (searchItem.length === 'MM/YYYY'.length && searchItem.indexOf('/') !== -1) {\r\n                        searchPart = convertDate2(searchItem, '/', 2);\r\n                    } else {\r\n                        searchPart = searchItem;\r\n                    }\r\n                } else if (table[tableIndex].searchDate === 'MM-DD-YYYY') {\r\n                    if (searchItem.length === 'MM-DD-YYYY'.length) {\r\n                        searchPart = convertDate2(searchItem, '-', 1);\r\n                    } else if (searchItem.length === 'MM-YYYY'.length && searchItem.indexOf('-') !== -1) {\r\n                        searchPart = convertDate2(searchItem, '-', 2);\r\n                    } else {\r\n                        searchPart = searchItem;\r\n                    }\r\n                } else if (table[tableIndex].searchDate === 'MM/DD/YYYY HH:MM:SS') {\r\n                    if (searchItem.length === 'MM/DD/YYYY HH:MM:SS'.length) {\r\n                        searchPart = convertDateTime(searchItem, '/', 1);\r\n                    } else if (searchItem.length === 'MM/YYYY'.length && searchItem.indexOf('/') !== -1) {\r\n                        searchPart = convertDate2(searchItem, '/', 2);\r\n                    } else {\r\n                        searchPart = searchItem;\r\n                    }\r\n                } else if (table[tableIndex].searchDate === 'MM-DD-YYYY HH:MM:SS') {\r\n                    if (searchItem.length === 'MM-DD-YYYY HH:MM:SS'.length) {\r\n                        searchPart = convertDateTime (searchItem, '-', 1);\r\n                    } else if (searchItem.length === 'MM/YYYY'.length && searchItem.indexOf('-') !== -1) {\r\n                        searchPart = convertDate2(searchItem, '-', 2);\r\n                    } else {\r\n                        searchPart = searchItem;\r\n                    }\r\n                } else if (table[tableIndex].searchDate === 'YYYY-MM-DDTHH:MM:SS.SSS') {\r\n                    if (searchItem.length === 'YYYY-MM-DDTHH:MM:SS.SSS'.length) {\r\n                        searchPart = convertDateTimeReg (searchItem);\r\n                    } else {\r\n                        searchPart = searchItem;\r\n                    }\r\n                } else {\r\n                    searchPart = searchItem;\r\n                }\r\n\r\n                if (dataPart.toString().indexOf(searchPart.toString()) !== -1) {  // Compare the dates\r\n                    setStartEnd(i, length, indexes); // Set the start and end positions of the data on the screen.\r\n\r\n                    done = true;\r\n                }\r\n            }\r\n        }\r\n}\r\n\r\n    /********************************************************************************************\r\n     *\r\n     * This will search through the data until it finds the item in the specified column that\r\n     * starts with the search item.  This is only called if the props search start is set.\r\n     *\r\n     * @param {*} search    the item to search for\r\n     * @param {*} name      the field name in the data to search for the search item\r\n     *\r\n     *********************************************************************************************/\r\n    function searchStart(search, name) {\r\n        let begin = (hasProperty(props,'nocontsearch') === true || start === 0) ? 0: start + 1;  // Where to start the search\r\n        let found = false;  // Indicates that the item was found\r\n\r\n        for (let i = begin; i < length && found === false; i++) {\r\n            let compareStr = (hasProperty(props, 'ignorecase')) ? props.data[indexes[i]][name].toString().toUpperCase() :\r\n                                                                  props.data[indexes[i]][name].toString();\r\n            if (compareStr.startsWith(search)) {    // Item was found\r\n                found = true;\r\n                setStartEnd(i, length, indexes); // Set the start and end positions of the data on the screen.\r\n            }\r\n        }\r\n    }\r\n\r\n    /********************************************************************************************\r\n     *\r\n     * This will search through the data until it finds the search item in the specified column\r\n     * anywhere within the data item.\r\n     *\r\n     * @param {*} search    the item to search for\r\n     * @param {*} name      the field name in the data to search for the search item\r\n     *\r\n     *********************************************************************************************/\r\n    function searchAny(search, name) {\r\n        let begin = (hasProperty(props,'nocontsearch') === true || start === 0) ? 0: start + 1;  // Where to start the search\r\n        let found = false;  // Indicates that the item was found\r\n\r\n        for (let i = begin; i < props.data.length && found === false; i++) {\r\n            const str = (props.data[indexes[i]][name]) ? props.data[indexes[i]][name].toString() : ''\r\n            const compareStr = (hasProperty(props, 'ignorecase')) ? str.toUpperCase() : str;\r\n\r\n            if (compareStr.indexOf(search) !== -1) {    // Item was found\r\n                found = true;\r\n                setStartEnd(i, length, indexes);  // Set the start and end positions of the data on the screen.\r\n            }\r\n        }\r\n    }\r\n\r\n    /******************************************************************************************************************\r\n     *\r\n     * This function will sort a column header in the table (all the data is sorted by\r\n     * the field that matches the column header) in either ascending (A) or descending (D)\r\n     * order.\r\n     *\r\n     * @param {*} name          the name of the column header to sort\r\n     * @param {*} orderType     the order in which the array should be sorted (A - ascending, D - Descending, N - Neither)\r\n     * @param {*} indexes       the current indexing of how the data should be displayed\r\n     * @param {*} tableIndex    the index into the table props for the table being sorted\r\n     *\r\n     *******************************************************************************************************************/\r\n    function sortClicked(name, orderType, indexes, tableIndex) {\r\n\r\n        // console.log('sortClicked(',name, orderType);\r\n\r\n        if (!table) {   // No table props\r\n           return []\r\n        }\r\n\r\n        let index = table.map(function(e) { return e.name; }).indexOf(name);   // Column match\r\n        let localIndexes = [...indexes];\r\n        let ctrlBreak = false;      // Indicates whether there is a control break or not\r\n        let startingPosition = 0;   // The starting position of the control break for the column\r\n        let endingPosition = 0;     // The ending position of the control break for the column\r\n\r\n        if (isControlBreak(controlBreakInfo) === true) {    // There is a control break\r\n            startingPosition = startPos[tableIndex];\r\n            if (tableIndex + 1 >= startPos.length) {\r\n                endingPosition = startingPosition + 1;\r\n            } else {\r\n                endingPosition = startPos[tableIndex + 1];\r\n            }\r\n            localIndexes = [];  // Determine the indexes for the control break\r\n            for (let j = startingPosition; j < endingPosition; j++) {\r\n                localIndexes.push (indexes[j]);\r\n            }\r\n            ctrlBreak = true;\r\n        }\r\n\r\n\r\n        // console.log('sortClicked index:', index, 'name:', name);\r\n\r\n        let order = [...sortOrder];\r\n        let ordering = 'A';\r\n\r\n        if (orderType === 'A') {\r\n            ordering = 'A';\r\n        } else {\r\n            if (order[index] === 'N') { // If sort is not specified (first time), change it to ascending\r\n                ordering = 'A';\r\n                order[index] = 'A';\r\n            } else if (order[index] === 'A') {\r\n                ordering = 'D';\r\n                order[index] = 'D';\r\n            } else if (order[index] === 'D') {\r\n                if (ctrlBreak === true) {\r\n                    ordering = 'A';\r\n                    order[index] = 'A';\r\n                } else {\r\n                    ordering = 'N';\r\n                    order[index] = 'N';\r\n                }\r\n            }\r\n\r\n            setSortOrder(order);\r\n        }\r\n\r\n        // console.log('sortOrder was:', sortOrder, 'changing to:', order, 'ordering:', ordering, 'orderType:', orderType);\r\n\r\n        if (ordering === 'N') {\r\n            setIndex(copyIndex, false);\r\n\r\n            return;\r\n        }\r\n\r\n        let dateFormat = null;\r\n        if (hasProperty(table[index], 'sortDate')) {\r\n            dateFormat = table[index].sortDate;\r\n        }\r\n\r\n        let sortAry = [];\r\n        localIndexes.map ((row) => {\r\n            if (dateFormat !== null) {\r\n                if (dateFormat === 'MM/DD/YYYY') {\r\n                    sortAry.push({index: row, data: convertDate2(props.data[row][name], '/', 1)});\r\n                } else if (dateFormat === 'MM-DD-YYYY') {\r\n                    sortAry.push({index: row, data: convertDate2(props.data[row][name], '-', 1)});\r\n                } else if (dateFormat === 'MM/DD/YYYY HH:MM:SS') {\r\n                    sortAry.push({index: row, data: convertDateTime(props.data[row][name], '/', 1)});\r\n                } else if (dateFormat === 'MM-DD-YYYY HH:MM:SS') {\r\n                    sortAry.push({index: row, data: convertDateTime(props.data[row][name], '-', 1)});\r\n                } else if (dateFormat === 'YYYY-MM-DDTHH:MM:SS.SSS') {\r\n                    sortAry.push({index: row, data: convertDateTimeReg (data[row][name])});\r\n                } else {\r\n                    sortAry.push({index: row, data: props.data[row][name]})\r\n                }\r\n            } else {\r\n                sortAry.push({index: row, data: props.data[row][name]})\r\n            }\r\n        });\r\n\r\n        sortAry.sort(function (item1, item2) {\r\n            // Convert to upper case if ignoring case\r\n            if (typeof item1.data === 'string' &&\r\n                hasProperty(props,'ignorecase') === true) {\r\n                // item1.data = (item1.data !== null) ? item1.data.toUpperCase() : null;\r\n                item1.data = item1.data.toUpperCase()\r\n                item2.data = (item2.data !== null) ? item2.data.toUpperCase() : null;\r\n            }\r\n\r\n            // Make the comparison\r\n            if (item1.data < item2.data) {\r\n                return (ordering === 'A') ? -1 : 1;\r\n            } else if (item1.data > item2.data) {\r\n                return (ordering === 'A') ? 1 : -1;\r\n            } else {\r\n                return 0;   // Equal\r\n            }\r\n        });\r\n\r\n        if (ctrlBreak === true) {   // There is a control break\r\n            let cbData = [];    // The data for the control break\r\n            // Create the indexes for each individual control break\r\n            console.log('sortAry :', sortAry);\r\n            for (let i = 0; i < sortAry.length; i++) {\r\n                localIndexes[i] = sortAry[i].index;\r\n                cbData.push (props.data[sortAry[i].index]);\r\n            }\r\n\r\n            let newIndexes = [...indexes];  // New indexes for the control break\r\n            for (let i = startingPosition, j = 0; i < endingPosition; i++, j++) {\r\n                newIndexes[i] = localIndexes[j];\r\n            }\r\n\r\n            let localData = [...controlBreakData];\r\n            localData[tableIndex].data = cbData;\r\n            setControlBreakData(localData);\r\n\r\n            setIndex(newIndexes, false);\r\n\r\n            return newIndexes;\r\n        } else {    // Regular search sort table\r\n            let newIndexes = [];    // Indexes for the search sort table\r\n            sortAry.map((row) => newIndexes.push(row.index));\r\n\r\n            setIndex(newIndexes, false);\r\n\r\n            return newIndexes;\r\n        }\r\n    }\r\n\r\n    /***********************************************************************************\r\n     *\r\n     * This will place the letters and digits on the screen below the search bar.\r\n     *\r\n     * @param {*} row   the letter or digit to display\r\n     * @param {*} i     the index into the letterDigit array\r\n     *\r\n     ***********************************************************************************/\r\n    function alphabet(row, i) {\r\n        let key = 'anchor_' + i;\r\n\r\n        return (\r\n            <span key={key}><a onClick={() => letterLink(`${row}`, i)} className={background[i]}>{row}</a>&nbsp;&nbsp;</span>\r\n        )\r\n    }\r\n\r\n    /*************************************************************************************************************************\r\n     *\r\n     * This will reset the sort order back to neither (not ascending or descending).\r\n     *\r\n     *************************************************************************************************************************/\r\n    function resetSortOrder() {\r\n        let order = new Array(table.length).fill('N');\r\n//        console.log('sortOrder was:', sortOrder, 'changing to:', order);\r\n        setSortOrder(order);\r\n    }\r\n\r\n    /*************************************************************************************************************************\r\n     *\r\n     * This will set the background if the letters prop option is used.\r\n     *\r\n     * @param index the index for the letter that was pressed\r\n     * @param set   indicates to make that letter a special background color\r\n     *\r\n     **************************************************************************************************************************/\r\n    function clearSetBackground(index, set) {\r\n        let backgrd = [...background];  // Array of for each letter displayed for the background color\r\n        for (let i = 0; i < backgrd.length; i++) {  // Set all the letters to a standard background color\r\n            backgrd[i] = 'sw-sst_regBackground';\r\n        }\r\n\r\n        if (set === true) { // Set the letter pressed to the special background color\r\n            backgrd[index] = 'sw-sst_letterBackground';\r\n        }\r\n\r\n        setBackground(backgrd);\r\n}\r\n\r\n    /***********************************************************************************\r\n     *\r\n     * This will process the letter selected by the user.  It will first sort the\r\n     * column header selected by the user in ascending order.  Next, it will find that\r\n     * letter or digit in the data.  When found it will set the start at the beginning\r\n     * of that letter.  Next it will continue searching until if finds the end of that\r\n     * letter, which becomes the end of that letter.  It will note the start and end\r\n     * positions of that letter and display the items that begin with that letter on the\r\n     * screen.\r\n     *\r\n     * @param {*} letter    the selected letter by the user\r\n     * @param {*} bIndex    the index of the letter that was selected\r\n     *\r\n     *************************************************************************************/\r\n    function letterLink(letter, bIndex) {\r\n\r\n        if (!table) {\r\n          return\r\n        }\r\n\r\n        let indexing = [...origIndexes];\r\n\r\n        if (validate('H') === true) {   // Validate that a search header was entered\r\n            // Used to get the field name of the data item\r\n            let index = table.map(function(e) { return e.header; }).indexOf(searchHeader);   // Column match\r\n\r\n            clearSetBackground(bIndex, true);\r\n\r\n            resetSortOrder();\r\n            setIndex(origIndexes, true);\r\n            if (letter === '^') {\r\n//                setIndex(origIndexes, true);\r\n//                setDisableLetter(false);\r\n                return;\r\n            }\r\n\r\n            const sortIndexes = sortClicked (table[index].name, 'A', indexing); // ascending order\r\n\r\n            let newIndexes = [];\r\n\r\n            // Find the beginning of the letter\r\n            let begin = 0;      // Where the beginning of the letter is\r\n            let found = false;  // Indicates that the letter was found\r\n            for (begin = 0; begin < sortIndexes.length; begin++) {\r\n                // Letter or digit is found\r\n                if (props.data[sortIndexes[begin]][table[index].name] !== null &&\r\n                    props.data[sortIndexes[begin]][table[index].name].toString().startsWith(letter) === true) {\r\n                    found = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // Find the end of the letter\r\n            let stop = 0;       // Where the end of the letter is\r\n            for (stop = begin; stop < sortIndexes.length; stop++) {\r\n                // End of the letter or digit is found\r\n                if (props.data[sortIndexes[stop]][table[index].name] !== null &&\r\n                    props.data[sortIndexes[stop]][table[index].name].toString().startsWith(letter) === false) {\r\n                    break;\r\n                }\r\n                newIndexes.push(sortIndexes[stop]);\r\n            }\r\n\r\n            if (found === true) {\r\n                setIndex(newIndexes, true);\r\n                setDisable (0, newIndexes.length);\r\n                setFilterOn(false);\r\n            } else {\r\n                setAlertMessage ('No ' + searchHeader + ' starts with a ' + letter);\r\n                setShowAlert(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**********************************************************************************\r\n     *\r\n     * The All button will display all the data and goes along with the showTable\r\n     * props.  It will set the start at the beginning of the data and the end at the\r\n     * end of the data.\r\n     *\r\n     **********************************************************************************/\r\n    function allButton() {\r\n        setStart(0);\r\n        setEnd(length);\r\n    }\r\n\r\n    /************************************************************************************************************\r\n     *\r\n     * This will determine if the top, previous, next, or bottom buttons are disabled\r\n     * on the search bar.\r\n     *\r\n     * @param {*} index     the current starting index in the data\r\n     * @param {*} endLen    the ending length of the data to determine what to disable\r\n     *\r\n     *************************************************************************************************************/\r\n    function setDisable(index, endLen) {\r\n        if (index > 0) {    // Index is past the start of the data, so enable top and previous\r\n            setPreviousDisabled(false);\r\n            setTopDisabled(false);\r\n        } else {\r\n                  // Can not go any further up so disable top and previous\r\n                  // Index is before the start of the data, so disable top and previous\r\n            setPreviousDisabled(true);\r\n            setTopDisabled(true);\r\n        }\r\n\r\n        // Cannot go any further down so disable, next and bottom\r\n        if (index + maxItems >= endLen) {\r\n            setNextDisabled(true);\r\n            setBottomDisabled(true);\r\n        } else {    // Not at the bottom so enable next and bottom\r\n            setNextDisabled(false);\r\n            setBottomDisabled(false);\r\n        }\r\n    }\r\n\r\n    /********************************************************************************************************************\r\n     *\r\n     * This will send the indexes being displayed (pagination) back to the calling component\r\n     *\r\n     * @param   start   the start of the indexes to be returned\r\n     * @param   end     the end of the indexes to be returned\r\n     * @param   length  the length of the indexes array\r\n     * @param   indexes the complete set of indexes\r\n     *\r\n     ******************************************************************************************************************************/\r\n    function sendIndexes(start, end, length, indexes) {\r\n        let sentIndexes = [];   // The indexes to be returned (pagination) to the calling component\r\n        for (let i = start; i < end && i < length; i++) {\r\n            sentIndexes.push(indexes[i]);\r\n        }\r\n\r\n        if (hasProperty(props, 'indexing')) {\r\n            props.indexing(sentIndexes);    // Send back the pagination indexes back to the calling component\r\n        }\r\n\r\n        if (hasProperty(props, 'allIndexes') === true) {\r\n            props.allIndexes(indexes);  // Send all the indexes back to the calling component\r\n        }\r\n    }\r\n\r\n    /***********************************************************************************\r\n     *\r\n     * This will determine where the current start and end are in the data so they\r\n     * can be displayed in the table.\r\n     *\r\n     * @param {*} index     the current starting position\r\n     * @param {*} dataLen   the length of the data\r\n     * @param {*} indexes   the indexes that indicates how the data is to be displayed\r\n     *\r\n     ***********************************************************************************/\r\n    function setStartEnd(index, dataLen, indexes) {\r\n        if (index !== -1) {\r\n            if (index + maxItems >= dataLen) { // End is past the data\r\n                setStart (index);\r\n                setEnd (dataLen);\r\n                (hasProperty(props,'startEnd') === true) ? props.startEnd (index, dataLen) : null;\r\n                sendIndexes(index, dataLen, dataLen, indexes);\r\n                setDisable(index, dataLen);\r\n            } else {    // End is not past the data\r\n                setStart (index);\r\n                setEnd (index + maxItems);\r\n                setDisable(index, dataLen);\r\n                (hasProperty(props,'startEnd') === true) ? props.startEnd (index, index + maxItems) : null;\r\n                sendIndexes(index, index + maxItems, dataLen, indexes);\r\n            }\r\n        }\r\n    }\r\n\r\n    /***********************************************************************************\r\n     *\r\n     * This is called when the top button is clicked.  It will set the start and end\r\n     * places in the data, so that it can be determined what to show in the table.\r\n     *\r\n     ***********************************************************************************/\r\n    function topButton() {\r\n        if (maxItems < length) {  // Not at the end of the data\r\n            setStart (0);\r\n            setEnd (maxItems);\r\n            (hasProperty(props,'startEnd') === true) ? props.startEnd (0, maxItems) : null;\r\n            sendIndexes(0, maxItems, length, indexes);\r\n        } else {    // At the end of the data\r\n            setStart (0);\r\n            setEnd (length);\r\n            (hasProperty(props,'startEnd') === true) ? props.startEnd (0, length) : null;\r\n            sendIndexes(0, length, length, indexes);\r\n        }\r\n\r\n        setDisable(0, length);  // Determine which buttons to disable\r\n    }\r\n\r\n    /***********************************************************************************\r\n     *\r\n     * This is called when the previous button is clicked.  It will set the start and end\r\n     * places in the data, so that it can be determined what to show in the table.\r\n     *\r\n     ***********************************************************************************/\r\n    function previousButton() {\r\n        let index = start - maxItems;    // Go back the appropriate number of records in the data\r\n        if (index <= 0) {   // Past the beginning of the data\r\n            setStart (0);\r\n            setEnd (maxItems);\r\n            (hasProperty(props,'startEnd') === true) ? props.startEnd (0, maxItems) : null;\r\n            sendIndexes(0, maxItems, length, indexes);\r\n        } else {    // Not past the beginning of the data\r\n            setStart (index);\r\n            setEnd (index + maxItems);\r\n            (hasProperty(props,'startEnd') === true) ? props.startEnd (index, index + maxItems) : null;    // Add max items to get the new current end\r\n            sendIndexes(index, index + maxItems, length, indexes);\r\n        }\r\n\r\n        setDisable(index, length);  // Determine which buttons to disable\r\n    }\r\n\r\n    /***********************************************************************************\r\n     *\r\n     * This is called when the next button is clicked.  It will set the start and end\r\n     * places in the data, so that it can be determined what to show in the table.\r\n     *\r\n     ***********************************************************************************/\r\n    function nextButton() {\r\n        let index = parseInt(end);    // Set the start at the current end of data for the table\r\n        let begin = 0;      // Current beginning of the start of the data\r\n\r\n        if (index < length) {    // Not at the end of the data\r\n            begin = index;\r\n        } else {    // At the end of the data, so place the beginning at the current start\r\n            begin = start;\r\n        }\r\n\r\n        if (index + maxItems >= length) { // At the end of the data\r\n            setStart (begin);\r\n            setEnd (length);\r\n            (hasProperty(props,'startEnd') === true) ? props.startEnd (begin, length) : null;\r\n            sendIndexes(begin, length, length, indexes);\r\n        } else {    // Not at the end of the data\r\n            setStart (begin);\r\n            setEnd (index + maxItems);\r\n            (hasProperty(props,'startEnd') === true) ? props.startEnd (begin, index + maxItems) : null;    // Increment to the next max items\r\n            sendIndexes(begin, index + maxItems, length, indexes);\r\n        }\r\n\r\n        setDisable(index, length);  // Determine which buttons to disable\r\n    }\r\n\r\n    /***********************************************************************************\r\n     *\r\n     * This is called when the bottom button is clicked.  It will set the start and end\r\n     * places in the data, so that it can be determined what to show in the table.\r\n     *\r\n     ***********************************************************************************/\r\n    function bottomButton() {\r\n        if (length - maxItems < 0) {  // At the end of the data\r\n            setStart (0);\r\n            setEnd (length);\r\n            (hasProperty(props,'startEnd') === true) ? props.startEnd (0, length) : null;\r\n            sendIndexes(0, length, length, indexes);\r\n        } else {    // Not at the end of the data\r\n            setStart (length - maxItems);\r\n            setEnd (length);\r\n            (hasProperty(props,'startEnd') === true) ? props.startEnd(length - maxItems, length) : null;\r\n            sendIndexes(length - maxItems, length, length, indexes);\r\n        }\r\n\r\n        setDisable(length, length);\r\n    }\r\n}\r\n\r\nexport default SearchSortTable;\r\n", "\nconst hasProperty = (obj, propName) => { \n    if (!obj) {    // obj is null\n       return false\n    }\n    return !!Object.getOwnPropertyDescriptor(obj, propName);\n}\n\n\n/*********************************************************************\n *\n * 04-23-2020   Initial check-in.\n * 09-16-2020   Added the getNormalBackColor and getErrorColor\n *              functions.\n *\n *********************************************************************/\n\n/********************************************************************************\n *\n * This will generate a button and will determine if the button should be\n * disabled or not.\n *\n * @param {*} style         the style used for the button\n * @param {*} error         indicates whether an error occurred and if so, disable\n *                          the button\n * @param {*} disabled      indicates whether the button should be disabled or not\n * @param {*} disableColor  the color for the disabled button (default is gray)\n *\n *********************************************************************************/\nexport const generateButton = (style, error, disabled = false, disableColor = 'gray') => {\n    let genButtonStyle = {};\n    if (style !== null) {\n        genButtonStyle = Object.assign ({}, style); // Copy the button style\n    }\n    if (error === true || disabled === true) {  // Change certain buttons to the disable color to reflect the buttons have been disabled due to an error\n        genButtonStyle.backgroundColor = disableColor;\n    } else {    // Do not disable the button\n        // Make sure the style has a background color, if not use the theme color\n        genButtonStyle.backgroundColor = (hasProperty(style, 'backgroundColor') ) ?\n            style.backgroundColor : \n            getComputedStyle(document.documentElement).getPropertyValue('--sw-theme_buttonColor')\n    }\n\n    return genButtonStyle;  // Return the button\n}\n\n/********************************************************************************\n *\n * This will generate a button and will determine if the button should be\n * disabled or not.\n *\n * @param {*} error         indicates whether an error occurred and if so, disable\n *                          the button\n * @param {*} disabled      indicates whether the button should be disabled or not\n *\n *********************************************************************************/\nexport const generateDefaultButton = (error, disabled = false) => {\n    const genButtonStyle = Object.assign ({}, buttonStyle); // Copy the button style\n    if (error === true || disabled === true) {  // Change certain buttons to the disable color to reflect the buttons have been disabled due to an error\n        genButtonStyle.backgroundColor = \n            getComputedStyle(document.documentElement).getPropertyValue('--sw-theme_disableButtonColor');\n    } else {    // Do not disable the button\n        // Make sure the style has a background color, if not use the theme color\n        genButtonStyle.backgroundColor =  \n            getComputedStyle(document.documentElement).getPropertyValue('--sw-theme_buttonColor');\n    }\n\n    return genButtonStyle;  // Return the button\n}\n\nexport const generateCSSButton = (cssClassName,\n                                  error, \n                                  disabled = false,\n                                  noBackground = false,\n                                  cssNormalName = 'sw-theme_normalButtonBackground',\n                                  cssDisableName = 'sw-theme_grayButtonBackground') => {\n    if (error === true || disabled === true) {\n        return `${cssClassName} ${cssDisableName}`;\n    } else {\n        if (noBackground === true) {\n            return cssClassName;\n        } else {\n            return `${cssClassName} ${cssNormalName}`;\n        }\n    }\n}\n\nexport const generateCSSDefaultButton = (error, disabled = false) => {\n    generateCSSButton('sw-theme_buttonStyle', error, disabled);\n}", "import React, { useState } from 'react'\n\nconst Slider = (props) => {\n    const min = (props.hasOwnProperty('start')) ? props.start : 0;\n    const max = (props.hasOwnProperty('end')) ? props.end : 100;\n    const startValue = (props.hasOwnProperty('startValue')) ? props.startValue : 0;\n    const displayValue = (props.hasOwnProperty('noshow')) ? false : true;\n\n    const [rangeValue, setRangeValue] = useState(startValue);\n\n    return (\n        <div className=\"sw-slider_rangeslider\">\n            <input type=\"range\" className=\"sw-slider_range\" name=\"slider\" min={min} defaultValue={startValue} max={max} onChange={(event) => setRangeValue(event.target.value)} onMouseMove={(event) => setRangeValue(event.target.value)} />\n            { (displayValue === true) ? \n                <span id=\"id_rangeValue\" name=\"rangeValue\" value={rangeValue} className=\"sw-slider_rangeValue\">\n                    {rangeValue}\n                </span> : null\n            }\n        </div>\n    )\n}\n\nexport default Slider;\n", "\nimport React, { useState, useEffect } from 'react';\nimport CheckBox        from './CheckBox.js';\nimport { Choice }      from './List.js';\nimport SearchSortTable from './SearchSortTable.js';\nimport ChoiceText      from './ChoiceText.js';\nimport Radio           from './Radio.js';\n\n// import { isInvalid, \nimport { setInvalidTable, generateInvalid,\n         checkValidityTable, validCheckTable, \n         clearInvalidTable, \n         processInvalidStyleTable, wasClickedTable} from './Invalid.js'\n\n// import AlertModal    from './AlertModal.js';\n// import ErrorModal    from './ErrorModal.js';\nimport ConfirmModal  from './ConfirmModal.js';\n\nimport { generateCSSButton } from './Theme.js';\nimport { sanitize } from './Common.js';\n         \nconst hasProperty = (obj, propName) => {\n    return !!Object.getOwnPropertyDescriptor(obj, propName);\n}\n\nlet functYes = null;\n\nconst SpreadSheet = (props) => {\n    if (hasProperty(props, 'sheet') === false) {\n        console.error ('SpreadSheet: The sheet prop is missing');\n        return <div></div>;\n    }\n\n    const invalidArray = generateInvalid(0, props.sheet.length);\n\n    const ADDITIONAL = (hasProperty(props, 'additionalRows') === true) ? props.additionalRows : 20;\n    const ADD = (hasProperty(props, 'blankRows') === true) ? props.blankRows : 100;\n\n    const [data, setData] = useState(props.data);\n    const [start, setStart] = useState('');\n    const [indexes, setIndexes] = useState([]);\n    const [invalid, setInvalid] = useState(invalidArray);\n    const [showConfirm, setShowConfirm] = useState(false);\n    const [confirmMessage, setConfirmMessage] = useState('');\n\n    let sheet = [...props.sheet];\n    for (let i = 0; i < sheet.length; i++) {\n        if (hasProperty(sheet[i], 'validate') === false) sheet[i]['validate'] = false;\n        if (hasProperty(sheet[i], 'save') === false) sheet[i]['save'] = true;\n        if (hasProperty(sheet[i], 'hidden') === false) sheet[i]['hidden'] = false;\n        if (hasProperty(sheet[i], 'disabled') === false) sheet[i]['disabled'] = false;\n    }\n\n    const populateDirty = () => {\n        let localData = [...props.data];\n\n        for (let i = 0; i < localData.length; i++) {\n            if (localData[i].count === 0) {\n                for (let j = 0; j < localData[i].dirty.length; j++) {\n                    if (localData[i][sheet[j].name] !== '' && localData[i][sheet[j].name] !== null && localData[i][sheet[j].name] !== undefined) {\n                        localData[i].dirty[j] = true;\n                        localData[i].count++;\n                    }\n                }\n            }\n        }\n\n        setData(localData);\n    }\n\n    useEffect(() => {\n        populateDirty();\n        setData(props.data)\n    }, [props.data]);\n\n    const startEnd = (start, end) => {\n        setStart(start);\n        if (hasProperty(props, 'startEnd') === true) {\n            props.startEnd(start, end);\n        }\n    }\n\n    const indexing = (indexes) => {\n        setIndexes(indexes);\n        if (hasProperty(props, 'indexing') === true) {\n            props.indexing(indexes);\n        }\n    }\n\n    const populate = (numRows = ADD, clear = false) => {\n        let blank = [];\n        for (let i = 0; i < numRows; i++) {\n            let obj = {\n                count: 0,\n                dirty: new Array(sheet.length).fill(false),\n            };\n\n            for (let j = 0; j < sheet.length; j++) {\n                obj[sheet[j].name] = '';\n            }\n            \n            blank.push(obj);\n        }\n\n        if (hasProperty(props, 'preload') === true) {\n            props.preload(blank);\n        }\n\n        if (clear === true) {\n            setData(blank);\n        } else {\n            setData (prev => [...prev, ...blank]);\n        }\n    }\n\n    useEffect(() => {\n        populate();\n    }, [])\n\n\n\n    const table = [];\n    for (let i = 0; i < sheet.length; i++) {\n        if (sheet[i].hidden === false) {\n            table.push({ header: sheet[i].header, name: sheet[i].name, search: false, sort: false });\n        }\n    }\n\n    const processCount = (localData, value, index, posNum) => {\n        if (value === '' && localData[index].count > 0) {\n            localData[index].count--;\n            localData[index].dirty[posNum] = false;\n        } else if (localData[index].dirty[posNum] === false) {\n            localData[index].count++;\n            localData[index].dirty[posNum] = true;\n        }\n\n        return localData;\n    }\n\n    const processValue = (event, index, posNum) => {\n        let localData = [...data];\n        let name = event.target.name;\n        let value = event.target.value;\n\n        localData = processCount(localData, value, index, posNum);\n\n        if (hasProperty(props, 'specialProcessing') === true) {\n            localData = props.specialProcessing(localData, name, value, index);\n        }\n\n        localData[index][name] = value;\n        setData(localData);\n    }\n\n    const validate = () => {\n        let localInvalid = [...invalid];\n\n        setInvalid(clearInvalidTable(localInvalid));\n        \n        for (let i = 0; i < data.length; i++) {\n            if (data[i].count > 0) {\n                for (let j = 0; j < sheet.length; j++) {\n                    if (sheet[j].validate === true && sheet[j].hidden === false) {\n                        if (data[i][sheet[j].name] === '' ||\n                            data[i][sheet[j].name] === null ||\n                            data[i][sheet[j].name] === undefined) {\n                                localInvalid = setInvalidTable(localInvalid, j, i, `A ${sheet[j].header} must be given or selected`);\n                        } else if (sheet[j].type === 'text' || sheet[j].type === 'textarea') {\n                            let answer = sanitize (data[i][sheet[j].name], sheet[j].header);\n                            if (answer.valid === false) {\n                                localInvalid = setInvalidTable(localInvalid, j, i, answer.message);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        setInvalid(localInvalid);\n\n        // Determine if any of the validation checks were invalid\n        return validCheckTable(localInvalid);\n    }\n\n    const buildHTML = (row, pos) => {\n        let html = [];\n\n        const genButtonStyle = generateCSSButton('sw-ss_button', props.error);\n\n        for (let i = 0; i < sheet.length; i++) {\n            let rowSheet = sheet[i];\n\n            if (rowSheet.hidden === false) {\n                if (rowSheet.type === 'text' || rowSheet.type === 'date' || rowSheet.type === 'number') {\n                    if (rowSheet.validate === true) {\n                        html.push(<td className=\"sw-invalid_checkForError\">\n                                    <input type={rowSheet.type} name={rowSheet.name} value={row[rowSheet.name]} \n                                        onChange={(event) => processValue(event, pos, i)} \n                                        onClick={() => wasClickedTable(invalid, i, pos, setInvalid)} \n                                        disabled={props.error || rowSheet.disabled} \n                                        className={rowSheet.className + ' ' + processInvalidStyleTable(invalid, i, pos)}/>\n                                    { checkValidityTable(invalid, i, pos) }\n                                </td>);\n                    } else {\n                        html.push(<td>\n                                    <input type={rowSheet.type} name={rowSheet.name} value={row[rowSheet.name]} \n                                        onChange={(event) => processValue(event, pos, i)} \n                                        className={rowSheet.className} disabled={props.error || rowSheet.disabled} />\n                                </td>);\n                    }\n                } else if (rowSheet.type === 'textarea') {\n                    if (rowSheet.validate === true) {\n                        html.push(<td className=\"sw-invalid_checkForError\">\n                                    <textarea name={rowSheet.name} value={row[rowSheet.name]} \n                                        onChange={(event) => processValue(event, pos, i)} \n                                        onClick={() => wasClickedTable(invalid, i, pos, setInvalid)} \n                                        disabled={props.error || rowSheet.disabled} \n                                        className={rowSheet.className + ' ' + processInvalidStyleTable(invalid, i, pos)}/>\n                                    { checkValidityTable(invalid, i, pos) }\n                                </td>);\n                    } else {\n                        html.push(<td>\n                                    <textarea name={rowSheet.name} value={row[rowSheet.name]} \n                                        onChange={(event) => processValue(event, pos, i)} \n                                        className={rowSheet.className} \n                                        disabled={props.error || rowSheet.disabled} />\n                                </td>);\n                    }\n                } else if (rowSheet.type === 'Choice') {\n                    if (rowSheet.validate === true) {\n                        html.push(<td className=\"sw-invalid_checkForError\">\n                                    <Choice choices={rowSheet.choices} \n                                        name={rowSheet.name} value={row[rowSheet.name]} \n                                        onChange={(event) => processValue(event, pos, i)} \n                                        onClick={() => wasClickedTable(invalid, i, pos, setInvalid)} \n                                        disabled={props.error || rowSheet.disabled} \n                                        className={rowSheet.className + ' ' + processInvalidStyleTable(invalid, i, pos)}/>\n                                    { checkValidityTable(invalid, i, pos) }\n                                </td>);\n                    } else {\n                        html.push(<td>\n                                    <Choice choices={rowSheet.choices} name={rowSheet.name} value={row[rowSheet.name]} \n                                        onChange={(event) => processValue(event, pos, i)} \n                                        className={rowSheet.className} disabled={props.error || rowSheet.disabled} />\n                                </td>);\n                    }\n                } else if (rowSheet.type === 'ChoiceText') {\n                    if (rowSheet.validate === true) {\n                        html.push(<td className=\"sw-invalid_checkForError\">\n                                    <ChoiceText list={`sheetList_${i}_${pos}`} choices={rowSheet.choices}\n                                        name={rowSheet.name} value={row[rowSheet.name]} \n                                        onChange={(event) => processValue(event, pos, i)} \n                                        onClick={() => wasClickedTable(invalid, i, pos, setInvalid)} \n                                        disabled={props.error || rowSheet.disabled} \n                                        className={rowSheet.className + ' ' + processInvalidStyleTable(invalid, i, pos)}/>\n                                    { checkValidityTable(invalid, i, pos) }\n                                </td>);\n                    } else {\n                        html.push(<td>\n                                    <ChoiceText list={`sheetList_${i}_${pos}`} choices={rowSheet.choices}\n                                        name={rowSheet.name} value={row[rowSheet.name]} \n                                        onChange={(event) => processValue(event, pos, i)} \n                                        className={rowSheet.className} disabled={props.error || rowSheet.disabled} />\n                                </td>);\n                    }\n                } else if (rowSheet.type === 'CheckBox') {\n                    html.push(<td>\n                                <CheckBox selectedValue={rowSheet.selectedValue}\n                                    name={rowSheet.name} value={row[rowSheet.name]} text={rowSheet.header}\n                                    onChange={(event) => processValue(event, pos, i)} \n                                    className={rowSheet.className} disabled={props.error || rowSheet.disabled} />                          \n                            </td>);\n                } else if (rowSheet.type === 'Radio') {\n                    html.push(<td>\n                                <Radio selectedValue={rowSheet.selectedValue}\n                                    name={rowSheet.name} value={row[rowSheet.name]} text={rowSheet.header}\n                                    onChange={(event) => processValue(event, pos, i)} \n                                    className={rowSheet.className} disabled={props.error || rowSheet.disabled} />                          \n                                </td>);\n                } else if (rowSheet.type === 'button') {\n                    html.push(<td>\n                                <button name={rowSheet.name} \n                                        onClick={() => rowSheet.buttonOnClick(rowSheet.parameters, pos, data)} \n                                        className={genButtonStyle + ' ' + rowSheet.className} \n                                        disabled={props.error || rowSheet.disabled}>\n                                    {rowSheet.name}\n                                </button>\n                            </td>)\n                } else if (rowSheet.type === 'html') {\n                    html.push(<td>\n                                { rowSheet.html }\n                            </td>);\n                }\n            }\n        }\n\n        return html;\n    }\n\n    const eachRowInTable = (row, i) => {\n        let key = 'row_' + (start + i);\n        let pos = indexes[i];\n\n        let html = buildHTML(row, pos);\n\n        return (\n            <tr key={key}>\n                { html.map(row => row) }\n            </tr>\n        )\n    }\n\n    const saveButton = async() => {\n        if (validate() === true) {\n            let localData = [...data];\n            let newData = [];\n            for (let i = 0; i < localData.length; i++) {\n                if (localData[i].count > 0) {\n                    newData.push(localData[i]);\n                }\n            }\n\n            for (let i = 0; i < newData.length; i++) {\n                if (hasProperty(props, 'specialProcessingSave') === true) {\n                    newData[i] = props.specialProcessingSave (newData[i]);\n                }\n\n                delete newData[i].dirty;\n                delete newData[i].count;\n                \n                for (let j = 0; j < sheet.length; j++) {\n                    if (props.sheet[j].save === false) {\n                        delete newData[i][sheet[j].name];\n                    }\n                }\n            }\n\n            if (newData.length !== 0) {\n                if (hasProperty(props, 'saveFunct') === true) {\n                    props.saveFunct(newData);\n                }\n            }\n        }\n    }\n\n    const clearButton = () => {\n        functYes = clearButtonYes;\n        setConfirmMessage('Do you want to clear?')\n        setShowConfirm(true);\n    }\n\n    const clearButtonYes = () => {\n        populate(ADD, true);\n    }\n\n    const genButtonStyle = generateCSSButton('sw-theme_buttonStyle', props.error);\n\n    let title = null;\n\n    if (hasProperty(props, 'title') === true) {\n        title = <h1 className=\"sw-ss_center\">{props.title}</h1>;\n    }\n\n    return (\n        <div>\n            {title}\n            <SearchSortTable\n                data={data}\n                table={table}\n                MAX_ITEMS={(hasProperty(props, 'maxItems') === true) ? props.maxItems : 50}\n                eachRowInTable={eachRowInTable}\n                startEnd={startEnd}\n                indexing={indexing}\n                error={props.error}\n                scroll\n                nosearch\n                nofilter\n                noheaderborder\n                height={(hasProperty(props, 'height') === true) ? props.height : \"675px\"}>\n            </SearchSortTable>\n            <div className=\"sw-ss_center\">\n                {(hasProperty(props, 'noSave') === true) ? null : <button name=\"save\" className={genButtonStyle} onClick={saveButton }>Save</button> }\n                {(hasProperty(props, 'noClear') === true) ? null : <button name=\"clear\" className={genButtonStyle} onClick={clearButton}>Clear</button> }\n                {(hasProperty(props, 'noAddRows') === true) ? null : <button name=\"addrows\" className={genButtonStyle} onClick={() => populate(ADDITIONAL)}>Add Rows</button> }\n            </div>\n            <ConfirmModal show={showConfirm} yesFunct={functYes} closeFunct={setShowConfirm} message={confirmMessage} />\n        </div>\n    )\n}\n\nexport default SpreadSheet;\n", "import React from 'react';\n\nexport const StatusBox = ({ status }) => {\n  if (!status)\n    return null;\n\n  let errSection = null;\n  if (status.err) {\n    const errMsg = JSON.stringify(status.err, null, 2);\n    console.log('status.err:', status.err);\n    errSection = (<><br />{errMsg}</>);\n  }\n\n  return (\n    <>\n      {status.msg}\n      {errSection}\n    </>\n  );\n\n};\n", "\n// https://stackoverflow.com/questions/9847580/how-to-detect-safari-chrome-ie-firefox-and-opera-browser\n// Googling for browser reliable detection often results in checking the User agent string. This method is not reliable,\n// because it's trivial to spoof this value.\n// I've written a method to detect browsers by duck-typing.\n//\n// Only use the browser detection method if it's truly necessary, such as showing browser-specific instructions to install an extension. Use feature detection when possible.\n//\n// Demo: https://jsfiddle.net/6spj1059/\n\nvar window = (window) ? window : {}\nvar navigator = (navigator) ? navigator : {userAgent:\"\"}\nvar document = (document) ? document : {}\n\n// Opera 8.0+\nexport const isOpera = (!!window.opr && !!opr.addons) || !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;\n\n// Firefox 1.0+\nexport const isFirefox = typeof InstallTrigger !== 'undefined';\n\n// Safari 3.0+ \"[object HTMLElementConstructor]\"\nexport const isSafari = /constructor/i.test(window.HTMLElement) || (function (p) { return p.toString() === \"[object SafariRemoteNotification]\"; })(!window['safari'] || (typeof safari !== 'undefined' && window['safari'].pushNotification));\n\n// Internet Explorer 6-11\nexport const isIE = /*@cc_on!@*/false || !!document.documentMode;\n\n// Edge 20+\nexport const isEdge = !isIE && !!window.StyleMedia;\n\n// Chrome 1 - 79\nexport const isChrome = !!window.chrome && (!!window.chrome.webstore || !!window.chrome.runtime);\n\n// Edge (based on chromium) detection\nexport const isEdgeChromium = isChrome && (navigator.userAgent.indexOf(\"Edg\") != -1);\n\n// Blink engine detection\nexport const isBlink = (isChrome || isOpera) && !!window.CSS;\n\n", "\nexport const toCamelCase = (str) => {\n\n    return str.toLowerCase()\n            .replace(/_/g, ' ')\n            .replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (ltr, idx) => idx === 0 ? ltr.toLowerCase() : ltr.toUpperCase())\n            .replace(/\\s+/g, '')\n            .replace('#','');\n}", "\n// TODO: this is the last day oif the previous month !== to this months last day\n\nexport const lastOfMonth = () => {\n  let today = new Date();\n\n  // first day of next month\n  const first = new Date(today.getFullYear(),today.getMonth()+1,1)   // fixed ??? TODO: Test this\n  const last = new Date(first-1)     // last day of previous month\n\n  const mm = last.getMonth()+1    // ????\n  const month = (''+mm).padStart(2, '0')\n  return [last.getFullYear(), month, last.getDate()]\n}\n\nexport const todayString = () => {\n  let today = new Date();\n  let dd = today.getDate();\n  let mm = today.getMonth()+1;\n  const yyyy = today.getFullYear();\n  if(dd<10)\n  {\n      dd=`0${dd}`;\n  }\n\n  if(mm<10)\n  {\n      mm=`0${mm}`;\n  }\n  return `${mm}/${dd}/${yyyy}`;\n}\n", "\n\nimport { create } from 'zustand'        // zustand 1.4k  vs Recoil 1740k (1.74M)\n\nimport { toCamelCase } from './camel'\n\nconst storeInventory = {}     // where all the createStoreItem() items will be remembered by name\n\n// -------------------------------------------------------------------------------------------------\nexport const createStoreItem = (name, initialValue) => {\n    const setFn = toCamelCase('set '+name)\n\nconst useStore = create(set => ({\n    [name]: initialValue,\n    [setFn]: (newValue) => set(state => ({ [name]: newValue})),\n  }))\n\n  storeInventory[name] = useStore\n\n  return () => useStore(state => [state[name], state[setFn]])    // just the pieces we want out of the store\n}                                                                // to act like a hook\n\nstoreInventory[\"useUsername\"] = createStoreItem('username', '')   // useUsername() will be called later\n\n// -------------------------------------------------------------------------------------------------\nexport const useStoreItem = (name) => {\n    const setFn = toCamelCase('set '+name)\n\n    if (!storeInventory[name]) {\n      throw new Error(\"call createStoreItem() before calling useStoreItem().\")\n    }\n\n    const useStore = storeInventory[name]\n\n  return useStore(state => [state[name], state[setFn]])\n}\n\n// -------------------------------------------------------------------------------------------------\nexport const openGeneralStore = () => {       // must be called from inside a react component, usually App() or getUserInfo()\n\n    return storeInventory\n}\n\n\n\n\n// taken from https://github.com/pmndrs/zustand\n\n\n// const bears = useStore(state => state.bears)\n// const [nuts, honey] = useStore(state => [state.nuts, state.honey], shallow)\n// const [name, setFn] = useStore(state => [state[name], state[setFn]])\n/*\nconst useStore = create(set => ({\n  bears: 0,\n  increasePopulation: () => set(state => ({ bears: state.bears + 1 })),\n  removeAllBears: () => set({ bears: 0 })\n}))\n*/\n\n", "\nlet ltzCode = null;\n\nconst getLTZ = () => {\n\n  if (ltzCode == null) {\n    var now = (new Date()) + \"\"\n    var i = now.indexOf(\" GMT\");\n    if (i > -1)\n        ltzCode = now.substring(i,i+10)\n\n    console.log('ltzCode:',ltzCode);\n  }\n\n   return ltzCode\n}\n\nexport const localStrToDate = (target) => {\n\n  if (target == null)\n     return null;\n\n  var i = target.indexOf(\" GMT\");\n  if (i == -1)   // missing\n     target += getLTZ()\n  return new Date(target);\n\n}\n\n", "\nexport default function (yourComponent) {\n  // console.log('changeHandler generated.');\n\n  return (e) => {\n\n    if (typeof e === 'string')\n       return;   // passed in by Radio, can be ignored, next event has target.name\n\n    if (typeof e.preventDefault === 'function')\n        e.preventDefault();\n\n    if ('target' in e && 'name' in e.target && 'value' in e.target) {\n\n        var stateChange = {};\n        stateChange[e.target.name] = e.target.value;\n\n        // console.log(typeof e, e.target, ':', e.target.value, '->', e.target.name);\n\n        yourComponent.setState(stateChange);\n        }\n      else {\n          // console.log('something unusual here, expecting e.target.name e.target.value e:', typeof e, e);\n      }\n    }\n}\n\n", "// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n\n", "\nexport function now() { return new Date(); }\n\nconst twoDigit = (n) => {\n  return (n < 10) ? '0'+n : ''+n\n}\n\nexport const TS = () => {\n  const d = new Date()\n\n  return '['+\n         d.getFullYear()+'-'+\n         twoDigit(d.getMonth()+1)+'-'+\n         twoDigit(d.getDate())+' '+\n         twoDigit(d.getHours())+':'+\n         twoDigit(d.getMinutes())+':'+\n         twoDigit(d.getSeconds())+'.'+\n         d.getMilliseconds()+\n         ']'\n}", "\n// TODO remove the 2 from    text: \"Start Date2\"\n\n// import {pretty} from \"./Show\";\n\nconst dowList = [\"Sun\", \"Mon\", \"Tues\", \"Wed\", \"Thurs\", \"Fri\", \"Sat\"]\nconst MIStyle = {width: '2em', paddingRight: '0', paddingLeft: '0', textAlign: 'center'}\n\nexport const fields = {\n  firstName:    { type: \"text\",      name: \"firstName\",    text: \"First Name\",    placeholder: 'Jack',          required: true },\n  lastName:     { type: \"text\",      name: \"lastName\",     text: \"Last Name\",     placeholder: 'Doe',           required: true },\n  midItial:     { type: \"text\",      name: \"midItial\",     text: \"M.I.\",          placeholder: 'E',             required: false,  size:1, maxLength: 1, style: MIStyle},\n  email:        { type: \"email\",     name: \"email\",        text: \"Email\",         placeholder: 'jack@mail.com', required: true },\n  addressLine:  { type: \"text\",      name: \"addressLine\",  text: \"Address Line\",  placeholder: 'Awesome str 9', required: true },\n  postalCode:   { type: \"text\",      name: \"postalCode\",   text: \"Postal Code\",   placeholder: '12345',         required: true },\n  city:         { type: \"text\",      name: \"city\",         text: \"City\",          placeholder: 'Gotham',        required: true },\n  state:        { type: \"text\",      name: \"state\",        text: \"State\",         placeholder: 'Missouri',      required: true },\n  dob:          { type: \"date\",      name: \"dob\",          text: \"Date of Birth\", format: 'yyyy-mm-dd',         required: true },\n  startDate:    { type: \"date\",      name: \"startDate\",    text: \"Start Date\",    format: 'yyyy-mm-dd',         required: true },\n  endDate:      { type: \"date\",      name: \"endDate\",      text: \"End Date\",      format: 'yyyy-mm-dd',         required: true },\n  password:     { type: \"password\",  name: \"password\",     text: \"Password\",                                    required: true },\n  pwConfirm:    { type: \"password\",  name: \"pwConfirm\",    text: \"Password Confirmation\",                       required: true },\n  admin:        { type: \"chkBox\",    name: \"admin\",        text: \"Admin\",     selectedValue: \"Y\" },\n  event:        { type: \"choice\",    name: \"eventCode\",    text: \"Event\",                            },\n  slideID:      { type: \"choice\",    name: \"slideID\",      text: \"Slide ID\",                         },\n  dow:          { type: \"chkBoxes\",  name: \"dow\",          text: \"Days Of Week\",  options: dowList,  },\n  times:        { type: \"chkBoxes\",  name: \"times\",        text: \"Meeting Times\",                    },\n  slideObs:     { type: \"chkBoxes\",  name: \"slideObs\",     text: \"Observations\",                     },\n  comments:     { type: \"textArea\",  name: \"comments\",     text: \"Comments\",  placeholder: 'place your comments here...', required: false },\n}\n\n\nexport const applyOptions = (formFieldList, missing) => {\n\n  formFieldList.map( f => {\n    if ((f.type == 'choice' || f.type == 'chkBoxes') && missing[f.name]) {\n      // console.log(`assigning ${pretty(missing[f.name])} options to ${f.name}`);\n\n       if (f.options != missing[f.name]) {\n         // trigger a redraw because the options just changed\n       }\n\n       f.options = missing[f.name]\n    }\n  });\n\n  return formFieldList     // TODO: Need return a Deep Copy ?\n}\n", "import React, {useState, useEffect} from 'react';\n\nimport {fieldGeneratorLookup} from './FieldGenerator'\n\nconst createFields = (formStructure, formData, handleChange) => {\n  return formStructure.map((f,idx) => createField(f, idx, formData[f.name], handleChange) )\n}\n\n\nconst createField = (fieldStructure, idx, value, handleChange) => {\n\n  const f = {...fieldStructure, value}            // fieldStructure is a type, create an instance w/ field data\n\n  const gen = fieldGeneratorLookup(f.type)\n  let field = `unkknown field type: ${f.type}`\n  const ifRequired = (f.required) ? <span className=\"required\">*</span> : null\n  if (gen) {\n      try {\n          field = gen(f, handleChange)\n      } catch (e) {\n          const msg = `Error Creating Field type: ${f.type} [${idx}]`\n          console.log(msg);\n          console.log(JSON.stringify(fieldStructure, null, 2));\n          console.log(e);\n          console.log(e.stack());\n          field = msg\n      }\n  }\nreturn <label htmlFor={f.name} key={idx} className=\"form-group\"><span>{f.label}{ifRequired}</span>{field}</label>\n}\n\n\nconst FormFields = ({formStructure,formData,setFormData,showDebug}) => {\n\n  if (!formStructure) {\n     console.log('missing formStructure');\n     formStructure = []\n  }\n\n  // The following does not change, yet gets redefined every time, sigh... wastefull\n  // do not use useCallback\n  const handleChange = (e => {\n    if (showDebug) {\n      console.log(`FormFields.handleChange [${e.target.name}] = ${e.target.value};`);\n    }\n    setFormData({ ...formData, [e.target.name]: e.target.value })\n  })\n\n  const [fields, setFields] = useState( createFields(formStructure, formData, handleChange) );\n\n  useEffect(() => {\n     // console.log('   FormField useEffect formStructure:', formStructure.length);\n\n     setFields( createFields(formStructure, formData, handleChange) )\n  }, [formData])      // TODO:   research why this must be formData and not formStructure\n      // only @ creation and when the data changes becuase the structure might change,\n      // selection of one field might change the choices on another field.\n\nif (!fields) {\n    return \"<FormFields />   Somthing horrible: createFields() returned null\"\n}\n\nconst badEntry = fields.findIndex( element => element === null)\nif (badEntry !== -1) {\n    console.log({formStructure});\n    return `<FormFields />   Somthing horrible: createFields() returned [${badEntry}] as null`\n}\n\n\nreturn (\n  <>\n    {fields}\n  </>\n);\n};\n\nexport default FormFields;\n\n", "import React from 'react';\n\nimport {Choice} from './List'\nimport Input from \"./Input\"\nimport CheckBox from \"../CheckBox\"\nimport CheckBoxGroup from \"./CheckBoxGroup\"\nimport DateInput from \"../DateInput\"\n\nfunction isFunction(functionToCheck) {\n  return functionToCheck && {}.toString.call(functionToCheck) === '[object Function]';\n }\n\n\n\n const createFieldTextArea = (f, handleChange) => {\n\n  const { className, name, rows=1, cols=30, ...whatsleft  } = f\n\n  return  <textarea\n            {...whatsleft}\n            className={`input-field form-control ${className||\"\"}`}\n            name={name}\n            key={name}\n            rows={rows}\n            cols={cols}\n            onChange={handleChange}\n          />\n}\n\nconst createFieldText = (f, handleChange) => {\n\n      // type, name, id, text, value, placeholder, required\n      const { className, ...whatsleft  } = f\n\n      return <Input\n                {...whatsleft}\n                className={`input-field form-control ${className||\"\"}`}\n                handleChange={handleChange}\n              />\n  }\n\n  const createFieldChoice = (f, handleChange) => {\n\n        //    name, value\n        const { className, name, ...whatsleft  } = f\n        const options = isFunction(f.options) ? f.options() : f.options\n        return <Choice\n                  {...whatsleft}\n                  className={`select-field form-control ${className||\"\"}`}\n                  name={name}\n                  key={name}\n                  id={name}\n                  choices={options}\n                  onChange={handleChange} />\n    }\n\n\n  const createFieldChkBox = (f, handleChange) => {\n\n      //    name, value, selectedValue\n      const { className, name, ...whatsleft  } = f\n      const options = isFunction(f.options) ? f.options() : f.options\n\n      return <CheckBox\n                    {...whatsleft}\n                    className={`checkbox-field form-control ${className||\"\"}`}\n                    name={name}\n                    key={name}\n                    choices={options}\n                    onChange={handleChange} />\n  }\n\n  const createFieldChkBoxes = (f, handleChange) => {\n\n      const { className, name, ...whatsleft  } = f\n      const options = isFunction(f.options) ? f.options() : f.options\n\n      return <CheckBoxGroup\n                    {...whatsleft}\n                    className={`checkbox-group-field form-control ${className||\"\"}`}\n                    name={name}\n                    key={name}\n                    choices={options}\n                    onChange={handleChange} />\n  }\n\n  const createFieldDate = (f, handleChange) => {\n\n    const { className, name, format, ...whatsleft  } = f\n\n    return  <DateInput\n                    {...whatsleft}\n                    className={`date-field form-control ${className||\"\"}`}\n                    name={name}\n                    format={format}\n                    key={name}\n                    placeholder={format}\n                    onChange={handleChange} />\n  }\n\n  const createFieldNumber = (f, handleChange) => {\n\n    // type, name, id, text, value, placeholder, required\n    const { className, ...whatsleft  } = f\n\n    return <Input\n              {...whatsleft}\n              type=\"number\"\n              className={`input-field form-control ${className||\"\"}`}\n              handleChange={handleChange}\n            />\n  }\n\n  const fieldGenerators = {\n    'text':       createFieldText,\n    'textArea':   createFieldTextArea,\n    'password':   createFieldText,\n    'email':      createFieldText,\n    'choice':     createFieldChoice,\n    'chkBox':     createFieldChkBox,\n    'chkBoxes':   createFieldChkBoxes,\n    'date':       createFieldDate,\n    'number':     createFieldNumber,\n    // TODO: Radio buttons, DoubleListBox, List, File, (incomplete list)\n  }\n\n  //  add ability to add new Form field types\n  export const setFieldGenerator = (fieldType, func) => {\n      fieldGenerators[fieldType] = func\n  }\n\n  export const fieldGeneratorLookup = (fieldType) => {\n    return fieldGenerators[fieldType]\n  }\n", "import React, { Fragment } from 'react';\n\n/*\n\n  TODO:  Handle values other than Strings or something that converts to strings\n\n  currently supports:\n\n  const userList = {0: 'Vacancy, null', 2: 'Hernandez, April', 128: 'Lemon, Brian', 901: 'NCTR, Demo', 1500: 'Rice, Antonie', 1501: 'Woody, Jameca'\u00A0\u2026}\n\n     <Choice name=\"NCTR_ID\" choices={userList} value=2/>\n\n  OR:\n\n  const userList = ['Vacancy, null','Hernandez, April','Lemon, Brian','NCTR, Demo','Rice, Antonie','Woody, Jameca','Smith, Sherry','Brooks, Roben','Monk, Mary', ... ]\n\n     <Choice name=\"NCTR_ID\" choices={userList} value=\"Hernandez, April\"/>\n*/\n\n// --------------------------------------------------------------------------------------------------------------------------------------------------\nconst compareString = (a,b) => {\n   a = a.toUpperCase()\n   b = b.toUpperCase()\n\n   if (a < b)  return -1\n   if (a > b)  return 1\n\n   return 0\n}\n\n// --------------------------------------------------------------------------------------------------------------------------------------------------\nconst sortKeysByValue = (obj) => {\n  const keys = Object.keys(obj)\n\n  const list = keys.map(k => { return {id: k, value: obj[k]} })\n                   .sort( (a,b) => compareString(a.value, b.value))\n\n  return list.map(item => item.id)\n}\n\n// --------------------------------------------------------------------------------------------------------------------------------------------------\nexport const Choice = (propsIn) => {\n\n    const {list, choices, size, ...props} = propsIn\n    const siz = size || 10;\n    const opt = list || choices || []\n\n    const isKeyed = ( !Array.isArray(opt) )\n    const keys = (isKeyed) ? sortKeysByValue(opt) : opt     // origianlly       const keys = (isKeyed) ? Object.keys(opt) : opt\n\n    const genOption = (el, k) => {\n      if (isKeyed) {\n        return (opt[el] == props.value) ?\n          <option key={k} value={el} selected={true}>{opt[el]}</option> :                 // <option key=\"1\" value=\"2\" selected={true}>'Hernandez, April'</option>\n          <option key={k} value={el}>{opt[el]}</option>\n      } else {\n        return (el == props.value) ?\n            <option key={k} value={el} selected={true}>{el}</option> :\n            <option key={k} value={el}>{el}</option>\n      }\n    }\n\n\n    if ( !isKeyed && typeof(props.value) == 'string' &&  Array.isArray(opt) && !opt.includes(props.value) )\n       {\n         // console.log(`Adding missing default value: '${props.value}' to ${opt}`);\n         console.log(`Adding missing default value: '${value}' to ${props.name} [${opt.length}]`);\n         opt.unshift(props.value)\n       }\n\n    if (props.multiple) {\n      return <Fragment>\n                <select multiple size={siz} {...props} >\n                  {keys.map( (el,k) => genOption(el,k) )}\n                </select>\n            </Fragment>;\n    }\n    else {\n      return <Fragment>\n                <select {...props} >\n                  {keys.map( (el,k) => genOption(el,k) )}\n                </select>\n            </Fragment>;\n    }\n}\n\nexport const List = (props) => <Choice multiple={true} {...props} />\n", "import React from \"react\";\n\n// import classes from \"./Input.module.css\";\n//         className={classes.input}\n\nconst Input = (props) => {\n\n  // optional:     maxLength, size,\n  //         maxLength={maxLength}\n //          size={size}\n\n\n  const { className, type, name, text, handleChange,\n          id = name,\n          value = \"\",\n          placeholder = text,\n          required = false,\n          ...whatsleft             } = props\n\n  return (\n      <input\n        className={className}\n        key={id}\n        type={type}\n        name={name}\n        value={value}\n        id={id}\n        placeholder={placeholder}\n        required={required}\n        onChange={handleChange}\n        {...whatsleft}\n      />\n  );\n};\n\nexport default Input;\n", "import React, {useState} from \"react\";\nimport CheckBox from '../CheckBox';\n\nconst CheckBoxGroup = ({\n  choices,\n  name,\n  values,\n  onChange,\n  className\n}) => {\n\n  if (!choices)\n    choices = []\n\n  const n = choices.length\n  if (!values)\n     values = Array(n).fill(\"\")\n\n  const [items, setItems] = useState(values);  // assumed values is an array\n\n  const setOneItem = e => {\n    let arr = [...items]\n    arr[e.target.name] = e.target.value\n    setItems(arr);\n\n    e.target.name = name     // synthesize entire group change on any change\n    e.target.value = arr\n    onChange(e)\n  };\n\n  if (choices.length === 0)  // need a non empty div for layout\n  return (\n    <div className={className}>\n      &nbsp; &nbsp; &nbsp; &nbsp;\n    </div>\n  );\n\n\n  return (\n    <div className={className}>\n      {choices.map( (word,idx) =>\n        <CheckBox\n          key={idx}\n          id={name+'-'+idx}\n          selectedValue={word}\n          text={word}\n          name={idx}\n          value={items[idx]}\n          onChange={setOneItem}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default CheckBoxGroup;\n", "\nexport const pretty = (obj) => JSON.stringify(obj, null, 2)\n\n\nexport const Show = ({data,hide}) => {\n  const _data = {...data}\n\n  // dont show the form structure or  any other field listed as hidden\n  if (hide)\n    hide.map(f => { delete _data[f] })\n\n  return <pre>\n          {pretty(_data)}\n        </pre>\n}\n\n\n", "import React, {useState, useEffect} from 'react';\n// import ReactJson from 'react-json-view'\nimport {FormFields, applyOptions} from \".\";\n\nconst Form = (props) => {\n\n  if (props.debug) {\n    console.log(\"------- Form:\");     // , props);\n  }\n\n  const heading = (props.heading) ? props.heading : \"\"\n  const debug = (props.debug || props.show)\n  const doneBtnLabel = (props.doneBtnLabel) ? props.doneBtnLabel : null\n  const businessLogic = (props.businessLogic) ? props.businessLogic : (old, changed) => changed\n\n  const [formData, setFormDataInternal] = useState({});\n  const [formList, setFormList] = useState( props.form );\n\n  useEffect(() => {\n    if (debug) {\n       console.log('InitialData setup');\n    }\n    setFormData(props.data)   // initialData\n  }, [])    // only once\n\n  useEffect(() => {\n     if (debug) {\n       console.log(\"   Form: props.form changed\");\n     }\n\n     setFormData(props.data)        // any time the props.data or props.form changes\n  }, [props.form])      // formData and formList are recalculated\n\n  useEffect(() => {\n    if (debug) {\n      console.log(\"   Form: props.data changed\");\n    }\n\n    setFormData(props.data)        // any time the props.data or props.form changes\n  }, [props.data])      // formData and formList are recalculated\n\n const setFormData = (newData) => {\n    // console.log('setFormData(newData) given: ', newData);\n\n    const [modState, formOpts] = businessLogic(formData, newData)\n    setFormList( applyOptions(props.form, formOpts) )    // TODO: unneeded re-render if\n    setFormDataInternal(modState)\n  }\n\n  // TODO: need to check which fields are required and disable submit button (if it is here)\n  //       <form onSubmit={props.onSubmit}>\n\n  const flexParent = {display: 'flex', flexDirection:'row', }\n  const flexChild = (props.show) ? {flex:\"50%\"} : {}\n  const rightChild = { ...flexChild, borderLeft: 'solid gray', borderWidth: 'thin' }\n\n  const onSubmit = e => {\n    e.preventDefault();\n    props.onSubmit(formData)\n  };\n\n  const doneButton = (doneBtnLabel) ? <input type=\"button\"  onClick={onSubmit} value={doneBtnLabel} /> : null\n\n  return (\n    <div style={flexParent}>\n\n        <div style={flexChild}>\n          <div className={props.className}>\n            <div className=\"heading\">{heading}</div>\n            <FormFields\n                formStructure={formList}\n                formData={formData}\n                setFormData={setFormData}\n                showDebug={debug}\n            />\n            <div className=\"footer\">\n              {doneButton}\n            </div>\n          </div>\n        </div>\n\n      {props.show &&\n        <div style={rightChild}>\n          <ReactJson name=\"data\" src={formData} />\n          <hr/>\n          <ReactJson name=\"formList\" src={formList} />\n        </div>\n      }\n\n    </div>)\n}\n\nexport default Form;\n", "// possibly replace the use of this source file with\n//    https://use-http.com/#/?id=examples-videos\n//                 useFetch\n// \uD83D\uDC36 React hook for making isomorphic http requests\n\n\n// taken from: https://medium.com/@cwlsn/how-to-fetch-data-with-react-hooks-in-a-minute-e0f9a15a44d6\n// Author: Connor Wilson\n//  Tech Lead at @JoinLeague, Instructor Ops Lead at @itsbridgeschool. Building things and teaching folks in Toronto.\n\n// How to Use:\n//    const [data, loading] = useFetch(pastDataURL);\n\n\nimport { useState, useEffect } from \"react\";\n\nfunction useFetch(url) {\n  const [data, setData] = useState([]);\n\n  async function fetchUrl(url) {\n    try {\n    const response = await fetch(url);\n    const json = await response.json();\n\n    setData(json);\n    }\n    catch(err) {\n      console.log('Unable to load err:', err);\n      console.log('Unable to load url:', url);\n    }\n  }\n\n  useEffect(() => {\n    fetchUrl(url);\n  }, [url]);\n\n  return [data];\n}\n\nexport default useFetch;\n"],
  "mappings": "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",
  "names": ["React", "React", "React", "React", "React", "React", "defProps", "React", "React", "value", "React", "value", "React", "React", "useRef", "useEffect", "React", "list", "value", "hasProperty", "useRef", "props", "choices", "useEffect", "React", "React", "defProps", "React", "React", "useState", "React", "useState", "useState", "React", "useState", "React", "React", "useState", "hasProperty", "value", "React", "React", "useState", "useEffect", "React", "useState", "useEffect", "useState", "menuTree", "useEffect", "value", "React", "useState", "React", "useEffect", "React", "useState", "React", "useState", "React", "checked", "unchecked", "React", "useState", "useEffect", "hasProperty", "hasProperty", "React", "useState", "table", "search", "data", "useEffect", "title", "text", "value", "controlBreakInfo", "indexes", "length", "end", "row", "footer", "maximum", "dateTime", "searchItem", "start", "React", "useState", "React", "useState", "useEffect", "hasProperty", "React", "data", "useState", "useEffect", "start", "indexes", "value", "genButtonStyle", "row", "React", "window", "navigator", "document", "now", "React", "useState", "useEffect", "React", "React", "Fragment", "list", "Choice", "React", "value", "React", "useState", "useState", "React", "React", "Choice", "value", "React", "useState", "useEffect", "data", "React", "useState", "useEffect", "useState", "useEffect", "React", "useState", "useEffect", "data", "url"]
}
