{"version":3,"file":"index.js","mappings":"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","sources":["webpack://simple-widgets/webpack/universalModuleDefinition","webpack://simple-widgets/./src/AlertModal.js","webpack://simple-widgets/./src/CheckBox.js","webpack://simple-widgets/./src/ChoiceText.js","webpack://simple-widgets/./src/Common.js","webpack://simple-widgets/./src/ConfirmModal.js","webpack://simple-widgets/./src/ContextMenu.js","webpack://simple-widgets/./src/DateFunct.js","webpack://simple-widgets/./src/DateInput.js","webpack://simple-widgets/./src/DoubleListBox.js","webpack://simple-widgets/./src/ErrorModal.js","webpack://simple-widgets/./src/InputFile.js","webpack://simple-widgets/./src/Invalid.js","webpack://simple-widgets/./src/List.js","webpack://simple-widgets/./src/Modal.js","webpack://simple-widgets/./src/Radio.js","webpack://simple-widgets/./src/SearchFunct.js","webpack://simple-widgets/./src/SearchSortTable.js","webpack://simple-widgets/./src/Slider.js","webpack://simple-widgets/./src/Theme.js","webpack://simple-widgets/./src/browserDetect.js","webpack://simple-widgets/./src/date2str.js","webpack://simple-widgets/./src/localStrToDate.js","webpack://simple-widgets/./src/makeChangeHandler.js","webpack://simple-widgets/external umd {\"commonjs\":\"react\",\"commonjs2\":\"react\",\"amd\":\"React\",\"root\":\"React\"}","webpack://simple-widgets/external umd {\"commonjs\":\"react-dom\",\"commonjs2\":\"react-dom\",\"amd\":\"ReactDOM\",\"root\":\"ReactDOM\"}","webpack://simple-widgets/webpack/bootstrap","webpack://simple-widgets/webpack/runtime/compat get default export","webpack://simple-widgets/webpack/runtime/define property getters","webpack://simple-widgets/webpack/runtime/hasOwnProperty shorthand","webpack://simple-widgets/webpack/runtime/make namespace object","webpack://simple-widgets/webpack/runtime/publicPath","webpack://simple-widgets/./src/index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"), require(\"react-dom\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"simple-widgets\", [\"React\", \"ReactDOM\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"simple-widgets\"] = factory(require(\"react\"), require(\"react-dom\"));\n\telse\n\t\troot[\"simple-widgets\"] = factory(root[\"React\"], root[\"ReactDOM\"]);\n})(self, function(__WEBPACK_EXTERNAL_MODULE_react__, __WEBPACK_EXTERNAL_MODULE_react_dom__) {\nreturn ","import React, { useState, useEffect } from 'react';\n\nimport Modal from './Modal.js';\n\nconst defProps = {\n    show: true,\n    closeFunct: () => {},\n    message: 'No Alert message given',\n}\n\nconst AlertModal = inProps => {\n\n    const props = {...defProps, ...inProps};\n\n    if (('show' in inProps) === false) {\n        console.error ('AlertModal: The show property is not present');\n    }\n\n    if (('closeFunct' in inProps) === false) {\n        console.error ('AlertModal: The closeFunct property is not present');\n    }\n\n    return (\n        <div>\n            {\n                props.show === true ?  (\n                    <Modal>\n                        <div>\n                            <h1>{(props.message === '') ? defProps.message : props.message}</h1>\n                            <button name=\"ok\" onClick={() => props.closeFunct(false)} className=\"sw-modal_abuttonStyle\" >OK</button>\n                        </div>\n                    </Modal>\n                ) : null\n            }\n        </div>\n    );\n}\n\nexport default AlertModal;\n","import React from 'react';\n\n  /*\n    ☐  U+2610 &#9744;  Ballot Box\n    ☑  U+2611 &#9745;  Ballot Box with Check\n    ☒  U+2612 &#9746;  Ballot Box with X\n  */\n\n const checked = String.fromCharCode(9745) \n const unchecked = String.fromCharCode(9744) \n\nconst CheckBox = props => {\n  const handle = (e) => {\n    if (typeof e.preventDefault === 'function')\n        e.preventDefault();\n    e.target.name = props.name;\n    e.target.value = (props.value === props.selectedValue) ? '' : props.selectedValue;\n    props.onChange(e);\n  }\n\n  const {selectedValue, text, children, ...rest} = props\n\n  const isChecked = props.value === selectedValue\n  const symbol = (isChecked) ? checked : unchecked\n\n  return <button type=\"button\" onClick={handle} className=\"sw-checkbox_defaultStyle\" {...rest}>\n         {symbol}\n         {text}\n         {children}\n         </button>\n}\n\nexport default CheckBox\n","import React from 'react';\n\n// currently only accepts property choices as ['one','two']\n\nconst ChoiceText = inProps => {\n\n    let props = {...inProps};\n    const pref = (props.hasOwnProperty('name')) ? props.name + '_' : '';\n    const choices = props.choices;\n    delete props.choices;\n\n    return <span>\n               <input type=\"text\" {...props} />\n               <datalist id={props.list} >\n                 {choices.map( (el, k) => <option key={pref + k} value={el}>{el}</option>)}\n               </datalist>\n          </span>;\n}\n\nexport default ChoiceText;","\n/*****************************************************************************\n *\n *  This method will sanitize any free format entry by making sure the text\n *  does not start with a colon (:).\n *\n *  @param text the text that is to be checked for any problems\n *  @param item Used to identify the item being sanitized\n *\n *  @return returns an object that contains a valid field and a message\n *          field.  The valid field is a boolean value that returns true if \n *          the text is sanitized and false if it does not.  The message field\n *          will be blank if the valid field is true.  The message field will\n *          contain a message of why the field in not valid if the valid field\n *          is false.\n *\n ****************************************************************************/\nexport const sanitize = (text, item) => {\n    const table = [\n        'SELECT',\n        'DELETE',\n        'INSERT',\n        'UPDATE',\n        'ALTER'\n    ];\n    let message = null;\n\n    if (text === null || text === '') {\n        return { valid: true, message: ''};\n    }\n\n    if (text.startsWith(':')) { // Check to see if the text starts with a colon (:)\n        message = item + ' can not start with a colon (:)';\n        return { valid: false, message: message };\n    }\n\n    for (let i = 0; i < table.length; i++) {\n        if (text.toUpperCase().startsWith(table[i])) {\n            message = item + ' can not start with the word ' + table[i];\n            return { valid: false, message: message };\n        }\n    }\n\n    return { valid: true, message: ''} ;  // No problems encountered\n}\n\n/********************************************************************************************\n * \n * This function will take a floating point value and format it as a dollar amount.  It will\n * contain a $ at the front of the number, commas in the appropriate places (every three \n * decimal places from right to left), a decimal point, and two digits right of the decimal.\n * For example: 12345.6789, will transformed to $12,345.68.\n * \n * @param {*} amount        the floating point number to be translated in the money format\n * @param {*} decimalCount  number of places right of the decimal point (default is 2 if not \n *                          present)\n * @param {*} decimal       symbol for the decimal point (default is a period (.), if not \n *                          present)\n * @param {*} thousands     the seperator of every three digits from right to left (default \n *                          is a comma (,), if not present)\n * @param {*} dollarSign    the value at the beginning of the number (default is a dollar \n *                          sign ($), if not present)\n * \n **********************************************************************************************/\nexport const formatMoney = (amount, decimalCount = 2, decimal = \".\", thousands = \",\", dollarSign = '$') => {\n    try {\n        // Truncate to the apprpriate number of decimals after the decimal point\n        decimalCount = Math.abs(decimalCount);\n        decimalCount = isNaN(decimalCount) ? 2 : decimalCount;\n    \n        // Determine if the number is negative or positive\n        const negativeSign = amount < 0 ? \"-\" : \"\";\n    \n        // Determine where the thousands seperators belong in the number\n        let i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();\n        let j = (i.length > 3) ? i.length % 3 : 0;\n    \n        // Return the money formatted number\n        return dollarSign + negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\\d{3})(?=\\d)/g, \"$1\" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : \"\");\n    } catch (e) {\n        console.log(e)\n    }\n}","import React from 'react';\n\nimport Modal from './Modal.js';\n\nconst defProps = {\n    show: true,\n    yesFunct: () => {},\n    noFunct: () => {},\n    closeFunct: () => {},\n    message: 'No Confirm message given',\n}\n\nconst ConfirmModal = inProps => {\n    const props = {...defProps, ...inProps};\n\n    if (('show' in inProps) === false) {\n        console.error ('ConfirmModal: The show property is not present');\n    }\n\n    if (('yesFunct' in inProps) === false) {\n        console.error ('ConfirmModal: The yesFunct property is not present');\n    }\n\n    if (('noFunct' in inProps) === false && ('closeFunct' in inProps) === false) {\n        console.error ('ConfirmModal: The closeFunct property is not present');\n    }\n\n    return (\n        <div>\n            {\n                props.show === true ?  (\n                    <Modal>\n                        <div>\n                            <h1>{(props.message === '') ? defProps.message : props.message}</h1>\n                            <button name=\"yes\" onClick={(async) => processYesFunct()} className=\"sw-modal_cbuttonStyle\" >Yes</button>\n                            <button name=\"no\" onClick={(async) => processNoFunct()} className=\"sw-modal_cbuttonStyle\" >No</button>\n                        </div>\n                    </Modal>\n                ) : null\n            }\n        </div>\n    );\n\n    function processYesFunct() {\n        if (('noFunct' in inProps) === true && ('closeFunct' in inProps) === false) {\n            props.noFunct(false);\n        } else {\n            props.closeFunct(false);\n        }\n\n        if (props.yesFunct !== null) {\n            props.yesFunct();\n        }\n    }\n\n    function processNoFunct() {\n        if (('noFunct' in inProps) === true && ('closeFunct' in inProps) === false) {\n            props.noFunct(false);\n        } else {\n            props.closeFunct(false);\n        }\n\n        if (props.noFunct !== null) {\n            props.noFunct();\n        }\n\n    }\n}\n\nexport default ConfirmModal;","import React, { useState, useEffect } from 'react';\n\nconst ContextMenu = (propsIn) => {\n    console.log ('props', propsIn);\n    const { positionX, positionY, noLeave, noCancel, menu, ...props } = propsIn;\n\n    const propsPositionX = positionX || 10;\n    const propsPositionY = positionY || 10;\n    const propsNoLeave = noLeave || false;\n    const propsNoCancel = noCancel || false;\n    const propsMenu = menu || [];\n\n    const menuPositionStyle = {\n        left: propsPositionX,\n        right: propsPositionY,\n    }\n\n    function cancelButton() {\n        props.closeFunct (false);\n    }\n\n    function execute (funct) {\n        funct();\n        props.closeFunct(false);\n    }\n\n    function mouseLeave() {\n        console.log ('mouseLeave');\n        if (propsNoLeave === false) {\n            props.closeFunct(false);\n        }\n    }\n\n    function buildMenuItem(row, i) {\n        let key = 'row_' + props.name + i;\n\n        return (\n            <div>\n                <span className=\"sw-cm_contextMenuHov\" key={key} onClick={() => execute(row.funct)}>{row.name}</span><br /><br />\n            </div>\n        )\n    }\n\n    if (props.show === true) {\n        return (\n            <div className=\"sw-cm_contextMenuHov sw-cm_menuStyle\" onMouseLeave={mouseLeave} style={menuPositionStyle}>\n                {propsMenu.map(buildMenuItem)}\n                { (propsNoCancel) ? <br /> : <span><span className=\"sw-cm_contextMenuHov\" key=\"cancelKey\" onClick={cancelButton}>Cancel</span><br /><br /></span> }\n            </div>\n        )\n    } else {\n        return null;\n    }\n}\n\nexport default ContextMenu;","/***************************************************************************\n * \n * This will convert a date from the YYYY-MM-DD format to the MM/DD/YYYY \n * format.\n * \n * @param {*} convDate the date in the YYYY-MM-DD format\n * \n ***************************************************************************/\nexport const convertDate = (convDate) => {\n    if (convDate === null) return null;\n    if (convDate.indexOf('-') === -1) return convDate;\n\n    let date = convDate.split('-');\n    return date[1] + '/' + date[2] + '/' + date[0]; \n}\n\n/****************************************************************************\n * \n * This will convert a date and time in the YYYY-MM-DDTHH:MM:SS.sss format\n * to the MM/DD/YYYY HH:MM:SS format.\n * \n * @param {*} dateAndTime the date in the YYYY-MM-DDTHH:MM:SS.sss format\n * \n ****************************************************************************/\nexport const dateTime = (dateAndTime) => {\n    if (dateTime === null) return null;\n\n    let splitDT = dateAndTime.split('T');   // Split the date and time\n    let date = splitDT[0].split('-');       // Split the date\n    let partTime = splitDT[1].split('.');   // Remove the microseconds\n    let time = partTime[0].split(':');      // Split the time\n\n    return date[1] + '/' + date[2] + '/' + date[0] + ' ' +\n                time[0] + ':' + time[1] + ':' + time[2];\n}\n\n/***************************************************************************\n * \n * If value contains a single digit, it will place a 0 in front of the\n * single digit.\n * \n * @param {*} value the value to determine whether a 0 should be placed\n *                  in front of the single digit\n * \n ****************************************************************************/\nexport const addDigit = (value) => {\n    let newValue = null;        // Value to be returned\n    if (value.length === 1) {   // Value is a single digit\n        newValue = '0' + value;\n        return newValue;\n    }\n\n    return value;\n}\n\n/*****************************************************************************\n * \n * This will return the current date and time in the MM/DD/YYYY HH:MM:SS \n * format.\n * \n *****************************************************************************/\nexport const currentDateTime = () => {\n    let today = new Date(); // Current date and time\n    return addDigit((today.getMonth() + 1).toString()) + '/' + \n            addDigit(today.getDate().toString()) + '/' + \n            today.getFullYear().toString() + ' ' +\n            addDigit(today.getHours().toString()) + ':' + \n            addDigit(today.getMinutes().toString()) + ':' + \n            addDigit(today.getSeconds().toString()); \n}\n\n/*****************************************************************************\n * \n * This will return the current date in the MM/DD/YYYY format.\n * \n *****************************************************************************/\nexport const currentDate = () => {\n    let today = new Date();\n    return addDigit((today.getMonth() + 1).toString()) + '/' + \n           addDigit(today.getDate().toString()) + '/' + \n           today.getFullYear().toString();\n}\n\n/*****************************************************************************\n * \n * This will return the date that Oracle expects to receive as a string.  The\n * format will be YY-MON-DD HH:MM:SS.sss.\n * \n ******************************************************************************/\nexport const currentDBDateTime = () => {\n    let today = new Date();\n    \n    return today.getFullYear().toString().substr(2, 2) + '-' +  // Two digit year\n            monthName(today.getMonth()) + '-' +             // Month as a three letter abbreviation\n            addDigit(today.getDate().toString()) + ' ' +\n            addDigit(today.getHours().toString()) + ':' + \n            addDigit(today.getMinutes().toString()) + ':' + \n            addDigit(today.getSeconds().toString()) + '.' +\n            today.getMilliseconds().toString();\n}\n\n/*********************************************************************************\n * \n * This will place the current date in the YYYY-MM-DD format.\n * \n *********************************************************************************/\nexport const currentDBDate = () => {\n    let today = new Date(); // Get the current date\n    return today.getFullYear().toString() + '-' +   // Format the date in the YYYY-MM-DD format\n            addDigit((today.getMonth() + 1).toString()) + '-' + \n            addDigit(today.getDate().toString());\n}\n\n/**********************************************************************************\n * \n * The will take a date in the MM/DD/YYYY format and convert it to the YYYY-MM-DD \n * format.\n * \n * @param {*} date  the date in the MM/DD/YYYY format\n * \n **********************************************************************************/\nexport const dbDate = (date) => {\n    let split = date.split('/');    // Divide the MM/DD/YYYY into individual components\n    return split[2] + '-' + // Convert to the YYYY-MM-DD format\n            split[0] + '-' +\n            split[1];\n}\n\n/*****************************************************************************\n *\n *  This will convert month as a number into a three letter month name.\n *\n *  @param month the month as a number between 0 and 11\n *\n *  @return returns the three letter month abbreviation\n *\n ****************************************************************************/\nexport const monthName = (month) => {\n    switch (month) {\n        case 0: return 'JAN';\n        case 1: return 'FEB';\n        case 2: return 'MAR';\n        case 3: return 'APR';\n        case 4: return 'MAY';\n        case 5: return 'JUN';\n        case 6: return 'JUL';\n        case 7: return 'AUG';\n        case 8: return 'SEP';\n        case 9: return 'OCT';\n        case 10: return 'NOV';\n        case 11: return 'DEC';\n    }\n}\n\n","import React, {useState, useEffect} from 'react';\n\n// import Calendar from 'react-calendar';    now only needed for IE\n// import 'react-calendar/dist/Calendar.css';\n\n// import formatDateToStr from 'dateformat';\nimport {date2str} from \"./date2str\"\nimport {localStrToDate} from \"./localStrToDate\";\nimport {isSafari, isIE} from './browserDetect'\n\nconst DateInput = (props) => {\n\n    const [showCalender, setShowCalender] = useState(false);\n\n    const f = {...props}\n\n    if (!f.value)          // undefined causes React to think\n      f.value = \"\"        // A component is changing an uncontrolled input to be controlled.\n\n    if (f.value instanceof Date) {\n      f.dateValue = f.value\n      f.value = date2str(f.value, f.format)\n    } else {\n      f.dateValue = localStrToDate(f.value)\n    }\n\n    const handleCalendarChange = (value) => {\n      const e = {}\n      e.target = {}\n      e.target.name = f.name;\n      e.target.value = date2str(value, f.format)\n      f.onChange(e);\n    }\n\n    const triangle = (showCalender) ? <>&#9650;</> : <>&#9660;</>     // 9650   BLACK UP-POINTING TRIANGLE     9660   BLACK DOWN-POINTING TRIANGLE\n\n    //  pattern=\"(?:19|20)\\[0-9\\]{2}-(?:(?:0\\[1-9\\]|1\\[0-2\\])-(?:0\\[1-9\\]|1\\[0-9\\]|2\\[0-9\\])|(?:(?!02)(?:0\\[1-9\\]|1\\[0-2\\])-(?:30))|(?:(?:0\\[13578\\]|1\\[02\\])-31))\"\n    // title=\"Enter a date in this format YYYY-MM-DD\"\n/*\n    if (isIE) {                  // isSafari  prior to April 2021\n       return  <>\n              <input type=\"text\"\n                    size={10}\n                    data-date-format={f.format}\n                    {...f}\n                    />\n               <button onClick={() => setShowCalender(!showCalender)}>{triangle}</button>\n\n               {showCalender &&\n                <>\n                    <br></br>\n                    <div style={{zIndex: 10, position: 'absolute'}}>\n                    <Calendar\n                          autoFocus\n                          name={f.name}\n                          value={f.dateValue}\n                          onChange={handleCalendarChange} />\n                    </div>\n                </>}\n\n            </>\n    } else {\n*/      \n    return  <input type=\"date\"\n              className=\"date-field\"\n              placeholder={f.format}\n              data-date-format={f.format}\n              key={f.name}\n              name={f.name}\n              value={f.value}\n              onChange={f.onChange} />\n/*\n    }\n*/    \n}\n\n\nexport default DateInput;","\nimport React, { useState, useRef } from 'react';\n\nimport { List } from './List.js';\nimport '../lib/theme.css';\nimport '../lib/doubleListBox.css';\n\nconst hasProperty = (obj, propName) => { return !!Object.getOwnPropertyDescriptor(obj, propName);}\n\nconst DoubleListBox = props => {\n    const leftRef = useRef();\n    const rightRef = useRef();\n\n    const [choices, setChoices] = useState([...props.choices || []]);\n    const [leftValues, setLeftValues] = useState(choices.filter( item => ![...props.value || []].find(r => r === item)));\n    const [rightValues, setRightValues] = useState([...props.value || []]);\n    const [leftSelections, setLeftSelections] = useState([]);\n    const [rightSelections, setRightSelections] = useState([]);\n\n    const reset = (props) => {\n\n        if (!props.value) {\n            console.log(\"DoubleListBox props 'value' field is missing.\");\n        }\n    \n        if (!props.choices) {\n            console.log(\"DoubleListBox props 'choices' field is missing.\");\n        }\n    \n        const choices = [...props.choices || []]\n        const right = [...props.value || []]\n        const left = choices.filter( item => !right.find(r => r === item))  // not in the right\n        \n        setChoices(choices);\n        setLeftValues(left);\n        setRightValues(right);\n        setLeftSelections([]);\n        setRightSelections([]);\n    }\n\n    const reportChange = (right) => {\n        let compName = 'DoubleListBox';\n        if (hasProperty(props, 'name') === true) {\n            compName = props.name;\n        }\n        \n        // dont modify 'e', a Synthetic Event\n        props.onChange({target: {name: compName, value: right}});\n    }\n\n    const add = (a,b) => {\n        let ans = [...a];\n        for (let i = 0; i < b.length; i++) {\n            ans.push (b[i]);\n        }\n        return ans\n    }\n\n    const sub = (a,b) => {\n        let ans = [];\n        for (let i = 0; i < a.length; i++) {\n            if ( !b.includes(a[i]) )\n               ans.push (a[i]);\n        }\n        return ans\n    }\n\n    const moveRightSelectButton = (e) => {\n        let right = add(rightValues, leftSelections)\n        let left =  sub(leftValues, right)\n\n        setLeftValues(left);\n        setRightValues(right),\n        setLeftSelections([]);\n        reportChange(right);\n\n        clearSelections();\n    }\n\n    const clearSelections = () => {\n        const leftBox = leftRef.current;\n        const rightBox = rightRef.current;\n\n        for (let i = 0; i < leftBox.length; i++) {\n            leftBox[i].selected = false;\n        }\n\n        for (let i = 0; i < rightBox.length; i++) {\n            rightBox[i].selected = false;\n        }\n    }\n\n    const moveLeftSelectButton = (e) => {\n        let left = add(leftValues, rightSelections)\n        let right =  sub(rightValues, left)\n\n        setLeftValues(left);\n        setRightValues(right);\n        setRightSelections([]);\n        reportChange(right);\n\n        clearSelections();\n    }\n\n    const moveRightAllButton = (e) => {\n        let left = leftValues;\n        let right = [...rightValues];\n\n        for (let i = 0; i < left.length; i++) {\n            right.push (left[i]);\n        }\n\n        setLeftValues([]);\n        setRightValues(right);\n        setLeftSelections([]);\n        reportChange(right);\n    }\n\n    const moveLeftAllButton = (e) => {\n        let left = [...leftValues];\n        let right = rightValues;\n\n        for (let i = 0; i < right.length; i++) {\n            left.push (right[i]);\n        }\n\n        setLeftValues(left);\n        setRightValues([]);\n        setRightSelections([]);\n        reportChange([]);\n    }\n\n    const leftHandleChange = (e) => {\n        if (typeof e === 'string')\n          return;   // Passed in by Radio, can be ignored, next event has target.name\n\n        if (typeof e.preventDefault === 'function') {\n          e.preventDefault();\n        }\n\n        const leftBox = leftRef.current;\n\n        let values = [];\n        for (let i = 0; i < leftBox.length; i++) {\n            if (leftBox[i].selected === true) {\n                values.push (leftBox[i].value);\n            }\n        }\n\n        setLeftSelections(values);\n    }\n\n    const rightHandleChange = (e) => {\n        if (typeof e === 'string')\n          return;   // Passed in by Radio, can be ignored, next event has target.name\n\n        if (typeof e.preventDefault === 'function') {\n          e.preventDefault();\n        }\n\n        const rightBox = rightRef.current;\n\n        let values = [];\n        for (let i = 0; i < rightBox.length; i++) {\n            if (rightBox[i].selected === true) {\n                values.push (rightBox[i].value);\n            }\n        }\n\n        setRightSelections(values);\n    }\n\n    const isPosInt = (num) => {\n        return /^\\d*$/.test(num);\n    }\n\n    if (props.choices.length === 0) {\n        reset(props)\n    }\n\n    for (let i = 0; i < props.choices.length; i++) {\n        if (props.choices[i] !== choices[i]) {\n            reset(props)\n        }\n    }\n\n    let defaultSize = 7;\n\n    if ((props.leftTitle && !props.rightTitle) || !props.leftTitle && props.rightTitle) {\n        console.log ('There must both be a right title and a left title');\n    } else if (props.leftTitle && props.rightTitle) {\n        defaultSize = 10;\n    } else if (!props.leftTitle && !props.rightTitle) {\n        defaultSize = 7;\n    }\n\n    let size = 0;\n    if (hasProperty(props, 'size') === true) {\n        if (props.size === 'all') {\n            size = Math.max(defaultSize, props.choices.length);\n        } else if (isPosInt(props.size)) {\n            size = Math.max(defaultSize, parseInt(props.size));  // arrow buttons need 7 or 10 lines\n        } else {\n            size = defaultSize;\n        }\n    }\n    else {\n        size = defaultSize;  // arrow buttons need 7 or 10 lines\n    }\n\n\n    return (\n        <div className=\"sw-dlb_overallStyle\">\n            <div  className=\"sw-dlb_titleClass\">\n                <label>{props.title}</label>\n            </div>\n            <div className=\"sw-dlb_topSt\">\n                <div className=\"sw-dlb_display\">\n                    <p className=\"sw-dlb_leftClass\">{props.leftTitle}</p>\n                    <List list={leftValues} ref={leftRef} size={size} onChange={leftHandleChange} keyname=\"left\" className=\"sw-dlb_listSt\" />\n                </div>\n                <div className=\"sw-dlb_colSt\">\n                    <button name=\"moveRightSelect\"   className=\"sw-dlb_buttonSt\" onClick={moveRightSelectButton}>&gt;</button>\n                    <button name=\"moveRightAll\"      className=\"sw-dlb_buttonSt\" onClick={moveRightAllButton}>&gt;&gt;</button>\n                    <button name=\"moveLeftSelect\"    className=\"sw-dlb_buttonSt\" onClick={moveLeftSelectButton}>&lt;</button>\n                    <button name=\"moveLeftAll\"       className=\"sw-dlb_buttonSt\" onClick={moveLeftAllButton}>&lt;&lt;</button>\n                </div>\n                <div className=\"sw-dlb_display\">\n                    <p className=\"sw-dlb_rightClass\"> {props.rightTitle}</p>\n                    <List list={rightValues} ref={rightRef} size={size} onChange={rightHandleChange} keyname=\"right\" className=\"sw-dlb_listSt\" />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default DoubleListBox;","import React from 'react';\n\nimport Modal from './Modal.js';\n\nconst defProps = {\n    show: true,\n    closeFunct: () => {},\n    message: 'No Error message given',\n}\n\nconst ErrorModal = inProps => {\n    const props = {...defProps, ...inProps};\n\n    if (('show' in inProps) === false) {\n        console.error ('ErrorModal: The show property is not present');\n    }\n\n    if (('closeFunct' in inProps) === false) {\n        console.error ('ErrorModal: The closeFunct property is not present');\n    }\n\n    return (\n        <div>\n            {\n                (props.show === true) ?  (\n                    <Modal>\n                        <div>\n                            <h1 className=\"modal_marginStyle\">Error</h1>\n                            <h2>{(props.message === '') ? defProps.message : props.message}</h2>\n                            <button name=\"ok\" onClick={() => props.closeFunct(false)} className=\"sw-modal_ebuttonStyle\" >OK</button>\n                        </div>\n                    </Modal>\n                ) : null\n            }\n        </div>\n    );\n}\n\nexport default ErrorModal;","import React, { useState, useEffect } from 'react';\n\nconst hasProperty = (obj, propName) => { return !!Object.getOwnPropertyDescriptor(obj, propName);}\n\nconst InputFile = (props) => {\n    const [inputFile, setInputFile] = useState('');\n    const [displayFile, setDisplayFile] = useState('');\n\n    let buttonName = 'Browse';\n    if (hasProperty(props, 'buttonname')) {\n        buttonName = props.buttonname;\n    }\n\n    const processFile = (value) => {\n        setInputFile(value);\n        let index = value.lastIndexOf('\\\\');\n        let file = value.substring(index + 1);\n        setDisplayFile(file);\n\n        if (hasProperty(props, 'getFileName')) {\n            props.getFileName(file);\n        }\n\n        if (hasProperty(props, 'additionalProcessing')) {\n            props.additionalProcessing();\n        }\n    }\n\n    const processDisplayDefault = (value) => {\n        console.log ('file', value);\n    }\n\n    let processDisplay = processDisplayDefault;\n    if (hasProperty(props, 'processDisplay')) {\n        processDisplay = props.processDisplay;\n    }\n\n    return (\n        <span className=\"InputFileClass\">\n            <label htmlFor={props.id} className=\"sw-infile_marginStyle\">{props.title}</label>\n            <input file=\"text\" id=\"pfile\" name=\"displayFile\" value={displayFile} className=\"sw-infile_textStyle\" onChange={(event) => processDisplay(event.target.value)} />\n            <label htmlFor={props.id} className=\"sw-infile_buttonStyle  sw-theme_normalButtonBackground\" >\n                <input type=\"file\" name={props.name} value={inputFile} id={props.id} accept={(props.hasOwnProperty('accept')) ? props.accept : '' } className=\"sw-infile_fileStyle\" onChange={(event) => processFile(event.target.value)} />\n                {buttonName}\n            </label>\n        </span>\n    )\n}\n\nexport default InputFile;","\r\nimport React from 'react';\r\n\r\n/***************************************************************************************\r\n *\r\n * Invalid Values format for the screen:\r\n *\r\n * invalidValues = [\r\n *  { validity: true or false,  This indicates whether the input item contains an\r\n *                              invalid item (true) or not (false).  The initial value\r\n *                              will be false, until an invalid item is found for this\r\n *                              input item.\r\n *    display: true or false,   This indicates whether the message should be displayed\r\n *                              or not.  Initially this value will be false, when an\r\n *                              invalid value for this input item is found, it will\r\n *                              be set to true.  When the mouse is clicked for this\r\n *                              input item, the value will be set back to false.\r\n *    message: string           The message that will be displayed whenever the mouse\r\n *                              is hovered over the input item and display is true.\r\n *  }, ...\r\n * ]\r\n *\r\n *\r\n * Input Values format for the table:\r\n *\r\n * invalidValues = [\r\n *  { validity: [],             Each array position will indicate whether that input item on\r\n *                              a row in the table is invalid (true).  Only those items that\r\n *                              have invalid values are placed in the array.  Initially the\r\n *                              array will be empty.\r\n *    display: [],              Each array position will indicate whether the message should\r\n *                              be displayed for that item (true) or not (false) for that row\r\n *                              in the table.  The value will be true when initally inserted\r\n *                              with the validity value.  When the user click on the mouse on\r\n *                              the input item, the value will be changed to false.\r\n *    index: [],                Each array position will contain the row number (starting at 0)\r\n *                              in the table for the input item that constains the invalid\r\n *                              value.  Initially the array will be empty.\r\n *    message: [],              Each array positon will contain the message that will be displayed\r\n *                              whenever the mouse is hovered over the input item and the display\r\n *                              is true.  Initially the array will be empty.\r\n *  }\r\n * ]\r\n *\r\n *\r\n * Input Values format for both screen and table (dual):\r\n *\r\n *  The invalid values array will contain the format for the screen (see above) and the format\r\n *  for the table (see above).  The screen format should be first followed by the table.\r\n *\r\n *\r\n * Contants\r\n *  The constants indicate the array position for each input item.  The are generally given a\r\n *  name followed by the index value.  The name is given in the code.\r\n *\r\n *\r\n * Screen Example:\r\n *\r\n *  invalidValues = [\r\n *      { validity: false, display: false, message: 'The name must be given a value' },\r\n *      { validity: true, display: true, message: 'The SSN must be given a value' },\r\n *      { validity: true, display: false, message: 'The address must be given a value' }\r\n *  ]\r\n *\r\n *  const NAME = 0;\r\n *  const SSN = 1;\r\n *  const ADDR = 2;\r\n *\r\n *  invalidValues[NAME] contains a valid name, since validity is false.\r\n *  invalidValues[SSN] contains an invalid SSN (validity is true) and the message will be\r\n *      displayed when the mouse is hovered over it, since display is true.  If the user,\r\n *      clicks on the input item, display will be set to false and the message will not be\r\n *      displayed.\r\n *  invalidValues[ADDR] contains an invalid addresss (validity is true), but the message will\r\n *      not be displayed, since display is false.\r\n *\r\n *\r\n * Table Example:\r\n *\r\n *  invalidValues = [\r\n *      { validity: [true, true], display: [true, false], index: [3, 4], message: ['The name is a duplicate, 'Invalid Name']},\r\n *      { validity: [true, true], display: [true, false], index: [8, 14], message: ['The SSN is a duplicate, 'Invalid SSN']},\r\n *  ]\r\n *\r\n *  const NAME = 0;\r\n *  const SSN = 1;\r\n *\r\n *  invalidValues[NAME] contains two invalid names (validity is true) in the table at rows 3 and 4\r\n *      (actual 4 and 5).  The message 'The name is a duplicate' is being displayed, since display is true\r\n *      for that input item on row 3 of the table.   The message 'Invalid name' will not be displayed,\r\n *      since display is false for that input item on row 4 of the table.\r\n *\r\n *  ivalidValues[SSN] contains two invalid SSNs (validity is true) in the table at rows 8 and 14\r\n *  (actual 9 and 15).  The message 'The SSN is a duplicate' is being displayed, since display is true\r\n *      for that input item on row 8 of the table.   The message 'Invalid SSN' will not be displayed,\r\n *      since display is false for that input item on row 14 of the table.\r\n *\r\n * Dual Example (screen and table):\r\n *\r\n *  invalidValues = [\r\n *      { validity: false, display: false, message: 'The name must be given a value' },\r\n *      { validity: true, display: true, message: 'The SSN must be given a value' },\r\n *      { validity: true, display: false, message: 'The address must be given a value' }\r\n *      { validity: [true, true], display: [true, false], index: [3, 4], message: ['The name is a duplicate, 'Invalid Name']},\r\n *      { validity: [true, true], display: [true, false], index: [8, 14], message: ['The SSN is a duplicate, 'Invalid SSN']},\r\n *  ]\r\n *\r\n *  const NAME = 0;\r\n *  const SSN = 1;\r\n *  const ADDR = 2;\r\n *  const NAMET = 3;\r\n *  const SSNT = 4;\r\n *\r\n *  invalidValues[NAME] see invalidValues[NAME] in the Screen Example.\r\n *  invalidValues[SSN] see invalidValues[SSN] in the Screen Example.\r\n *  invalidValues[ADDR] see invalidValues[ADDR] in the Screen Example.\r\n *  invalidValues[NAMET] see invalidValues[NAME] in the Table Example.\r\n *  invalidValues[SSNT] see invalidValues[SSN] in the Table Example.\r\n *\r\n ************************************************************************************************/\r\n\r\n/*****************************************************************************************\r\n *\r\n * This will generate the invalid array for both screen and table.  It will then return\r\n * the invalid array.\r\n *\r\n * @param {*} numScreenConstants    the number of entries for the screen.  If there are no\r\n *                                  screen entries then the value should be zero.\r\n * @param {*} numTableConstants     the number of entries for the table.  If there are no\r\n *                                  table entries then the value should be zero.\r\n *\r\n *****************************************************************************************/\r\nexport const generateInvalid = (numScreenConstants, numTableConstants) => {\r\n    let invalidArray = [];  // The invalid array to be built\r\n\r\n    // Build the screen entries\r\n    for (let i = 0; i < numScreenConstants; i++) {\r\n        invalidArray.push({ validity: false, display: false, message: '' });\r\n    }\r\n\r\n    // Build the table entries\r\n    for (let i = 0; i < numTableConstants; i++) {\r\n        invalidArray.push({ validity: [], display: [], index: [], message: [] });\r\n    }\r\n\r\n    return invalidArray;\r\n}\r\n\r\n/***************************************************************************************\r\n *\r\n * This indicates that one of the input items on the screen contains an invalid value.\r\n *\r\n * @param {*} invalidValues     list of valid and invalid inputs for the screen\r\n * @param {*} constant          indicates which of the input items that is in invalid\r\n *                              (the index into the array)\r\n * @param {*} message           message for the invalid value\r\n *\r\n ****************************************************************************************/\r\nexport const setInvalidScreen = (invalidValues, constant, message) => {\r\n    invalidValues[constant].validity = true;    // Indicates the value is invalid\r\n    invalidValues[constant].display = true;     // Indicates the message should be displayed\r\n    if (message !== null) { // There is a message\r\n        invalidValues[constant].message = message;\r\n    }\r\n\r\n    return invalidValues;\r\n}\r\n\r\n/*******************************************************************************************\r\n *\r\n * This indicates that one of the input items in a table contains an invalid value.\r\n *\r\n * @param {*} invalidValues     list of invalid inputs for the table\r\n * @param {*} constant          indicates which of the input items is invalid (the index\r\n *                              into the array)\r\n * @param {*} index             row number (from zero) in the table that contains the\r\n *                              invalid item\r\n * @param {*} message           message for the invalid value\r\n *\r\n ********************************************************************************************/\r\nexport const setInvalidTable = (invalidValues, constant, index, message) => {\r\n    let found = false;  // Indicates whether the invalid item already exists in the invalid values array\r\n    let pos = 0;        // Position where the item was found in the index array\r\n\r\n    // Spin through the array to find whether the item already exists in the\r\n    // index array for that input item\r\n    for (let i = 0; i < invalidValues[constant].index.length; i++) {\r\n        if (invalidValues[constant].index[i] === index) {\r\n            found = true;\r\n            pos = i;\r\n        }\r\n    }\r\n\r\n    if (found) {    // Item already exists\r\n        invalidValues[constant].validity[pos] = true;\r\n        invalidValues[constant].display[pos] = true;\r\n        if (message !== null) { // There is a message\r\n            invalidValues[constant].message[pos] = message;\r\n        }\r\n    } else {    // Item does not exist, so place in in the appropriate arrays for that input item in the table\r\n        invalidValues[constant].validity.push(true);\r\n        invalidValues[constant].display.push(true);\r\n        invalidValues[constant].index.push(index);\r\n        if (message !== null) { // There is a message\r\n            invalidValues[constant].message.push(message);\r\n        } else {\r\n            invalidValues[constant].message.push('');\r\n        }\r\n    }\r\n\r\n    return invalidValues;\r\n}\r\n\r\n/***********************************************************************************************\r\n *\r\n * This indicates that one of the input items is either on the screen or in a table and\r\n * contains an invalid value.\r\n *\r\n * @param {*} invalidValues list of invalid inputs for the screen or table\r\n * @param {*} constant1     index into the screen input items\r\n * @param {*} constant2     index into the table screen items\r\n * @param {*} index         row number in the table from zero\r\n * @param {*} type          indicates whether it is a screen entry (I) or table entry\r\n * @param {*} message       message for the invalid value\r\n *\r\n ***********************************************************************************************/\r\nexport const setInvalidDual = (invalidValues, constant1, constant2, index, type, message) => {\r\n    if (type === 'S') { // Screen entry\r\n        invalidValues = setInvalidScreen (invalidValues, constant1, message);\r\n    } else if (type === 'T') {    // Table entry\r\n        invalidValues = setInvalidTable (invalidValues, constant2, index, message);\r\n    }\r\n\r\n    return invalidValues;\r\n}\r\n\r\n/******************************************************************************************\r\n *\r\n * This will check to see if there is an invalid screen entry, and if there is, it will\r\n * display an invalid message.\r\n *\r\n * @param {*} invalidValues the invalid array that contains what entries are invalid\r\n * @param {*} constant      the screen constant that represents the array index to check in\r\n *                          the invalid array.\r\n *\r\n ******************************************************************************************/\r\nexport const checkValidityScreen = (invalidValues, constant) => {\r\n    return (isInvalid(invalidValues[constant], -1) === true) ? <span className=\"errMessage\">{invalidValues[constant].message}</span> : null\r\n}\r\n\r\n/******************************************************************************************\r\n *\r\n * This will check to see if there is an invalid table entry, and if there is, it will\r\n * display an invalid message.\r\n *\r\n * @param {*} invalidValues the invalid array that contains what entries are invalid\r\n * @param {*} constant      the table constant that represents the array index to check in\r\n *                          the invalid array.\r\n *\r\n ******************************************************************************************/\r\nexport const checkValidityTable = (invalidValues, constant, index) => {\r\n    return (isInvalid(invalidValues[constant], index) === true) ? <span className=\"errMessage\">{getInvalidMessage(invalidValues[constant], index)}</span> : null\r\n}\r\n\r\n/***********************************************************************************************\r\n *\r\n * This will set the display value to false for an invalid input item.\r\n *\r\n * @param {*} invalidValues list of invalid inputs for the screen\r\n * @param {*} constant      indicates which of the input items is invalid (the index\r\n *                          into the array)\r\n *\r\n ***********************************************************************************************/\r\nexport const resetDisplayScreen = (invalidValues, constant) => {\r\n    invalidValues[constant].display = false;\r\n\r\n    return invalidValues;\r\n}\r\n\r\n/***********************************************************************************************\r\n *\r\n * This will set the display value to false for an invalid input item.\r\n *\r\n * @param {*} invalidValues list of invalid inputs for the screen\r\n * @param {*} constant      indicates which of the input items is invalid (the index\r\n *                          into the array)\r\n * @param {*} index         row number in the table from zero\r\n *\r\n ***********************************************************************************************/\r\nexport const resetDisplayTable = (invalidValues, constant, index) => {\r\n    let found = false;  // Indicates whether the invalid item already exists in the invalid values array\r\n    let pos = 0;        // Position where the item was found in the index array\r\n\r\n    // Spin through the array to find whether the item already exists in the\r\n    // index array for that input item\r\n    for (let i = 0; i < invalidValues[constant].index.length; i++) {\r\n        if (invalidValues[constant].index[i] === index) {\r\n            found = true;\r\n            pos = i;\r\n        }\r\n    }\r\n\r\n    if (found) {    // Item was found, so set the display to false\r\n        invalidValues[constant].display[pos] = false;\r\n    }\r\n\r\n    return invalidValues;\r\n\r\n}\r\n\r\n/*******************************************************************************************\r\n *\r\n * Indicates that the mouse was clicked on a input, Choice, ChoiceText, Radio, or textarea\r\n * HTML tag on the regular screen.  If the field was invalid and clicked on, it will remove\r\n * the error message from being displayed when the mouse is hovered over the HTML item.\r\n *\r\n * @param {*} constant  indicates which item the mouse was clicked on.  Set the contants\r\n *                      after the invalid array.\r\n *\r\n ******************************************************************************************/\r\nexport const wasClickedScreen = (invalidValues, constant, setInvalid) => {\r\n    let localInvalid = [...invalidValues];\r\n    localInvalid = resetDisplayScreen(localInvalid, constant);\r\n    setInvalid (localInvalid);\r\n}\r\n\r\n/*******************************************************************************************\r\n *\r\n * Indicates that the mouse was clicked on a input, Choice, ChoiceText, Radio, or textarea\r\n * HTML tag on a table.  If the field was invalid and clicked on, it will remove\r\n * the error message from being displayed when the mouse is hovered over the HTML item.\r\n *\r\n * @param {*} constant  indicates which item the mouse was clicked on.  Set the contants\r\n *                      after the invalid array.\r\n *\r\n ******************************************************************************************/\r\nexport const wasClickedTable = (invalidValues, constant, pos, setInvalid) => {\r\n    let localInvalid = [...invalidValues];\r\n    localInvalid = resetDisplayTable(localInvalid, constant, pos);\r\n    setInvalid (localInvalid);\r\n}\r\n\r\n\r\n/*********************************************************************************************\r\n *\r\n * Indicates whether the index matches one of the screen constants (constant indexes into the\r\n * invalidValues array) (true) or not (false).\r\n *\r\n * @param {*} index     an index into the invalidArray to see if it matches one of the\r\n *                      screen constants or not\r\n * @param {*} constants the array of screen contants to see if there is a match\r\n *\r\n *********************************************************************************************/\r\nexport const isConstant = (index, constants) => {\r\n    // Spin through the array of contants to see if the index matches one of them\r\n    for (let i = 0; i < constants.length; i++) {\r\n        if (constants[i] === index) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/***********************************************************************************************\r\n *\r\n * This will check to see if any of the validity values is true in the invalid values array.\r\n * If one of the values is true, this function returns false.  If all the values are false, it\r\n * returns true to indicate that there are not invalid values.  This is genearally called at\r\n * the end of the validation function.\r\n *\r\n * @param {*} invalidValues list of invalid inputs for the screen or table\r\n * @param {*} constants     list of screen constants\r\n *\r\n ***********************************************************************************************/\r\nexport const validCheckDual = (invalidValues, constants) => {\r\n    // Determine if any of the validation checks were invalid\r\n    for (let i = 0; i < invalidValues.length; i++) {\r\n        if (isConstant(i, constants) === true) {   // Checking screen edits\r\n            if (invalidValues[i].validity === true) {\r\n                return false;\r\n            }\r\n        } else {    // Checking table edits\r\n            for (let j = 0; j < invalidValues[i].validity.length; j++) {\r\n                if (invalidValues[i].validity[j] === true) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n/**********************************************************************************************\r\n *\r\n * This will check to see if any of the screen validity values is true in the invalid values\r\n * array.  If one of the values is true, this function returns false.  If all the values are\r\n * false, it returns true to indicate that there are not invalid values.  This is genearally\r\n * called at the end of the validation function.\r\n *\r\n * @param {*} invalidValues list of invalid inputs for the screen\r\n *\r\n **********************************************************************************************/\r\nexport const validCheckScreen = (invalidValues) => {\r\n    for (let i = 0; i < invalidValues.length; i++) {\r\n        if (invalidValues[i].validity === true) { // Checking screen edits\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n/**********************************************************************************************\r\n *\r\n * This will check to see if any of the table validity values is true in the invalid values\r\n * array.  If one of the values is true, this function returns false.  If all the values are\r\n * false, it returns true to indicate that there are not invalid values.  This is genearally\r\n * called at the end of the validation function.\r\n *\r\n * @param {*} invalidValues list of invalid inputs for the table\r\n *\r\n **********************************************************************************************/\r\nexport const validCheckTable = (invalidValues) => {\r\n    // Determine if any of the validation checks were invalid\r\n    for (let i = 0; i < invalidValues.length; i++) {\r\n        for (let j = 0; j < invalidValues[i].validity.length; j++) {\r\n            if (invalidValues[i].validity[j] === true) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n/***********************************************************************************************\r\n *\r\n * This will clear the invalid values array, and reset the array to its original settings.  It\r\n * will do this for the screen and table parts.\r\n *\r\n * @param {*} invalidValues list of invalid inputs for the screen and table\r\n * @param {*} screen        array holding the starting and ending indexes (contants) for the\r\n *                          screen part of the array\r\n * @param {*} table         array holding the starting and ending indexes (contants) for the\r\n *                          screen part of the array\r\n *\r\n ***********************************************************************************************/\r\nexport const clearInvalidDual = (invalidValues, screen, table) => {\r\n    // Clear the screen part of the array\r\n    for (let i = screen[0]; i <= screen[1]; i++) {\r\n        invalidValues[i].validity = false;  // Set the validity and display parts back to false\r\n        invalidValues[i].display = false;\r\n    }\r\n\r\n    // Cler the table part of the array, by setting them to empty arrays\r\n    for (let i = table[0]; i <= table[1]; i++) {\r\n        invalidValues[i].validity = [];\r\n        invalidValues[i].display = [];\r\n        invalidValues[i].index = [];\r\n        invalidValues[i].message = [];\r\n    }\r\n\r\n    return invalidValues;\r\n}\r\n\r\n/***********************************************************************************************\r\n *\r\n * This will clear the invalid values array, and reset the array to its original settings.  It\r\n * will do this for the screen.\r\n *\r\n * @param {*} invalidValues list of invalid inputs for the screen\r\n *\r\n ***********************************************************************************************/\r\nexport const clearInvalidScreen = (invalidValues) => {\r\n    // Clear the screen values\r\n    for (let i = 0; i < invalidValues.length; i++) {\r\n        invalidValues[i].validity = false;\r\n        invalidValues[i].display = false;\r\n    }\r\n\r\n    return invalidValues;\r\n}\r\n\r\n/***********************************************************************************************\r\n *\r\n * This will clear the invalid values array, and reset the array to its original settings.  It\r\n * will do this for the table.\r\n *\r\n * @param {*} invalidValues list of invalid inputs for the table\r\n *\r\n ***********************************************************************************************/\r\nexport const clearInvalidTable = (invalidValues) => {\r\n    // Clear the table entries, by setting to empty arrays\r\n    for (let i = 0; i < invalidValues.length; i++) {\r\n        invalidValues[i].validity = [];\r\n        invalidValues[i].display = [];\r\n        invalidValues[i].index = [];\r\n        invalidValues[i].message = [];\r\n    }\r\n\r\n    return invalidValues;\r\n}\r\n\r\n/***********************************************************************************************\r\n *\r\n * This will determine if the style should change to the background color to the invalid color\r\n * because the input table item has an invalid value.  This will return the style for the\r\n * component.\r\n *\r\n * @param {*} invalidValues list of invalid inputs\r\n * @param {*} constant      indicates which of the input items is invalid (the index\r\n *                          into the array)\r\n * @param {*} cssClassName  the name of a cssClassName that will be concatenated with either\r\n *                          sw-theme_normalBackground or sw-theme_errorBackground.\r\n *\r\n ***********************************************************************************************/\r\nexport const processInvalidStyleScreen = (invalidValues, constant, cssClassName = null) => {\r\n    // Set the background color based on whether the value is invalid or not\r\n    if (cssClassName === null) {\r\n        return (invalidValues[constant].validity === true) ?\r\n             \"sw-theme_errorBackground\" : \"sw-theme_normalBackground\";\r\n    } else {\r\n        return (invalidValues[constant].validity === true) ?\r\n             `${cssClassName} sw-theme_errorBackground` : `${cssClassName} sw-theme_normalBackground`;\r\n    }\r\n}\r\n\r\n\r\n/***********************************************************************************************\r\n *\r\n * This will determine if the style should change to the background color to the invalid color\r\n * because the input table item has an invalid value.\r\n *\r\n * @param {*} invalidValues list of invalid inputs\r\n * @param {*} constant      indicates which of the input items is invalid (the index\r\n *                          into the array)\r\n * @param {*} cssClassName  the name of a cssClassName that will be concatenated with either\r\n *                          sw-theme_normalBackground or sw-theme_errorBackground.\r\n *\r\n ***********************************************************************************************/\r\nexport const processStyleScreen = (invalidValues, constant, cssClassName) => {\r\n    return (invalidValues[constant].validity === true) ?\r\n             `${cssClassName} sw-theme_errorBackground` : `${cssClassName} sw-theme_normalBackground`;\r\n}\r\n\r\n/***********************************************************************************************\r\n *\r\n * This function is used when there are both screen and table invalid entries.  This will clear\r\n * the invalid screen entries only.  It will not clear the table entries.\r\n *\r\n * @param {*} invalidValues list of invalid inputs for the screen\r\n * @param {*} constant      the constant for the last screen entry\r\n *\r\n ***********************************************************************************************/\r\nexport const clearInvalidScreenOnly = (invalidValues, constant) => {\r\n    // Clear the screen values\r\n    for (let i = 0; i <= constant; i++) {\r\n        invalidValues[i].validity = false;\r\n        invalidValues[i].display = false;\r\n    }\r\n\r\n    return invalidValues;\r\n}\r\n\r\n/***********************************************************************************************\r\n *\r\n * This will determine if the style should change to the background color to the invalid color\r\n * because the input table item has an invalid value.  This will return the style for the\r\n * component.\r\n *\r\n * @param {*} invalidValues list of invalid inputs for the table\r\n * @param {*} constant      indicates which of the input items is invalid (the index\r\n *                          into the array)\r\n * @param {*} pos           row number in the table\r\n * @param {*} cssClassName  the name of a cssClassName that will be concatenated with either\r\n *                          sw-theme_normalBackground or sw-theme_errorBackground.\r\n *\r\n ***********************************************************************************************/\r\nexport const processInvalidStyleTable = (invalidValues, constant, pos, cssClassName = null) => {\r\n    // Spin through the validity array for that item in the invalid values array\r\n    for (let j = 0; j < invalidValues[constant].validity.length; j++) {\r\n        if (pos === invalidValues[constant].index[j]) { // Check to see if it is the correct index\r\n            if (invalidValues[constant].validity[j] === true) { // and the entry is invalid\r\n                if (cssClassName === null) {\r\n                    return `sw-theme_errorBackground`;\r\n                } else {\r\n                    return `${cssClassName} sw-theme_errorBackground`;\r\n                }\r\n            } else {    // Entry is valid\r\n                if (cssClassName === null) {\r\n                    return `sw-theme_normalBackground`;\r\n                } else {\r\n                    return `${cssClassName} sw-theme_normalBackground`;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/***********************************************************************************************\r\n *\r\n * This will determine if the style should change to the background color to the invalid color\r\n * because the input table item has an invalid value.\r\n *\r\n * @param {*} invalidValues list of invalid inputs for the table\r\n * @param {*} constant      indicates which of the input items is invalid (the index\r\n *                          into the array)\r\n * @param {*} pos           row number in the table\r\n * @param {*} cssClassName  the name of a cssClassName that will be concatenated with either\r\n *                          sw-theme_normalBackground or sw-theme_errorBackground.\r\n *\r\n ***********************************************************************************************/\r\nexport const processStyleTable = (invalidValues, constant, pos, cssClassName) => {\r\n    // Spin through the validity array for that item in the invalid values array\r\n    for (let j = 0; j < invalidValues[constant].validity.length; j++) {\r\n        if (pos === invalidValues[constant].index[j]) { // Check to see if it is the correct index\r\n            if (invalidValues[constant].validity[j] === true) { // and the entry is invalid\r\n                return `${cssClassName} sw-theme_errorBackground`;\r\n            }\r\n        }\r\n    }\r\n\r\n    return `${cssClassName} sw-theme_normalBackground`;\r\n}\r\n\r\n/*********************************************************************************************\r\n *\r\n * This will determine if the input item contains an invalid value and the message should be\r\n * displayed or not based on the validity and display values for that item in the invalid\r\n * value array.  This will work for screen or table entry.  If a screen entry, pos should\r\n * be -1.\r\n *\r\n * @param {*} invalid   a specific input item in the invalid value array (specific index)\r\n * @param {*} pos       row number in the table if looking up a table entry or -1 for a\r\n *                      screen entry\r\n *\r\n ***********************************************************************************************/\r\nexport const isInvalid = (invalid, pos) => {\r\n    if (pos === -1) {   // Screen entry\r\n        return (invalid.validity && invalid.display);\r\n    } else {    // Table entry\r\n        for (let i = 0; i < invalid.validity.length; i++) {\r\n            if (invalid.index[i] === pos) { // Find the entry for that row in the table\r\n                return invalid.validity[i] && invalid.display[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/**********************************************************************************************\r\n *\r\n * This will retrieve the message from the entry invalid value array for a table entry.\r\n *\r\n * @param {*} invalid   a specific input item in the invalid value array (specific index)\r\n * @param {*} pos       row number in the table if looking up a table entry or -1 for a\r\n *                      screen entry\r\n *\r\n **********************************************************************************************/\r\nexport const getInvalidMessage = (invalid, pos) => {\r\n    for (let i = 0; i < invalid.index.length; i++) {\r\n        if (invalid.index[i] === pos) { // Find the entry for that row in the table\r\n            return invalid.message[i];  // Return the message\r\n        }\r\n    }\r\n\r\n    return '';\r\n}\r\n","import React, { Fragment } from 'react';\n\nconst hasProperty = (obj, propName) => { return !!Object.getOwnPropertyDescriptor(obj, propName);}\nconst min = (arr) => arr.reduce((acc))\n\nconst _Choice = (propsIn, ref) => {\n\n    const {list, choices, size, value, onChange, ...props} = propsIn\n    const opt = list || choices || []\n    const keyPart = (hasProperty(props,'keyName')) ? props.keyName + '_' : ''\n    const pref = (hasProperty(props,'name')) ? props.name + '_' + keyPart : ''\n\n    if ( typeof(value) == 'string' && !opt.includes(value) )\n    {\n        console.log(`Adding missing default value: '${value}' to ${JSON.stringify(opt)}`);\n        opt.unshift(value)\n    }\n\n\n    const listHandleChange = (e) => {\n\n      if (typeof e.preventDefault === \"function\") {\n        e.preventDefault();\n      }\n\n      // if multiple is true the returning value should be an array of selected values,\n      //     not just the value on the last clicked/unclicked element\n      // if multiple is false, e.target.value will be a string of the choice selected\n      // See React SyntheticEvent   https://reactjs.org/docs/events.html\n\n      const e2 = {\n        preventDefault: e.preventDefault,\n        target: { ...e.target}\n      }\n\n      const arr = Array.from(e.target.selectedOptions, option => option.value)\n      e2.target.name = e.target.name\n      e2.target.value = (props?.multiple) ? arr : e.target.value\n\n      // console.log(`listHandleChange calling onChange(e2) ${e2.target.name} ${JSON.stringify(e2.target.value)} `);\n\n      onChange(e2)\n    }\n\n    return <Fragment>\n              <select ref={ref} multiple={props.multiple} size={size} value={value} onChange={listHandleChange} {...props} >\n                  {opt.map( (el,key) => <option key={pref + key} value={el}>{el}</option>)}\n              </select>\n           </Fragment>;\n\n}\n\nconst _List = (props, ref) => (\n  <Choice className=\"ChoiceClass\" ref={ref} multiple={true} {...props} />\n  )\n\nexport const Choice = React.forwardRef(_Choice);\nexport const List = React.forwardRef(_List);\n","import React, { useEffect, useRef }  from 'react';\nimport { createPortal } from 'react-dom';\n\n\nconst Modal = ({ children }) => {\n    const elRef = useRef(null);\n\n    if (!elRef.current) {\n        const div = document.createElement('div');\n        elRef.current = div;\n    }\n\n    useEffect(() => {\n        const modalRoot = document.getElementById('sw-modal');\n        modalRoot.appendChild(elRef.current);\n\n        return () => modalRoot.removeChild(elRef.current);\n    }, [])\n\n    return createPortal(<div>{children}</div>, elRef.current);\n};\n\nexport default Modal;","import React from 'react';\n\n  /*\n    9737   Sun\n    183     &middot;\n    ⚪\t9898\t26AA\t \tMEDIUM WHITE CIRCLE\n    ⚫\t9899\t26AB\t \tMEDIUM BLACK CIRCLE\n\n    U+26AA\t⚪\te2 9a aa\tMEDIUM WHITE CIRCLE\n    U+26AB\t⚫\te2 9a ab\tMEDIUM BLACK CIRCLE\n    U+1F534\t🔴\tf0 9f 94 b4\tLARGE RED CIRCLE\n    U+1F535\t🔵\tf0 9f 94 b5\tLARGE BLUE CIRCLE\n  */\n \nconst checked = String.fromCharCode(9899) \nconst unchecked = String.fromCharCode(9898) \n\nconst Frag = React.Fragment\n\nconst Radio = props => {\n  const handle = (e) => {\n    if (typeof e.preventDefault === 'function')\n        e.preventDefault();\n    e.target.name = props.name;\n    e.target.value = props.selectedValue;\n    props.onChange(e);\n  }\n   \n  const {selectedValue, text, children, ...rest} = props\n\n  const isChecked = props.value === selectedValue;\n  const symbol = (isChecked) ? checked : unchecked;\n\n  return <Frag>\n           <button type=\"button\" onClick={handle} className=\"sw-radio_defaultStyle\" {...rest}>\n             {symbol}\n             {text}\n             {children}\n           </button>\n         </Frag>;\n}\n\n// 2018-10-10 {text} {children} moved to inside button clickable area\n\nexport default Radio;\n","/*****************************************************************************\n *\n *  This will sequential search a table until the key is found and return \n *  the number the table entry associated with this key.\n *\n *  @param table  the table or array to be searched\n *  @param key    the key to search for in the table\n *  @param field  the field in the table to search\n *\n *  @return returns the entry in the table associated with the key.  If the\n *          key is not found null is returned.\n *\n ****************************************************************************/\nexport const search = (table, key, field) => {\n    // Spin through the table until the key is found\n    for (let i = 0; i < table.length; i++) {\n        if (table[i][field] === key) {  // Key is found in the table\n            return table[i];\n        }\n    }\n\n    return null; // Key was not found\n}\n\n/*****************************************************************************\n *\n *  This will binary search a table until the key is found and returns the \n *  table entry associated with this key.\n *\n *  @param table  the table or array to be searched\n *  @param key    the key to search for in the table\n *  @param field  the field in the table to search\n *\n *  @return returns the entry in the table associated with the key or null if\n *          the key is not found.\n *\n ****************************************************************************/\nexport const binSearch = (table, key, field) => {\n    let top = 0;                // Index to the top of the table\n    let bottom = table.length;  // Index to the bottom of the table\n    let middle = 0;             // Index to the calculated middle of the table\n    let found = false;          // Indicates the key was found\n    let neverFound = false;     // Indicates the key will never be found\n\n    // Loop until the key is found or it never can be found\n    while (found === false && neverFound === false) {\n        middle = parseInt ((top + bottom) / 2);\n\n        if (top >= bottom) {\n            neverFound = true;\n        } else if (table[middle][field] === key) {\n            found = true;\n        } else if (table[middle][field] > key) {\n            bottom = middle - 1;\n        } else if (table[middle][field] < key) {\n            top = middle + 1;\n        }\n    }\n\n    if (found) {    // Key was found\n        return table[middle];\n    } else {    // Key was not found\n        return null;\n    }\n}\n\n","/* eslint react/prop-types: 0 */\r\n\r\nimport React, { useState, useEffect } from 'react';\r\n\r\n/*\r\nimport {CheckBox, Choice, isInvalid, setInvalidScreen, copyStyle,\r\n    validStyling, processInvalidStyleScreen, wasClickedScreen,\r\n    AlertModal,\r\n    defaultThemeSettings, generateButton\r\n} from 'simple-widgets'\r\n*/\r\n\r\n\r\nimport CheckBox from './CheckBox.js';\r\nimport { Choice } from './List.js';\r\nimport { isInvalid, setInvalidScreen,\r\n         processInvalidStyleScreen, wasClickedScreen} from './Invalid.js'\r\nimport AlertModal from './AlertModal.js';\r\nimport { generateCSSButton } from './Theme.js';\r\n\r\n\r\nimport funnel from './funnel-filter-svgrepo-com.svg';\r\n\r\n\r\nconst upper = [...'ABCDEFGHIJKLMNOPQRSTUVWXYZ'];\r\nconst lower = [...'abcdefghijklmnopqrstuvwxyz'];\r\nconst digit = [...'0123456789'];\r\n\r\nconst hasProperty = (obj, propName) => { return !!Object.getOwnPropertyDescriptor(obj, propName);}\r\n\r\nfunction range(start, end) {\r\n  return Array(end - start + 1).fill().map((_, idx) => start + idx)\r\n}\r\n\r\n/****************************************************************************\r\n *\r\n * This will allow the user to add a filter / search bar to a table in case\r\n * not all the data is displayed at once.  It will also allow a column to be\r\n * sorted by clicking on it.\r\n *\r\n ****************************************************************************/\r\nconst SearchSortTable = (propsPassed) => {\r\n  // let iter = Object.keys(row)       // also works when row === [\"hello\", \"there\"]\r\n\r\n  const defaultEachRowInTable = (row, i) => {\r\n      const cols = (!row) ? null :\r\n        Object.keys(row).map( (idx, j) => ( <td key={i+'_'+j}>{row[idx]}</td> ) )\r\n    return (<tr key={i}>{cols}</tr>)\r\n  }\r\n\r\n  const defaultProps = {\r\n    error: false,          // Indicates that an error has occrred\r\n    MAX_ITEMS: 10,\r\n    eachRowInTable: defaultEachRowInTable,\r\n    }\r\n\r\n    const props = Object.assign(defaultProps, propsPassed);\r\n\r\n\r\n    const invalidArray = [  // Used to tell whether the user entered and invalid value or not\r\n        { validity: false, display: false, message: '' },\r\n        { validity: false, display: false, message: '' },\r\n        { validity: false, display: false, message: '' },\r\n    ];\r\n\r\n    const FILTER = 0;\r\n    const SRCHITEM = 1;\r\n    const SRCHHDR = 2;\r\n\r\n    const numCols = props?.data[0]?.length || 10\r\n    const initialFilters = Array(numCols).fill('');  // React doesn't like <input value={null}\r\n    const initialBackground = Array(63).fill({backgroundColor: getComputedStyle(document.documentElement)\r\n                    .getPropertyValue('--sw-theme_backgroundColor')});\r\n\r\n    let startIndexes = range(0, props.data.length-1)\r\n\r\n    // Set the state variables\r\n    const [start, setStart] = useState(0);\r\n    const [end, setEnd] = useState((hasProperty(props,'showAll') === true) ? props.data.length : parseInt(props.MAX_ITEMS));\r\n    const [searchItem, setSearchItem] = useState('');                   // The item to search for\r\n    const [searchHeader, setSearchHeader] = useState('');               // The column to search\r\n    const [searchHeaderValues, setSearchHeaderValues] = useState([searchHeader]); // The value of each header in the table -- intialize array to include default value\r\n    const [sortOrder, setSortOrder] = useState([]);                     // Indicates whether the sort is ascending (A) or descending (D) (starts of a ascending and then alternates)\r\n    const [topDisabled, setTopDisabled] = useState(true);               // Indicates whether the top button is disabled or not\r\n    const [previousDisabled, setPreviousDisabled] = useState(true);     // Indicates whether the previous button is disabled or not\r\n    const [nextDisabled, setNextDisabled] = useState(false);            // Indicates whether the next button is disabled or not\r\n    const [bottomDisabled, setBottomDisabled] = useState(false);        // Indicates whether the bottom button is disabled or not\r\n    const [rowValues, setRowValues] = useState([]);                     // Indicates how many rows in the table should be displayed\r\n    const [maxItems, setMaxItems] = useState((hasProperty(props,'showAll') === true) ? props.data.length : parseInt(props.MAX_ITEMS));   // Maximum number of rows to display in the table\r\n    const [maximum, setMaximum] = useState((hasProperty(props,'showAll') === true) ? props.data.length : parseInt(props.MAX_ITEMS));     // Maximum number of rows selected by the user to display in the table\r\n    const [filter, setFilter] = useState(initialFilters);               // The values for each column to be filtered\r\n    const [filterOn, setFilterOn] = useState('');                       // Indicates whether the user has checked the Filter On check box or not\r\n    const [filterPressed, setFilterPressed] = useState(false);         // Indicates whether the filtering is enabled or disabled (Filter button)\r\n    const [invalid, setInvalid] = useState(invalidArray);\r\n    const [alertMessage, setAlertMessage] = useState('');\r\n    const [showAlert, setShowAlert] = useState(false);\r\n    const [indexes, setIndexes] = useState([...startIndexes]);\r\n    const [copyIndex, setCopyIndex] = useState([...startIndexes]);\r\n    const [length, setLength] = useState(props.data.length);                            // The length of the data\r\n    const [background, setBackground] = useState(initialBackground);\r\n\r\n    // const [indexSet, setIndexSet] = useState([[...startIndexes]]);\r\n    // const [origIndexes, setOrigIndexes] = useState([...startIndexes]);\r\n    const origIndexes = [...startIndexes];\r\n\r\n    /******************************************************************************\r\n     *\r\n     * Called to populate the header drop down\r\n     *\r\n     ******************************************************************************/\r\n\r\n    useEffect (populateSearch, []);\r\n\r\n    useEffect (() => {\r\n        if (indexes.length === 0) {\r\n            sendIndexes(0, origIndexes.length, origIndexes.length, origIndexes);\r\n            setFilterOn(false);\r\n            setStartEnd(0, origIndexes.length, origIndexes);\r\n            setIndexes(origIndexes);\r\n            setCopyIndex(origIndexes);\r\n            setLength(origIndexes.length);\r\n            setDisable(0, origIndexes.length);\r\n        } else {\r\n            setDisable(start, length);\r\n            sendIndexes(start, end, length, indexes);\r\n        }\r\n    }, [props.data]);\r\n\r\n\r\n    useEffect (() => {\r\n        setFilterOn(false);\r\n        setStartEnd(0, origIndexes.length, origIndexes);\r\n        setIndexes(origIndexes);\r\n        setCopyIndex(origIndexes);\r\n        setLength(origIndexes.length);\r\n        sendIndexes(0, origIndexes.length, origIndexes.length, origIndexes);\r\n        setDisable(0, origIndexes.length);\r\n    }, [props.data.length])\r\n\r\n\r\n/*\r\n    console.log('props.data.length :', props.data.length);\r\n    console.log ('start', start);\r\n    console.log ('end', end);\r\n    console.log ('length', length);\r\n    console.log ('indexes', indexes);\r\n    console.log ('maxItems', maxItems);\r\n    console.log ('maximum', maximum);\r\n    console.log ('origIndexes', origIndexes);\r\n    console.log ('startIndexes :', startIndexes);\r\n*/\r\n\r\n    if (hasProperty(props,'data') === false) {\r\n      console.error ('Search Sort Table component: A data prop must be passed');\r\n      return (<span></span>);\r\n    }\r\n\r\n    if (hasProperty(props,'table') === false) {\r\n      console.error ('Search Sort Table component: A table object prop must be passed');\r\n      return (<span></span>);\r\n    }\r\n\r\n\r\n    if (hasProperty(props,'letters') === true) {\r\n      if (hasProperty(props,'noupper') === true &&\r\n          hasProperty(props,'nolower') === true &&\r\n          hasProperty(props,'nodigit') === true) {\r\n            console.error ('Search Sort Table component: If using letters prop, can not have all three: noupper, nolower, and nodigit');\r\n            return (<span></span>);\r\n        }\r\n    } else {\r\n    if (hasProperty(props,'noupper') === true ||\r\n        hasProperty(props,'nolower') === true ||\r\n        hasProperty(props,'nodigit') === true) {\r\n          console.error ('Search Sort Table component: Can not have noupper, nolower, or nodigit props without the letters prop');\r\n          return (<span></span>);\r\n        }\r\n    }\r\n\r\n    /****************************************************************************\r\n     *\r\n     * This will populate the header drop down and place a blank at the\r\n     * beginning.\r\n     *\r\n     ****************************************************************************/\r\n    function populateSearch() {\r\n        let order = [];         // The next sort order\r\n        let localFilter = [...filter];   // The values in the filter input boxes\r\n        let search = [''];      // The values for the drop down\r\n\r\n        // Build the items for the drop down, the sort order, and the filter\r\n        for (let i = 0; i < props.table.length; i++) {\r\n            if (props.table[i].search === true) {\r\n                search.push (props.table[i].header);\r\n            }\r\n            order.push ('N');\r\n            if (hasProperty(props,'nofilter') === false) {\r\n                localFilter[i] = '';\r\n            }\r\n        }\r\n\r\n        setSearchHeaderValues(search);\r\n\r\n        setSortOrder(order);\r\n\r\n        setFilter(localFilter);\r\n\r\n        // Build the values for the row drop down on the bottom right of the screen.\r\n        let values = [];\r\n        for (let count = props.MAX_ITEMS; count <= 100; count += 5) {\r\n            values.push(count);\r\n        }\r\n\r\n        values.push ('All');\r\n        setRowValues (values);\r\n    }\r\n\r\n\r\n\r\n    /**************************************************************************************************\r\n     *\r\n     * Render the screen.\r\n     *\r\n     **************************************************************************************************/\r\n    let tableDivStyle = '';\r\n    if (hasProperty(props,'scroll') === true) {\r\n        tableDivStyle = 'sw-sst_scrollStyle';\r\n    }\r\n\r\n    let heightStyle = {};\r\n    if (hasProperty(props, 'height') === true) {\r\n        heightStyle = { height: props.height }; \r\n    }\r\n\r\n    let filterBackground = null;\r\n    if (filterOn !== 'Y') {\r\n        filterBackground = 'sw-sst_imageStyleDisable';\r\n    } else if (filterPressed === true) {\r\n        filterBackground = 'sw-sst_imageStyleFilter';\r\n    } else {\r\n        filterBackground = 'sw-sst_imageStyleNormal';\r\n    }\r\n\r\n    const genButtonStyle         = generateCSSButton('sw-sst_buttonStyle', props.error, false, false, 'sw-sst_normalButtonBackground', 'sw-sst_grayButtonBackground');\r\n    const genTopButtonStyle      = generateCSSButton('sw-sst_noButtonStyle', props.error, topDisabled, true, 'sw-sst_normalButtonBackground', 'sw-sst_grayButtonBackground');\r\n    const genPreviousButtonStyle = generateCSSButton('sw-sst_noButtonStyle', props.error, previousDisabled, true, 'sw-sst_normalButtonBackground', 'sw-sst_grayButtonBackground');\r\n    const genNextButtonStyle     = generateCSSButton('sw-sst_noButtonStyle', props.error, nextDisabled, true, 'sw-sst_normalButtonBackground', 'sw-sst_grayButtonBackground');\r\n    const genBottomButtonStyle   = generateCSSButton('sw-sst_noButtonStyle', props.error, bottomDisabled, true, 'sw-sst_normalButtonBackground', 'sw-sst_grayButtonBackground');\r\n    const genFilterStyle         = generateCSSButton(filterBackground,  props.error, filterOn !== 'Y', true, 'sw-sst_normalButtonBackground', 'sw-sst_grayButtonBackground');\r\n\r\n    const topSymbol = '|\\u2BC7';        // Bar and left triangle\r\n    const previousSymbol = '\\u2BC7';    // Left triangle\r\n    const nextSymbol = '\\u2BC8';        // Right triangle\r\n    const bottomSymbol = '\\u2BC8|';     // Right triangle and bar\r\n\r\n    // Populate the table with the next set of data to populate\r\n\r\n    let showData = [];\r\n    if (props.data !== undefined && props.data !== null && indexes.length !== 0) {\r\n        for (let i = start; i < end && i < props.data.length; i++) {\r\n            showData.push (props.data[indexes[i]]);\r\n        }\r\n    }\r\n\r\n//    console.log('showData :', showData);\r\n\r\n    let letterDigit = [];\r\n    let letters = null;\r\n    if (hasProperty(props,'letters') === true) {\r\n        if (hasProperty(props,'noupper') === true) {\r\n            if (hasProperty(props,'nolower') === true) {\r\n                letterDigit = [...digit];\r\n            } else {    // Lower\r\n                if (hasProperty(props,'nodigit') === true) {\r\n                    letterDigit = [...lower];\r\n                } else {    // Digit\r\n                    letterDigit = [...lower, ...digit];\r\n                }\r\n            }\r\n        } else {    // Upper\r\n            if (hasProperty(props,'nolower') === true) {\r\n                if (hasProperty(props,'nodigit') === true) {\r\n                    letterDigit = [...upper];\r\n                } else {    // Digit\r\n                    letterDigit = [...upper, ...digit];\r\n                }\r\n            } else {    // Lower\r\n                if (hasProperty(props,'nodigit') === true) {\r\n                    letterDigit = [...upper, ...lower];\r\n                } else {    // Digit\r\n                    letterDigit = [...upper, ...lower, ...digit];\r\n                }\r\n            }\r\n        }\r\n\r\n        letterDigit.push('^');\r\n        letters = <span key=\"letters\"><br />{letterDigit.map(alphabet)}<br /><br /></span>\r\n    }\r\n\r\n    let topButtonHTML = <span></span>;\r\n    if (hasProperty(props,'notop') === false && hasProperty(props,'showAll') === false) {\r\n        topButtonHTML = <button name=\"top\" className={genTopButtonStyle} onClick={() => topButton()} disabled={props.error || topDisabled}>{topSymbol}</button>;\r\n    }\r\n\r\n    let previousButtonHTML = <span></span>;\r\n    if (hasProperty(props,'noprevious') === false && hasProperty(props,'showAll') === false) {\r\n        previousButtonHTML = <button name=\"previous\" className={genPreviousButtonStyle} onClick={() => previousButton()} disabled={props.error || previousDisabled}>{previousSymbol}</button>;\r\n    }\r\n\r\n    let nextButtonHTML = <span></span>;\r\n    if (hasProperty(props,'nonext') === false && hasProperty(props,'showAll') === false) {\r\n        nextButtonHTML = <button name=\"next\" className={genNextButtonStyle} onClick={() => nextButton()} disabled={props.error || nextDisabled}>{nextSymbol}</button>;\r\n    }\r\n\r\n    let bottomButtonHTML = <span></span>;\r\n    if (hasProperty(props,'nobottom') === false && hasProperty(props,'showAll') === false) {\r\n        bottomButtonHTML = <button name=\"bottom\" className={genBottomButtonStyle} onClick={() => bottomButton()} disabled={props.error || bottomDisabled}>{bottomSymbol}</button>;\r\n    }\r\n\r\n    let allButtonHTML = <span></span>;\r\n    if (hasProperty(props,'showAll') === true) {\r\n        allButtonHTML = <button name=\"all\" className={genBottomButtonStyle} onClick={() => allButton()} disabled={props.error}>All</button>;\r\n    }\r\n\r\n    let title = null;\r\n    if (hasProperty(props,'title') === true) {\r\n        if (hasProperty(props,'titleSize') === true) {\r\n            if (props.titleSize === '1') {\r\n                title = <h1 className=\"sw-sst_titleStyle\">{props.title}</h1>\r\n            } else if (props.titleSize === '2') {\r\n                title = <h2 className=\"sw-sst_titleStyle\">{props.title}</h2>\r\n            } else {\r\n                title = <h3 className=\"sw-sst_titleStyle\">{props.title}</h3>\r\n            }\r\n        } else {\r\n            title = <h3 className=\"sw-sst_titleStyle\">{props.title}</h3>\r\n        }\r\n    }\r\n\r\n    const buttonStyle2 = {\r\n        border: \"none\",\r\n        backgroundColor: \"none\",\r\n    }\r\n\r\n    const filterSection = (hasProperty(props,'nofilter') === true) ? null :\r\n        (<>\r\n            <CheckBox selectedValue=\"Y\" name=\"filterOn\" text=\"&nbsp;&nbsp;&nbsp;Filter On\" value={filterOn} onChange={(event) => processFilterOn(event.target.value)} />\r\n            <button onClick={filterButton} className=\"sw-sst_buttonStyle2\" disabled={props.error || filterOn !== 'Y'}>\r\n                <img src={funnel} width=\"30px\" height=\"30px\" className={genFilterStyle} />\r\n            </button>\r\n        </>)\r\n\r\n    const searchStyle = processInvalidStyleScreen(invalid, SRCHHDR, 'sw-sst_searchStyle');\r\n\r\n    const itemStyle = processInvalidStyleScreen(invalid, SRCHITEM);\r\n\r\n    const searchSection = (hasProperty(props,'nosearch') === true) ? null :\r\n        (<>\r\n            <span className=\"sw-invalid_checkForError\">\r\n                <Choice choices={searchHeaderValues}  name=\"searchHeader\" value={searchHeader} onChange={(event) => setSearchHeader(event.target.value)} onClick={() => wasClickedScreen(invalid, SRCHHDR, setInvalid)} className={searchStyle} disabled={props.error} />\r\n                {(isInvalid(invalid[SRCHHDR], -1) === true) ? <span className=\"sw-invalid_errMessage\">{invalid[SRCHHDR].message}</span> : null }\r\n            </span>\r\n            <span className=\"sw-invalid_checkForError\">\r\n                <input type=\"text\" name=\"searchItem\" value={searchItem} onChange={(event) => setupSearch(event.target.value)} onClick={() => wasClickedScreen(invalid, SRCHITEM, setInvalid)} className={itemStyle} disabled={props.error} />\r\n                {(isInvalid(invalid[SRCHITEM], -1) === true) ? <span className=\"sw-invalid_errMessage\">{invalid[SRCHITEM].message}</span> : null }\r\n            </span>\r\n            <button name=\"searchButtonName\" className={genButtonStyle} onClick={() => searchItemButton()} disabled={props.error}>Search</button>\r\n        </>)\r\n\r\n    const footer = (hasProperty(props,'nofooter') === true) ? null :\r\n        <div className=\"sw-sst_footStyle\">\r\n            { (hasProperty(props,'norows') === true) ? null :\r\n                <span className=\"sw-sst_marginStyle\">\r\n                    <Choice choices={rowValues} name=\"rows\" value={maximum} onChange={(event) => processMaxItems(event.target.value)} className=\"sw-sst_noBorderStyle\" disabled={props.error} />\r\n                    rows\r\n                </span>\r\n            }\r\n            {topButtonHTML}\r\n            {previousButtonHTML}\r\n            { (hasProperty(props,'nodisplay') === true) ? null :\r\n                <span>{start + ' - ' + end + ' of ' + length}</span>\r\n            }\r\n            {nextButtonHTML}\r\n            {bottomButtonHTML}\r\n        </div>\r\n\r\n    let hoverClassName = `sw-sst_tableStyle `;\r\n    if (hasProperty(props,'hover') === true) {\r\n        let root = document.documentElement;\r\n        let hoverBackColor = 'cyan';\r\n        let found = false;\r\n\r\n        if (hasProperty(props,'hoverColor') === true) {\r\n            hoverBackColor = props.hoverColor;\r\n        }\r\n\r\n        for (let i = 1; i <= 10 && found === false; i++) {\r\n            let colorValue = getComputedStyle(root).getPropertyValue(`--sw-sst_hover_back_color${i}`);\r\n            if (colorValue === ' none') {\r\n                root.style.setProperty(`--sw-sst_hover_back_color${i}`, hoverBackColor);\r\n                hoverClassName += `sw-sst_search_sort_table${i}`;\r\n                found = true;\r\n            } else if (colorValue === hoverBackColor) {\r\n                hoverClassName += `sw-sst_search_sort_table${i}`;\r\n                found = true;\r\n            }\r\n        }\r\n\r\n        if (found === false) {\r\n            console.error ('You can have at most 10 different hover colors for tables.')\r\n        }\r\n    }\r\n\r\n    return (    // Render the screen\r\n        <div className=\"sw-sst_divStyle\">\r\n            {title}\r\n            <div>\r\n                { (hasProperty(props,'sfbottom') === false) ?\r\n                    (<>\r\n                        {filterSection}\r\n                        {searchSection}\r\n                        {allButtonHTML}\r\n                        {letters}\r\n                    </>) : null\r\n                }\r\n            </div>\r\n            { (props.data.length === 0 && hasProperty(props,'showtable') === false) ?\r\n            <div>No Data to Display</div> :\r\n            <div>\r\n                <div className={tableDivStyle} style={heightStyle}>\r\n                    <table className={hoverClassName}>\r\n                        <tbody>\r\n                            <tr key=\"header\" className=\"sw-sst_centerBoldStyle\">\r\n                                {props.table.map(buildHeaders)}\r\n                            </tr>\r\n                           { showData.map(props.eachRowInTable) }\r\n                           { (hasProperty(props,'footer') === true) ?\r\n                                <tr className=\"footerStyle\">{ props.footer.map(buildFooter) }</tr> : null }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                {footer}\r\n                <div>\r\n                    { (hasProperty(props,'sfbottom') === true) ?\r\n                        (<>\r\n                            {filterSection}\r\n                            {searchSection}\r\n                            {allButtonHTML}\r\n                            {letters}\r\n                        </>) : null\r\n                    }\r\n                </div>\r\n            </div>\r\n            }\r\n            <AlertModal show={showAlert} closeFunct={setShowAlert} message={alertMessage} />\r\n        </div>\r\n    );\r\n\r\n    /*************************************************************************************\r\n     *\r\n     * This will set the number of data items that are to be displayed on the screen.\r\n     *\r\n     * @param {*} value the value selected from the drop down\r\n     *\r\n     **************************************************************************************/\r\n    function processMaxItems(value) {\r\n        if (value === 'All') {  // All data should be shown\r\n            setMaxItems(props.data.length);\r\n        } else {\r\n            setMaxItems(parseInt(value));\r\n        }\r\n        setMaximum(value);  // Used so the value will show on the drop down\r\n    }\r\n\r\n    /*********************************************************************************\r\n     *\r\n     * This is called whenever the user changes the search item.  It will take the\r\n     * user to the beginning of the data and set the value typed.\r\n     *\r\n     * @param {*} value value to set the search item to\r\n     *\r\n     **********************************************************************************/\r\n    function setupSearch(value) {\r\n        setStartEnd(0, length, indexes);\r\n        setSearchItem(value);\r\n    }\r\n\r\n    /********************************************************************************\r\n     *\r\n     * The is will place the headers in the table object into the table.\r\n     *\r\n     * @param {*} row   the name of the header\r\n     * @param {*} i     the index of the column in the table\r\n     *\r\n     *********************************************************************************/\r\n    function buildHeaders (row, i) {\r\n        let key = 'cell_' + i;\r\n        let btnImg = '\\u2BC8';\r\n        // let filterKey = 'filter_' + i;\r\n        let filterName = row.header + '_filter'\r\n\r\n        // console.log(`buildHeaders() filter[${filter.length}]:`, JSON.stringify(filter));\r\n\r\n\r\n        if (props.table[i].sort === true && sortOrder[i] !== 'N') {\r\n            // After the sort was done, it flips the sort order; therefore, if it is\r\n            // now a D, that means it was sorted in ascending order previously.  If\r\n            // it is now an A, that means it was sorted in descending order previously.\r\n            if (sortOrder[i] === 'A') {\r\n                btnImg = '\\u2BC5';    // Up arrow\r\n            } else if (sortOrder[i] === 'D') {\r\n                btnImg = '\\u2BC6';    // Down arrow\r\n            } else if (sortOrder[i] === 'N') {\r\n                btnImg = '\\u2BC8';    // Right arrow\r\n            }\r\n        }\r\n\r\n        // Filter is turned on\r\n        if (filterOn === 'Y' && hasProperty(props,'nofilter') === false) {\r\n            let filterStyle = processInvalidStyleScreen(invalid, FILTER, 'sw-sst_widthStyle');\r\n\r\n            if (row.sort === false || hasProperty(props,'nosort') === true) { // No sorting, so no onClick handler\r\n                if (row.search === false) { // No searching on this field, so no filtering on it also\r\n                    return (<th key={key} className=\"sw-sst_headerStyle\">{row.header}</th>)  // Display the header only\r\n                } else {    // Can filter; therefore, display the input field\r\n                    return (\r\n                        <th key={key} className=\"sw-sst_headerStyle\">\r\n                            <div>{row.header}</div>\r\n                            <span className=\"sw-invalid_checkForError\">\r\n                                <input type=\"text\" name={filterName} className={filterStyle} value={filter[i]} onChange={(event) => processFilter(event.target.value, i)} disabled={props.error} />\r\n                            </span>\r\n                        </th>\r\n                    );\r\n                }\r\n            } else {    // Sorting on the column is allowed\r\n                if (row.search === false) { // No searching or filtering on the column, so display header only\r\n                    return (\r\n                        <th key={key} className=\"sw-sst_headerStyle\">\r\n                            {row.header}\r\n                            <button name=\"sort\" onClick={() => sortClicked(row.name, 'X', indexes)} className=\"sw-sst_buttonStyle2\">{btnImg}</button>\r\n                        </th>\r\n                    );\r\n                } else {    // Searching and filtering is allowed\r\n                    return (    // Display header and input field for filtering\r\n                        <th key={key} className=\"sw-sst_headerStyle\">\r\n                            <div>\r\n                                {row.header}\r\n                                <button name=\"sort\" onClick={() => sortClicked(row.name, 'X', indexes)} className=\"sw-sst_buttonStyle2\">{btnImg}</button>\r\n                            </div>\r\n                            <span className=\"sw-invalid_checkForError\">\r\n                                <input type=\"text\" name={filterName} className={filterStyle} value={filter[i]} onChange={(event) => processFilter(event.target.value, i)} disabled={props.error} />\r\n                            </span>\r\n                        </th>\r\n                    );\r\n                }\r\n            }\r\n        // Filtering is off or not allowed\r\n        } else if (row.sort === false || hasProperty(props,'nosort') === true) { // No sorting, so no onClick handler\r\n            return ( <th key={key} className=\"sw-sst_headerStyle\">{row.header}</th> ); // Display the header only\r\n        } else {    // Soring on the column is allowed\r\n            return (\r\n                <th key={key} className=\"sw-sst_headerStyle\">\r\n                    {row.header}\r\n                    <button name=\"sort\" onClick={() => sortClicked(row.name, 'X', indexes)} className=\"sw-sst_buttonStyle2\">{btnImg}</button>\r\n                </th>\r\n            );\r\n        }\r\n    }\r\n\r\n    /****************************************************************************************************\r\n     *\r\n     * This will place a line in the last row of the table, which can be used for totals of each column.\r\n     *\r\n     * @param {*} row   represnts the value to place in each column of the table\r\n     * @param {*} i     index into the mapped array\r\n     *\r\n     *****************************************************************************************************/\r\n    function buildFooter(row, i) {\r\n        let key = 'footer_' + i;\r\n\r\n        return (    // Place a value in the column\r\n            <td key={key} className=\"sw-sst_footerStyle\">{row}</td>\r\n        )\r\n    }\r\n\r\n    /***************************************************************************************\r\n     *\r\n     * This will turn filtering on or off.  If filtering is on, the following will occur:\r\n     *  1.  It will display the filter input fields below each header (done in buildHeaders)\r\n     *  2.  Place an index on the data under the filterIndex field.  Used to copy the data\r\n     *      from the filtering data to the main data.\r\n     *  3.  Store a copy of the main data.\r\n     *  4.  Enable the Filter button\r\n     *\r\n     * If filtering is off, the following will occur:\r\n     *  1.  Copy the filtered data back to the main data using the filter index.\r\n     *  2.  Remove the filtered data\r\n     *  3.  Copy the main data back\r\n     *\r\n     * @param {*} value inidicates whether filtering is on or off\r\n     *\r\n     *****************************************************************************************/\r\n    function processFilterOn(value) {\r\n        setFilterOn(value);\r\n\r\n        if (value === 'Y') {    // Filter is on\r\n            clearSetBackground(0, false);\r\n        } else {\r\n            setFilterPressed(false);        // Disable the filter button\r\n        }\r\n\r\n        setIndex(origIndexes, true);\r\n        resetSortOrder();\r\n    }\r\n\r\n    /****************************************************************************************\r\n     *\r\n     * This will gather the data entered in the filter input boxes into an array.\r\n     *\r\n     * @param {*} value the value entered in a filter input box\r\n     * @param {*} i     the index into the array to store the value in the array\r\n     *\r\n     *****************************************************************************************/\r\n    function processFilter(value, i) {\r\n        let local = [...filter];    // The filter array for the filter input boxes\r\n\r\n        local[i] = value;\r\n\r\n        // console.log(`processFilter() local[${local.length}]`, JSON.stringify(local));\r\n\r\n        setFilter(local);\r\n    }\r\n\r\n    /******************************************************************************************\r\n     *\r\n     * This will make sure that the user entered at least one value in one of the filter\r\n     * input boxes.  This is called when the user presses the Filter button.\r\n     *\r\n     ******************************************************************************************/\r\n    function filterValidate() {\r\n        let localInvalid = [...invalid];\r\n\r\n        localInvalid[FILTER].validity = false;\r\n        localInvalid[FILTER].display = false;\r\n\r\n        // Search though the filter array to find a value\r\n        for (let i = 0; i < filter.length; i++) {\r\n            if (filter[i] !== '') { // There is a value\r\n                return true;\r\n            }\r\n        }\r\n\r\n        // No values for filtering were entered\r\n        localInvalid = setInvalidScreen (localInvalid, FILTER, '');\r\n        localInvalid[FILTER].display = false;\r\n\r\n        setInvalid(localInvalid);\r\n\r\n        setAlertMessage('A filter value must be entered in at least one filter box');\r\n        setShowAlert(true);\r\n\r\n        return false;\r\n    }\r\n\r\n    /***************************************************************************************\r\n     *\r\n     * This will filter the data and display it on the screen.\r\n     *\r\n     ***************************************************************************************/\r\n    function filterButton() {\r\n        // Make sure filter values were entered\r\n        if (filterValidate() === false) {\r\n            return;\r\n        }\r\n\r\n        let data = props.data;  // The data to filter\r\n        let newData = [];       // The filtered data\r\n        let indexing = [];      // List of indexes that indicate which filter input boxes have data\r\n        let found = [];         // Indicates whether that filter input box found data to filter\r\n        let count = 0;          // counts the number of filtered data\r\n        let done = false;       // Indicates that we are done filtering that data element\r\n\r\n        // Build the indexes in which the user entered data in the filter input box\r\n        for (let i = 0; i < props.table.length; i++) {\r\n            if (filter[i] !== '') {\r\n                indexing.push(i);\r\n            }\r\n        }\r\n\r\n        let foundDate = false;\r\n\r\n        // Spin through the data and see if it meets the filter criteria\r\n        for (let i = 0; i < indexes.length; i++) {\r\n            found = [];     // Empty the found array for the next data element\r\n            done = false;\r\n            // Spin through the filter input boxes to see if the data element matches\r\n            for (let j = 0; j < indexing.length && done === false; j++) {\r\n                foundDate = false;\r\n                // Find if the index is in the date table\r\n                if (hasProperty(props.table[indexing[j]], 'dataDate') && hasProperty(props.table[indexing[j]], 'filterDate')) {\r\n                    foundDate = true;\r\n                }\r\n\r\n                // The data field is blank or has no value\r\n                if (data[indexes[i]][props.table[indexing[j]].name] === null) {\r\n                    found.push(false);\r\n                    done = true;\r\n                } else if (foundDate === true) {    // The field contains a date\r\n                    let dataPart = null;\r\n                    let filterPart = null;\r\n\r\n                    // Convert the format for the data part\r\n                    if (props.table[indexing[j]].dataDate === 'MM/DD/YYYY') {\r\n                        dataPart = convertDate(data[indexes[i]][props.table[indexing[j]].name], '/', 1);\r\n                    } else if (props.table[indexing[j]].dataDate === 'MM-DD-YYYY') {\r\n                        dataPart = convertDate(data[indexes[i]][props.table[indexing[j]].name], '-', 1);\r\n                    } else if (props.table[indexing[j]].dataDate === 'MM/DD/YYYY HH:MM:SS') {\r\n                        dataPart = convertDateTime(data[indexes[i]][props.table[indexing[j]].name], '/', 1);\r\n                    } else if (props.table[indexing[j]].dataDate === 'MM-DD-YYYY HH:MM:SS') {\r\n                        dataPart = convertDateTime (data[indexes[i]][props.table[indexing[j]].name], '-', 1);\r\n                    } else if (props.table[indexing[j]].dataDate === 'YYYY-MM-DDTHH:MM:SS.SSS') {\r\n                        dataPart = convertDateTimeReg (data[indexes[i]][props.table[indexing[j]].name]);\r\n                    } else {\r\n                        dataPart = data[indexes[i]][props.table[indexing[j]].name];\r\n                    }\r\n\r\n                    // Convert the format for the filter part\r\n                    if (props.table[indexing[j]].filterDate === 'MM/DD/YYYY') {\r\n                        if (filter[indexing[j]].length === 'MM/DD/YYYY'.length) {\r\n                            filterPart = convertDate(filter[indexing[j]], '/', 1);\r\n                        } else if (filter[indexing[j]].length === 'MM/YYYY'.length && filter[indexing[j]].indexOf('/') !== -1) {\r\n                            filterPart = convertDate(filter[indexing[j]], '/', 2);\r\n                        } else {\r\n                            filterPart = filter[indexing[j]];\r\n                        }\r\n                    } else if (props.table[indexing[j]].filterDate === 'MM-DD-YYYY') {\r\n                        if (filter[indexing[j]].length === 'MM-DD-YYYY'.length) {\r\n                            filterPart = convertDate(filter[indexing[j]], '-', 1);\r\n                        } else if (filter[indexing[j]].length === 'MM-YYYY'.length && filter[indexing[j]].indexOf('-') !== -1) {\r\n                            filterPart = convertDate(filter[indexing[j]], '-', 2);\r\n                        } else {\r\n                            filterPart = filter[indexing[j]];\r\n                        }\r\n                    } else if (props.table[indexing[j]].filterDate === 'MM/DD/YYYY HH:MM:SS') {\r\n                        if (filter[indexing[j]].length === 'MM/DD/YYYY HH:MM:SS'.length) {\r\n                            filterPart = convertDateTime(filter[indexing[j]], '/', 1);\r\n                        } else if (filter[indexing[j]].length === 'MM/YYYY'.length && filter[indexing[j]].indexOf('/') !== -1) {\r\n                            filterPart = convertDate(filter[indexing[j]], '/', 2);\r\n                        } else {\r\n                            filterPart = filter[indexing[j]];\r\n                        }\r\n                    } else if (props.table[indexing[j]].filterDate === 'MM-DD-YYYY HH:MM:SS') {\r\n                        if (filter[indexing[j]].length === 'MM-DD-YYYY HH:MM:SS'.length) {\r\n                            filterPart = convertDateTime (filter[indexing[j]], '-', 1);\r\n                        } else if (filter[indexing[j]].length === 'MM/YYYY'.length && filter[indexing[j]].indexOf('-') !== -1) {\r\n                            filterPart = convertDate(filter[indexing[j]], '-', 2);\r\n                        } else {\r\n                            filterPart = filter[indexing[j]];\r\n                        }\r\n                    } else if (props.table[indexing].filterDate === 'YYYY-MM-DDTHH:MM:SS.SSS') {\r\n                        if (filter[indexing[j]].length === 'YYYY-MM-DDTHH:MM:SS.SSS'.length) {\r\n                            filterPart = convertDateTimeReg (filter[indexing[j]]);\r\n                        } else {\r\n                            filterPart = filter[indexing[j]];\r\n                        }\r\n                    } else {\r\n                        filterPart = filter[indexing[j]];\r\n                    }\r\n\r\n                    if (dataPart.toString().indexOf(filterPart.toString()) !== -1) {  // Compare the dates\r\n                        found.push(true);\r\n                    } else {    // Dates are not equal\r\n                        found.push(false);\r\n                        done = true;\r\n                    }\r\n                // The data element matches one of the filter input boxes\r\n                } else if (data[indexes[i]][props.table[indexing[j]].name].toString().indexOf(filter[indexing[j]].toString()) !== -1) {\r\n                    found.push(true);   // Place a true in the found array indicating the filter input box matched\r\n                } else {    // The data element did not match the filter input box\r\n                    found.push(false);\r\n                    done = true;    // Since a match was not found the data element will not meet the filter criteria\r\n                }\r\n            }\r\n\r\n\r\n            // Check to see if the data element met all the filter criteria\r\n            let move = true;\r\n            // Spin through found array making sure all values are true.  If they are, the data element\r\n            // matches the filter criteria\r\n            for (let k = 0; k < found.length && move === true; k++) {\r\n                if (found[k] === false) {   // False was found, so the data element does not match filter criteria\r\n                    move = false;\r\n                }\r\n            }\r\n\r\n            // Data element matches the filter criteria, so place the data in the filtered data area\r\n            if (move === true) {\r\n                newData.push(indexes[i]);\r\n                count++;\r\n            }\r\n        }\r\n\r\n        if (count > 0) {    // There are filtered data elements\r\n            setIndex(newData, true);\r\n            setFilterPressed(true);\r\n        }\r\n    }\r\n\r\n    function setIndex(indexing, doCopy) {\r\n        setIndexes(indexing);\r\n        if (doCopy === true) {\r\n            setCopyIndex(indexing);\r\n        }\r\n        setLength (indexing.length);\r\n        setStartEnd (0, indexing.length, indexing);\r\n    }\r\n\r\n\r\n    /**********************************************************************************************\r\n     *\r\n     * This will convert the date from the MM/DD/YYYY or MM-DD-YYYY format to the YYYY-MM-DD\r\n     * format.\r\n     *\r\n     * @param {*} date the date to be converted to the YYYY-MM-DD format\r\n     * @param {*} char the slash (/) or dash (-)\r\n     *\r\n     **********************************************************************************************/\r\n    function convertDate(date, char, type) {\r\n        let split = date.split(char);\r\n\r\n        if (type === 1) {\r\n            return `${split[2]}-${split[0]}-${split[1]}`;\r\n        } else {\r\n            return `${split[1]}-${split[0]}`;\r\n        }\r\n    }\r\n\r\n    /**********************************************************************************************\r\n     *\r\n     * This will convert the date and time from the MM/DD/YYYY HH:MM:SS or MM-DD-YYYY HH:MM:SS\r\n     * format to the YYYY-MM-DD HH:MM:SS format.\r\n     *\r\n     * @param {*} date the date to be converted to the YYYY-MM-DD format\r\n     * @param {*} char the slash (/) or dash (-)\r\n     *\r\n     **********************************************************************************************/\r\n    function convertDateTime(date, char, type) {\r\n        let dateTime = date.split(' ');\r\n        let localDate = dateTime[0].split(char);\r\n\r\n        if (type === 1) {\r\n            return `${localDate[2]}-${localDate[0]}-${localDate[1]}T${dateTime[1]}`;\r\n        } else {\r\n            return `${localDate[1]}-${localDate[0]}`;\r\n        }\r\n    }\r\n\r\n    /**********************************************************************************************\r\n     *\r\n     * This will strip of the milliseconds from the YYYY-MM-DDTHH:MM:SS.SSS format (strips the\r\n     * .SSS).\r\n     *\r\n     * @param {*} date the date to strip the milliseconds from\r\n     *\r\n     ***********************************************************************************************/\r\n    function convertDateTimeReg(date) {\r\n        let split = date.split('.');\r\n\r\n        if (split.length === 0) {\r\n            return date;\r\n        } else {\r\n            return split[0];\r\n        }\r\n    }\r\n\r\n    /******************************************************************************\r\n     *\r\n     * This will validate that data was entered in the header drop down and text\r\n     * box for searching.  This is called when the Search button is pressed.\r\n     *\r\n     * @param {*} which indicates whether both (B) the search header and item\r\n     *                  should be validated or only the header (H)\r\n     *\r\n     *******************************************************************************/\r\n    function validate(which) {\r\n        let localInvalid = [...invalid];\r\n\r\n        localInvalid[SRCHHDR].validity = false;\r\n        localInvalid[SRCHHDR].display = false;\r\n        localInvalid[SRCHITEM].validity = false;\r\n        localInvalid[SRCHITEM].display = false;\r\n\r\n        if (searchHeader === '') {\r\n            localInvalid = setInvalidScreen(localInvalid, SRCHHDR, 'A column header to be searched must be selected');\r\n        }\r\n\r\n        if (which === 'B' && searchItem === '') {\r\n            localInvalid = setInvalidScreen(localInvalid, SRCHITEM, 'An item to search must be entered');\r\n        }\r\n\r\n        setInvalid(localInvalid);\r\n\r\n        return  localInvalid[SRCHHDR].validity === false &&\r\n                localInvalid[SRCHITEM].validity === false;    // No problems occurred\r\n    }\r\n\r\n    /********************************************************************************\r\n     *\r\n     * This will search a column in a table until it matches the starting characters\r\n     * in the column with that which is in the text box.  In other words, if the\r\n     * column contains SMITH and SM is entered in the text box, it will match.  It\r\n     * will match until it finds the first occurrence.\r\n     *\r\n     **********************************************************************************/\r\n    function searchItemButton() {\r\n        if (validate('B') === true) {  // Make sure a value has been selected in the drop down and text box\r\n            let search = null;\r\n            search = (hasProperty(props,'ignorecase') === true) ?\r\n                searchItem.toUpperCase() :  // Convert to upper case to ignore case\r\n                searchItem;\r\n            // Find a match in the correct column of the data\r\n            let tableIndex = props.table.map(function(e) { return e.header; }).indexOf(searchHeader);   // Column match\r\n            if (hasProperty(props,'searchstart') === true) {\r\n                searchStart (search, props.table[tableIndex].name);\r\n            } else {\r\n                searchAny (search, props.table[tableIndex].name);\r\n            }\r\n//            let index = props.data.findIndex(val => val[props.table[tableIndex].name].toString().startsWith(search));   // Text match\r\n//            setStartEnd(index); // Set the start and end to show the found text\r\n        }\r\n    }\r\n\r\n    /********************************************************************************************\r\n     *\r\n     * This will search through the data until it finds the item in the specified column that\r\n     * starts with the search item.  This is only called if the props search start is set.\r\n     *\r\n     * @param {*} search    the item to search for\r\n     * @param {*} name      the field name in the data to search for the search item\r\n     *\r\n     *********************************************************************************************/\r\n    function searchStart (search, name) {\r\n        let begin = (hasProperty(props,'nocontsearch') === true || start === 0) ? 0: start + 1;  // Where to start the search\r\n        let found = false;  // Indicates that the item was found\r\n\r\n        for (let i = begin; i < length && found === false; i++) {\r\n            if (props.data[indexes[i]][name].toString().startsWith(search)) {    // Item was found\r\n                found = true;\r\n                setStartEnd(i, length, indexes); // Set the start and end positions of the data on the screen.\r\n            }\r\n        }\r\n    }\r\n\r\n    /********************************************************************************************\r\n     *\r\n     * This will search through the data until it finds the search item in the specified column\r\n     * anywhere within the data item.\r\n     *\r\n     * @param {*} search    the item to search for\r\n     * @param {*} name      the field name in the data to search for the search item\r\n     *\r\n     *********************************************************************************************/\r\n    function searchAny (search, name) {\r\n        let begin = (hasProperty(props,'nocontsearch') === true || start === 0) ? 0: start + 1;  // Where to start the search\r\n        let found = false;  // Indicates that the item was found\r\n\r\n        for (let i = begin; i < props.data.length && found === false; i++) {\r\n            const str = (props.data[indexes[i]][name]) ? props.data[indexes[i]][name].toString() : ''\r\n\r\n            if (str.indexOf(search) !== -1) {    // Item was found\r\n                found = true;\r\n                setStartEnd(i, length, indexes);  // Set the start and end positions of the data on the screen.\r\n            }\r\n        }\r\n    }\r\n\r\n    /*************************************************************************************\r\n     *\r\n     * This function will sort a column header in the table (all the data is sorted by\r\n     * the field that matches the column header) in either ascending (A) or descending (D)\r\n     * order.\r\n     *\r\n     * @param {*} name the name of the column header to sort\r\n     *\r\n     *************************************************************************************/\r\n    function sortClicked(name, orderType, indexes) {\r\n        let index = props.table.map(function(e) { return e.name; }).indexOf(name);   // Column match\r\n        let order = [...sortOrder];\r\n        let ordering = 'A';\r\n\r\n        if (orderType === 'A') {\r\n            ordering = 'A';\r\n        } else {\r\n            if (order[index] === 'N') { // If sort is not specified (first time), change it to ascending\r\n                ordering = 'A';\r\n                order[index] = 'A';\r\n            } else if (order[index] === 'A') {\r\n                ordering = 'D';\r\n                order[index] = 'D';\r\n            } else if (order[index] === 'D') {\r\n                ordering = 'N'\r\n                order[index] = 'N'\r\n            }\r\n\r\n            setSortOrder(order);\r\n        }\r\n\r\n        if (ordering === 'N') {\r\n            setIndex(copyIndex, false);\r\n\r\n            return;\r\n        }\r\n\r\n        let dateFormat = null;\r\n        if (hasProperty(props.table[index], 'sortDate')) {\r\n            dateFormat = props.table[index].sortDate;\r\n        }\r\n\r\n        let sortAry = [];\r\n        indexes.map ((row) => {\r\n            if (dateFormat !== null) {\r\n                if (dateFormat === 'MM/DD/YYYY') {\r\n                    sortAry.push({index: row, data: convertDate(props.data[row][name], '/', 1)});\r\n                } else if (dateFormat === 'MM-DD-YYYY') {\r\n                    sortAry.push({index: row, data: convertDate(props.data[row][name], '-', 1)});\r\n                } else if (dateFormat === 'MM/DD/YYYY HH:MM:SS') {\r\n                    sortAry.push({index: row, data: convertDateTime(props.data[row][name], '/', 1)});\r\n                } else if (dateFormat === 'MM-DD-YYYY HH:MM:SS') {\r\n                    sortAry.push({index: row, data: convertDateTime(props.data[row][name], '-', 1)});\r\n                } else if (dateFormat === 'YYYY-MM-DDTHH:MM:SS.SSS') {\r\n                    sortAry.push({index: row, data: convertDateTimeReg (data[row][name])});\r\n                } else {\r\n                    sortAry.push({index: row, data: props.data[row][name]})\r\n                }\r\n            } else {\r\n                sortAry.push({index: row, data: props.data[row][name]})\r\n            }\r\n        });\r\n\r\n        sortAry.sort(function (item1, item2) {\r\n            // Convert to upper case if ignoring case\r\n            if (typeof item1.data === 'string' &&\r\n                hasProperty(props,'ignorecase') === true) {\r\n                item1.data = (item1.data !== null) ? item1.data.toUpperCase() : null;\r\n                item2.data = (item2.data !== null) ? item2.data.toUpperCase() : null;\r\n            }\r\n\r\n            // Make the comparison\r\n            if (item1.data < item2.data) {\r\n                return (ordering === 'A') ? -1 : 1;\r\n            } else if (item1.data > item2.data) {\r\n                return (ordering === 'A') ? 1 : -1;\r\n            } else {\r\n                return 0;   // Equal\r\n            }\r\n        });\r\n\r\n        let newIndexes = [];\r\n        sortAry.map((row) => newIndexes.push(row.index));\r\n\r\n        setIndex(newIndexes, false);\r\n\r\n        return newIndexes;\r\n    }\r\n\r\n    /***********************************************************************************\r\n     *\r\n     * This will place the letters and digits on the screen below the search bar.\r\n     *\r\n     * @param {*} row   the letter or digit to display\r\n     * @param {*} i     the index into the letterDigit array\r\n     *\r\n     ***********************************************************************************/\r\n    function alphabet (row, i) {\r\n        let key = 'anchor_' + i;\r\n\r\n        return (\r\n            <span key={key}><a onClick={() => letterLink(`${row}`, i)} className={background[i]}>{row}</a>&nbsp;&nbsp;</span>\r\n        )\r\n    }\r\n\r\n    function resetSortOrder() {\r\n        let order = new Array(props.table.length).fill('N');\r\n        setSortOrder(order);\r\n    }\r\n\r\n    function clearSetBackground(index, set) {\r\n        let backgrd = [...background];\r\n        for (let i = 0; i < backgrd.length; i++) {\r\n            backgrd[i] = 'sw-sst_regBackground';\r\n        }\r\n        if (set === true) {\r\n            backgrd[index] = 'sw-sst_letterBackground';\r\n        }\r\n\r\n        setBackground(backgrd);\r\n}\r\n\r\n    /***********************************************************************************\r\n     *\r\n     * This will process the letter selected by the user.  It will first sort the\r\n     * column header selected by the user in ascending order.  Next, it will find that\r\n     * letter or digit in the data.  When found it will set the start at the beginning\r\n     * of that letter.  Next it will continue searching until if finds the end of that\r\n     * letter, which becomes the end of that letter.  It will note the start and end\r\n     * positions of that letter and display the items that begin with that letter on the\r\n     * screen.\r\n     *\r\n     * @param {*} letter the selected by the user\r\n     *\r\n     *************************************************************************************/\r\n    function letterLink(letter, bIndex) {\r\n        let indexing = [...origIndexes];\r\n\r\n        if (validate('H') === true) {   // Validate that a search header was entered\r\n            // Used to get the field name of the data item\r\n            let index = props.table.map(function(e) { return e.header; }).indexOf(searchHeader);   // Column match\r\n\r\n            clearSetBackground(bIndex, true);\r\n\r\n            resetSortOrder();\r\n            setIndex(origIndexes, true);\r\n            if (letter === '^') {\r\n//                setIndex(origIndexes, true);\r\n//                setDisableLetter(false);\r\n                return;\r\n            }\r\n\r\n            const sortIndexes = sortClicked (props.table[index].name, 'A', indexing); // ascending order\r\n\r\n            let newIndexes = [];\r\n\r\n            // Find the beginning of the letter\r\n            let begin = 0;      // Where the beginning of the letter is\r\n            let found = false;  // Indicates that the letter was found\r\n            for (begin = 0; begin < sortIndexes.length; begin++) {\r\n                // Letter or digit is found\r\n                if (props.data[sortIndexes[begin]][props.table[index].name] !== null &&\r\n                    props.data[sortIndexes[begin]][props.table[index].name].toString().startsWith(letter) === true) {\r\n                    found = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // Find the end of the letter\r\n            let stop = 0;       // Where the end of the letter is\r\n            for (stop = begin; stop < sortIndexes.length; stop++) {\r\n                // End of the letter or digit is found\r\n                if (props.data[sortIndexes[stop]][props.table[index].name] !== null &&\r\n                    props.data[sortIndexes[stop]][props.table[index].name].toString().startsWith(letter) === false) {\r\n                    break;\r\n                }\r\n                newIndexes.push(sortIndexes[stop]);\r\n            }\r\n\r\n            if (found === true) {\r\n                setIndex(newIndexes, true);\r\n                setDisable (0, newIndexes.length);\r\n                setFilterOn(false);\r\n            } else {\r\n                setAlertMessage ('No ' + searchHeader + ' starts with a ' + letter);\r\n                setShowAlert(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**********************************************************************************\r\n     *\r\n     * The All button will display all the data and goes along with the showTable\r\n     * props.  It will set the start at the beginning of the data and the end at the\r\n     * end of the data.\r\n     *\r\n     **********************************************************************************/\r\n    function allButton() {\r\n        setStart(0);\r\n        setEnd(length);\r\n    }\r\n\r\n    /*********************************************************************************\r\n     *\r\n     * This will determine if the top, previous, next, or bottom buttons are disabled\r\n     * on the search bar.\r\n     *\r\n     * @param {*} index the current starting index in the data\r\n     *\r\n     *********************************************************************************/\r\n    function setDisable(index, endLen) {\r\n        if (index > 0) {    // Index is past the start of the data, so enable top and previous\r\n            setPreviousDisabled(false);\r\n            setTopDisabled(false);\r\n        } else if (endLen - maxItems < 0) {   // Can not go any further up so disable top and previous\r\n            setPreviousDisabled(true);\r\n            setTopDisabled(true);\r\n        } else {    // Index is before the start of the data, so disable top and previous\r\n            setPreviousDisabled(true);\r\n            setTopDisabled(true);\r\n        }\r\n\r\n        // Cannot go any further down so disable, next and bottom\r\n        if (index + maxItems >= endLen) {\r\n            setNextDisabled(true);\r\n            setBottomDisabled(true);\r\n        } else {    // Not at the bottom so enable next and bottom\r\n            setNextDisabled(false);\r\n            setBottomDisabled(false);\r\n        }\r\n    }\r\n\r\n    function sendIndexes(start, end, length, indexes) {\r\n        let sentIndexes = [];\r\n        for (let i = start; i < end && i < length; i++) {\r\n            sentIndexes.push(indexes[i]);\r\n        }\r\n\r\n        if (hasProperty(props, 'indexing')) {\r\n            props.indexing(sentIndexes);\r\n        }\r\n\r\n        if (hasProperty(props, 'allIndexes') === true) {\r\n            props.allIndexes(indexes);\r\n        }\r\n    }\r\n\r\n    /***********************************************************************************\r\n     *\r\n     * This will determine where the current start and end are in the data so they\r\n     * can be displayed in the table.\r\n     *\r\n     * @param {*} index the current starting position\r\n     *\r\n     ***********************************************************************************/\r\n    function setStartEnd (index, dataLen, indexes) {\r\n        if (index !== -1) {\r\n            if (index + maxItems >= dataLen) { // End is past the data\r\n                setStart (index);\r\n                setEnd (dataLen);\r\n                (hasProperty(props,'startEnd') === true) ? props.startEnd (index, dataLen) : null;\r\n                sendIndexes(index, dataLen, dataLen, indexes);\r\n                setDisable(index, dataLen);\r\n            } else {    // End is not past the data\r\n                setStart (index);\r\n                setEnd (index + maxItems);\r\n                setDisable(index, dataLen);\r\n                (hasProperty(props,'startEnd') === true) ? props.startEnd (index, index + maxItems) : null;\r\n                sendIndexes(index, index + maxItems, dataLen, indexes);\r\n            }\r\n        }\r\n    }\r\n\r\n    /***********************************************************************************\r\n     *\r\n     * This is called when the top button is clicked.  It will set the start and end\r\n     * places in the data, so that it can be determined what to show in the table.\r\n     *\r\n     ***********************************************************************************/\r\n    function topButton() {\r\n        if (maxItems < length) {  // Not at the end of the data\r\n            setStart (0);\r\n            setEnd (maxItems);\r\n            (hasProperty(props,'startEnd') === true) ? props.startEnd (0, maxItems) : null;\r\n            sendIndexes(0, maxItems, length, indexes);\r\n        } else {    // At the end of the data\r\n            setStart (0);\r\n            setEnd (length);\r\n            (hasProperty(props,'startEnd') === true) ? props.startEnd (0, length) : null;\r\n            sendIndexes(0, length, length, indexes);\r\n        }\r\n\r\n        setDisable(0, length);  // Determine which buttons to disable\r\n    }\r\n\r\n    /***********************************************************************************\r\n     *\r\n     * This is called when the previous button is clicked.  It will set the start and end\r\n     * places in the data, so that it can be determined what to show in the table.\r\n     *\r\n     ***********************************************************************************/\r\n    function previousButton() {\r\n        let index = start - maxItems;    // Go back the appropriate number of records in the data\r\n        if (index <= 0) {   // Past the beginning of the data\r\n            setStart (0);\r\n            setEnd (maxItems);\r\n            (hasProperty(props,'startEnd') === true) ? props.startEnd (0, maxItems) : null;\r\n            sendIndexes(0, maxItems, length, indexes);\r\n        } else {    // Not past the beginning of the data\r\n            setStart (index);\r\n            setEnd (index + maxItems);\r\n            (hasProperty(props,'startEnd') === true) ? props.startEnd (index, index + maxItems) : null;    // Add max items to get the new current end\r\n            sendIndexes(index, index + maxItems, length, indexes);\r\n        }\r\n\r\n        setDisable(index, length);  // Determine which buttons to disable\r\n    }\r\n\r\n    /***********************************************************************************\r\n     *\r\n     * This is called when the next button is clicked.  It will set the start and end\r\n     * places in the data, so that it can be determined what to show in the table.\r\n     *\r\n     ***********************************************************************************/\r\n    function nextButton() {\r\n        let index = parseInt(end);    // Set the start at the current end of data for the table\r\n        let begin = 0;      // Current beginning of the start of the data\r\n\r\n        if (index < length) {    // Not at the end of the data\r\n            begin = index;\r\n        } else {    // At the end of the data, so place the beginning at the current start\r\n            begin = start;\r\n        }\r\n\r\n        if (index + maxItems >= length) { // At the end of the data\r\n            setStart (begin);\r\n            setEnd (length);\r\n            (hasProperty(props,'startEnd') === true) ? props.startEnd (begin, length) : null;\r\n            sendIndexes(begin, length, length, indexes);\r\n        } else {    // Not at the end of the data\r\n            setStart (begin);\r\n            setEnd (index + maxItems);\r\n            (hasProperty(props,'startEnd') === true) ? props.startEnd (begin, index + maxItems) : null;    // Increment to the next max items\r\n            sendIndexes(begin, index + maxItems, length, indexes);\r\n        }\r\n\r\n        setDisable(index, length);  // Determine which buttons to disable\r\n    }\r\n\r\n    /***********************************************************************************\r\n     *\r\n     * This is called when the bottom button is clicked.  It will set the start and end\r\n     * places in the data, so that it can be determined what to show in the table.\r\n     *\r\n     ***********************************************************************************/\r\n    function bottomButton() {\r\n        if (length - maxItems < 0) {  // At the end of the data\r\n            setStart (0);\r\n            setEnd (length);\r\n            (hasProperty(props,'startEnd') === true) ? props.startEnd (0, length) : null;\r\n            sendIndexes(0, length, length, indexes);\r\n        } else {    // Not at the end of the data\r\n            setStart (length - maxItems);\r\n            setEnd (length);\r\n            (hasProperty(props,'startEnd') === true) ? props.startEnd(length - maxItems, length) : null;\r\n            sendIndexes(length - maxItems, length, length, indexes);\r\n        }\r\n\r\n        setDisable(length, length);\r\n    }\r\n}\r\n\r\nexport default SearchSortTable;\r\n","import React, { useState, useEffect } from 'react'\n\nconst Slider = (props) => {\n    const min = (props.hasOwnProperty('start')) ? props.start : 0;\n    const max = (props.hasOwnProperty('end')) ? props.end : 100;\n    const startValue = (props.hasOwnProperty('startValue')) ? props.startValue : 0;\n    const displayValue = (props.hasOwnProperty('noshow')) ? false : true;\n\n    const [rangeValue, setRangeValue] = useState(startValue);\n\n    return (\n        <div className=\"sw-slider_rangeslider\">\n            <input type=\"range\" className=\"sw-slider_range\" name=\"slider\" min={min} defaultValue={startValue} max={max} onChange={(event) => setRangeValue(event.target.value)} onMouseMove={(event) => setRangeValue(event.target.value)} />\n            { (displayValue === true) ? \n                <span id=\"id_rangeValue\" name=\"rangeValue\" value={rangeValue} className=\"sw-slider_rangeValue\">\n                    {rangeValue}\n                </span> : null\n            }\n        </div>\n    )\n}\n\nexport default Slider;","\nconst hasProperty = (obj, propName) => { return !!Object.getOwnPropertyDescriptor(obj, propName);}\n\n\n/*********************************************************************\n *\n * 04-23-2020   Initial check-in.\n * 09-16-2020   Added the getNormalBackColor and getErrorColor\n *              functions.\n *\n *********************************************************************/\n\n/********************************************************************************\n *\n * This will generate a button and will determine if the button should be\n * disabled or not.\n *\n * @param {*} style         the style used for the button\n * @param {*} error         indicates whether an error occurred and if so, disable\n *                          the button\n * @param {*} disabled      indicates whether the button should be disabled or not\n * @param {*} disableColor  the color for the disabled button (default is gray)\n *\n *********************************************************************************/\nexport const generateButton = (style, error, disabled = false, disableColor = 'gray') => {\n    let genButtonStyle = {};\n    if (style !== null) {\n        genButtonStyle = Object.assign ({}, style); // Copy the button style\n    }\n    if (error === true || disabled === true) {  // Change certain buttons to the disable color to reflect the buttons have been disabled due to an error\n        genButtonStyle.backgroundColor = disableColor;\n    } else {    // Do not disable the button\n        // Make sure the style has a background color, if not use the theme color\n        genButtonStyle.backgroundColor = (style !== null && hasProperty(style, 'backgroundColor') === true) ?\n            style.backgroundColor : \n            Style(document.documentElement).getPropertyValue('--sw-theme_buttonColor');;\n    }\n\n    return genButtonStyle;  // Return the button\n}\n\n/********************************************************************************\n *\n * This will generate a button and will determine if the button should be\n * disabled or not.\n *\n * @param {*} error         indicates whether an error occurred and if so, disable\n *                          the button\n * @param {*} disabled      indicates whether the button should be disabled or not\n *\n *********************************************************************************/\nexport const generateDefaultButton = (error, disabled = false) => {\n    const genButtonStyle = Object.assign ({}, buttonStyle); // Copy the button style\n    if (error === true || disabled === true) {  // Change certain buttons to the disable color to reflect the buttons have been disabled due to an error\n        genButtonStyle.backgroundColor = \n            getComputedStyle(document.documentElement).getPropertyValue('--sw-theme_disableButtonColor');\n    } else {    // Do not disable the button\n        // Make sure the style has a background color, if not use the theme color\n        genButtonStyle.backgroundColor =  \n            getComputedStyle(document.documentElement).getPropertyValue('--sw-theme_buttonColor');\n    }\n\n    return genButtonStyle;  // Return the button\n}\n\nexport const generateCSSButton = (cssClassName,\n                                  error, \n                                  disabled = false,\n                                  noBackground = false,\n                                  cssNormalName = 'sw-theme_normalButtonBackground',\n                                  cssDisableName = 'sw-theme_grayButtonBackground') => {\n    if (error === true || disabled === true) {\n        return `${cssClassName} ${cssDisableName}`;\n    } else {\n        if (noBackground === true) {\n            return cssClassName;\n        } else {\n            return `${cssClassName} ${cssNormalName}`;\n        }\n    }\n}\n\nexport const generateCSSDefaultButton = (error, disabled = false) => {\n    generateCSSButton('sw-theme_buttonStyle', error, disabled);\n}","\n// https://stackoverflow.com/questions/9847580/how-to-detect-safari-chrome-ie-firefox-and-opera-browser\n// Googling for browser reliable detection often results in checking the User agent string. This method is not reliable,\n// because it's trivial to spoof this value.\n// I've written a method to detect browsers by duck-typing.\n//\n// Only use the browser detection method if it's truly necessary, such as showing browser-specific instructions to install an extension. Use feature detection when possible.\n//\n// Demo: https://jsfiddle.net/6spj1059/\n\nvar window = (window) ? window : {}\nvar navigator = (navigator) ? navigator : {userAgent:\"\"}\nvar document = (document) ? document : {}\n\n// Opera 8.0+\nexport const isOpera = (!!window.opr && !!opr.addons) || !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;\n\n// Firefox 1.0+\nexport const isFirefox = typeof InstallTrigger !== 'undefined';\n\n// Safari 3.0+ \"[object HTMLElementConstructor]\"\nexport const isSafari = /constructor/i.test(window.HTMLElement) || (function (p) { return p.toString() === \"[object SafariRemoteNotification]\"; })(!window['safari'] || (typeof safari !== 'undefined' && window['safari'].pushNotification));\n\n// Internet Explorer 6-11\nexport const isIE = /*@cc_on!@*/false || !!document.documentMode;\n\n// Edge 20+\nexport const isEdge = !isIE && !!window.StyleMedia;\n\n// Chrome 1 - 79\nexport const isChrome = !!window.chrome && (!!window.chrome.webstore || !!window.chrome.runtime);\n\n// Edge (based on chromium) detection\nexport const isEdgeChromium = isChrome && (navigator.userAgent.indexOf(\"Edg\") != -1);\n\n// Blink engine detection\nexport const isBlink = (isChrome || isOpera) && !!window.CSS;\n\n","// taken from http://jsfiddle.net/wLWuS/11/\n\nexport const date2str = (date,pattern) => {\n  var z = {\n      y:date.getFullYear(),\n      M:date.getMonth()+1,\n      d:date.getDate(),\n      h:date.getHours(),\n      m:date.getMinutes(),\n      s:date.getSeconds()\n  };\n  return pattern.replace(/(y+|M+|d+|h+|m+|s+)/g, function(v){\n      const len = v.length > 2 ? v.length : 2    // allows y-M-d to produce yy-MM-dd\n      const s = '0' + z[v.slice(-1)]\n      return s.slice( -(len) );\n  });\n}\n","\nlet ltzCode = null;\n\nconst getLTZ = () => {\n\n  if (ltzCode == null) {\n    var now = (new Date()) + \"\"\n    var i = now.indexOf(\" GMT\");\n    if (i > -1)\n        ltzCode = now.substring(i,i+10)\n\n    console.log('ltzCode:',ltzCode);\n  }\n\n   return ltzCode\n}\n\nexport const localStrToDate = (target) => {\n\n  if (target == null)\n     return null;\n\n  var i = target.indexOf(\" GMT\");\n  if (i == -1)   // missing\n     target += getLTZ()\n  return new Date(target);\n\n}\n\n","\nexport default function (yourComponent) {\n  // console.log('changeHandler generated.');\n\n  return (e) => {\n\n    if (typeof e === 'string')\n       return;   // passed in by Radio, can be ignored, next event has target.name\n\n    if (typeof e.preventDefault === 'function')\n        e.preventDefault();\n\n    if ('target' in e && 'name' in e.target && 'value' in e.target) {\n\n        var stateChange = {};\n        stateChange[e.target.name] = e.target.value;\n\n        // console.log(typeof e, e.target, ':', e.target.value, '->', e.target.name);\n\n        yourComponent.setState(stateChange);\n        }\n      else {\n          // console.log('something unusual here, expecting e.target.name e.target.value e:', typeof e, e);\n      }\n    }\n}\n\n","module.exports = __WEBPACK_EXTERNAL_MODULE_react__;","module.exports = __WEBPACK_EXTERNAL_MODULE_react_dom__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/lib/\";","import AlertModal from './AlertModal.js'\n\nimport CheckBox from './CheckBox.js'\n\nimport ChoiceText from './ChoiceText.js'\n\nimport  { sanitize, formatMoney }  from './Common.js'\n\nimport ConfirmModal from './ConfirmModal.js'\n\nimport ContextMenu from './ContextMenu.js'\n\nimport  { convertDate, dateTime, addDigit, currentDateTime, currentDate, \ncurrentDBDateTime, currentDBDate, dbDate, monthName }  from './DateFunct.js'\n\nimport DateInput from './DateInput.js'\n\nimport DoubleListBox from './DoubleListBox.js'\n\nimport ErrorModal from './ErrorModal.js'\n\nimport InputFile from './InputFile.js'\n\nimport  { generateInvalid, setInvalidScreen, setInvalidTable, setInvalidDual, checkValidityScreen, \ncheckValidityTable, resetDisplayScreen, resetDisplayTable, wasClickedScreen, wasClickedTable, \nisConstant, validCheckDual, validCheckScreen, validCheckTable, clearInvalidDual, \nclearInvalidScreen, clearInvalidTable, processInvalidStyleScreen, processStyleScreen, clearInvalidScreenOnly, \nprocessInvalidStyleTable, processStyleTable, isInvalid, getInvalidMessage }  from './Invalid.js'\n\nimport  { Choice, List }  from './List.js'\n\nimport Modal from './Modal.js'\n\nimport Radio from './Radio.js'\n\nimport  { search, binSearch }  from './SearchFunct.js'\n\nimport SearchSortTable from './SearchSortTable.js'\n\nimport Slider from './Slider.js'\n\nimport  { generateButton, generateDefaultButton, generateCSSButton, generateCSSDefaultButton }  from './Theme.js'\n\nimport  { isOpera, isFirefox, isSafari, isIE, isEdge, \nisChrome, isEdgeChromium, isBlink }  from './browserDetect.js'\n\nimport  { date2str }  from './date2str.js'\n\nimport  { localStrToDate }  from './localStrToDate.js'\n\nimport makeChangeHandler from './makeChangeHandler.js'\n\nexport { AlertModal, CheckBox, ChoiceText, sanitize, formatMoney, \nConfirmModal, ContextMenu, convertDate, dateTime, addDigit, \ncurrentDateTime, currentDate, currentDBDateTime, currentDBDate, dbDate, \nmonthName, DateInput, DoubleListBox, ErrorModal, InputFile, \ngenerateInvalid, setInvalidScreen, setInvalidTable, setInvalidDual, checkValidityScreen, \ncheckValidityTable, resetDisplayScreen, resetDisplayTable, wasClickedScreen, wasClickedTable, \nisConstant, validCheckDual, validCheckScreen, validCheckTable, clearInvalidDual, \nclearInvalidScreen, clearInvalidTable, processInvalidStyleScreen, processStyleScreen, clearInvalidScreenOnly, \nprocessInvalidStyleTable, processStyleTable, isInvalid, getInvalidMessage, Choice, \nList, Modal, Radio, search, binSearch, \nSearchSortTable, Slider, generateButton, generateDefaultButton, generateCSSButton, \ngenerateCSSDefaultButton, isOpera, isFirefox, isSafari, isIE, \nisEdge, isChrome, isEdgeChromium, isBlink, date2str, \nlocalStrToDate, makeChangeHandler }\n\n"],"names":["React","useState","useEffect","Modal","defProps","show","closeFunct","message","AlertModal","inProps","props","console","error","checked","String","fromCharCode","unchecked","CheckBox","handle","e","preventDefault","target","name","value","selectedValue","onChange","text","children","rest","isChecked","symbol","ChoiceText","pref","hasOwnProperty","choices","list","map","el","k","sanitize","item","table","valid","startsWith","i","length","toUpperCase","formatMoney","amount","decimalCount","decimal","thousands","dollarSign","Math","abs","isNaN","negativeSign","parseInt","Number","toFixed","toString","j","substr","replace","slice","log","yesFunct","noFunct","ConfirmModal","async","processYesFunct","processNoFunct","ContextMenu","propsIn","positionX","positionY","noLeave","noCancel","menu","propsPositionX","propsPositionY","propsNoLeave","propsNoCancel","propsMenu","menuPositionStyle","left","right","cancelButton","execute","funct","mouseLeave","buildMenuItem","row","key","convertDate","convDate","indexOf","date","split","dateTime","dateAndTime","splitDT","partTime","time","addDigit","newValue","currentDateTime","today","Date","getMonth","getDate","getFullYear","getHours","getMinutes","getSeconds","currentDate","currentDBDateTime","monthName","getMilliseconds","currentDBDate","dbDate","month","date2str","localStrToDate","isSafari","isIE","DateInput","showCalender","setShowCalender","f","dateValue","format","handleCalendarChange","triangle","useRef","List","hasProperty","obj","propName","Object","getOwnPropertyDescriptor","DoubleListBox","leftRef","rightRef","setChoices","filter","find","r","leftValues","setLeftValues","rightValues","setRightValues","leftSelections","setLeftSelections","rightSelections","setRightSelections","reset","reportChange","compName","add","a","b","ans","push","sub","includes","moveRightSelectButton","clearSelections","leftBox","current","rightBox","selected","moveLeftSelectButton","moveRightAllButton","moveLeftAllButton","leftHandleChange","values","rightHandleChange","isPosInt","num","test","defaultSize","leftTitle","rightTitle","size","max","title","ErrorModal","InputFile","inputFile","setInputFile","displayFile","setDisplayFile","buttonName","buttonname","processFile","index","lastIndexOf","file","substring","getFileName","additionalProcessing","processDisplayDefault","processDisplay","id","event","accept","generateInvalid","numScreenConstants","numTableConstants","invalidArray","validity","display","setInvalidScreen","invalidValues","constant","setInvalidTable","found","pos","setInvalidDual","constant1","constant2","type","checkValidityScreen","isInvalid","checkValidityTable","getInvalidMessage","resetDisplayScreen","resetDisplayTable","wasClickedScreen","setInvalid","localInvalid","wasClickedTable","isConstant","constants","validCheckDual","validCheckScreen","validCheckTable","clearInvalidDual","screen","clearInvalidScreen","clearInvalidTable","processInvalidStyleScreen","cssClassName","processStyleScreen","clearInvalidScreenOnly","processInvalidStyleTable","processStyleTable","invalid","Fragment","min","arr","reduce","acc","_Choice","ref","opt","keyPart","keyName","JSON","stringify","unshift","listHandleChange","e2","Array","from","selectedOptions","option","multiple","_List","Choice","forwardRef","createPortal","elRef","div","document","createElement","modalRoot","getElementById","appendChild","removeChild","Frag","Radio","search","field","binSearch","top","bottom","middle","neverFound","generateCSSButton","funnel","upper","lower","digit","range","start","end","fill","_","idx","SearchSortTable","propsPassed","defaultEachRowInTable","cols","keys","defaultProps","MAX_ITEMS","eachRowInTable","assign","FILTER","SRCHITEM","SRCHHDR","numCols","data","initialFilters","initialBackground","backgroundColor","getComputedStyle","documentElement","getPropertyValue","startIndexes","setStart","setEnd","searchItem","setSearchItem","searchHeader","setSearchHeader","searchHeaderValues","setSearchHeaderValues","sortOrder","setSortOrder","topDisabled","setTopDisabled","previousDisabled","setPreviousDisabled","nextDisabled","setNextDisabled","bottomDisabled","setBottomDisabled","rowValues","setRowValues","maxItems","setMaxItems","maximum","setMaximum","setFilter","filterOn","setFilterOn","filterPressed","setFilterPressed","alertMessage","setAlertMessage","showAlert","setShowAlert","indexes","setIndexes","copyIndex","setCopyIndex","setLength","background","setBackground","origIndexes","populateSearch","sendIndexes","setStartEnd","setDisable","order","localFilter","header","count","tableDivStyle","heightStyle","height","filterBackground","genButtonStyle","genTopButtonStyle","genPreviousButtonStyle","genNextButtonStyle","genBottomButtonStyle","genFilterStyle","topSymbol","previousSymbol","nextSymbol","bottomSymbol","showData","undefined","letterDigit","letters","alphabet","topButtonHTML","topButton","previousButtonHTML","previousButton","nextButtonHTML","nextButton","bottomButtonHTML","bottomButton","allButtonHTML","allButton","titleSize","buttonStyle2","border","filterSection","processFilterOn","filterButton","searchStyle","itemStyle","searchSection","setupSearch","searchItemButton","footer","processMaxItems","hoverClassName","root","hoverBackColor","hoverColor","colorValue","style","setProperty","buildHeaders","buildFooter","btnImg","filterName","sort","filterStyle","processFilter","sortClicked","clearSetBackground","setIndex","resetSortOrder","local","filterValidate","newData","indexing","done","foundDate","dataPart","filterPart","dataDate","convertDateTime","convertDateTimeReg","filterDate","move","doCopy","char","localDate","validate","which","tableIndex","searchStart","searchAny","begin","str","orderType","ordering","dateFormat","sortDate","sortAry","item1","item2","newIndexes","letterLink","set","backgrd","letter","bIndex","sortIndexes","stop","endLen","sentIndexes","allIndexes","dataLen","startEnd","Slider","startValue","displayValue","rangeValue","setRangeValue","generateButton","disabled","disableColor","Style","generateDefaultButton","buttonStyle","noBackground","cssNormalName","cssDisableName","generateCSSDefaultButton","window","navigator","userAgent","isOpera","opr","addons","opera","isFirefox","InstallTrigger","HTMLElement","p","safari","pushNotification","documentMode","isEdge","StyleMedia","isChrome","chrome","webstore","runtime","isEdgeChromium","isBlink","CSS","pattern","z","y","M","d","h","m","s","v","len","ltzCode","getLTZ","now","yourComponent","stateChange","setState","makeChangeHandler"],"sourceRoot":""}